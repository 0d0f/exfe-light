/*jslint evil: true */
/*!
 * https://github.com/cfddream/odof
 * License MIT
 *
 * Refer:
 *  - http://wiki.commonjs.org/wiki/CommonJS
 *  - http://wiki.commonjs.org/wiki/Modules/1.1.1
 *  - https://github.com/joyent/node/blob/master/lib/module.js
 *  - https://github.com/seajs/seajs
 *  - https://github.com/tobie/modulr-node
 *  - http://www.page.ca/~wes/CommonJS/modules-2.0-draft8/commonjs%20modules%202.0-8(2).pdf
 */
(function (context) {
  'use strict';

  /**
   * define a module
   * @api public
   */
  function define(id, deps, factory) {
    var argsLen = arguments.length;

    // define(factory)
    if (argsLen === 1) {
      factory = id;
      id = undefined;
    }
    // define(id || deps, factory);
    else if (argsLen === 2) {
      factory = deps;
      deps = undefined;
    }

    var module = new Module(id, deps, factory);
    if (id) {
      __cache[id] = module;
    // anonymous function 先简单处理匿名方法
    } else {
      factory.call(module, _require, module.exports, module);
    }
  }

  // AMD
  define.amd = { jQuery: true };

  context.define = define;

  /**
   * 不对外提供此接口
   * Accepts a module identifier.
   * @param {String} id    module.id
   */
  function _require(id) {
    var module = __cache[id];

    if (!module) {
      return null;
    }

    if (!module.exports) {
      _initExports(module);
    }

    return module.exports;
  }

  function _initExports(module/*, context*/) {
    var factory = module.factory, result;

    delete module.factory;

    result = factory(_require, module.exports = {}, module);

    if (result) {
      module.exports = result;
    }
  }

  function Module(id, deps, factory) {
    this.id = id;

    this.uri = undefined;
    // dependencies
    //this.deps = deps || [];
    this.deps = deps;

    // lazy eval
    // http://calendar.perfplanet.com/2011/lazy-evaluation-of-commonjs-modules/
    if (typeof factory === 'string') {
      factory = new Function('require', 'exports', 'module', factory);
    }
    this.factory = factory;

    this.exports = undefined;
    this.filename = null;
    // 暂时赋值为 undefined
    this.parent = undefined;
    // 后面要异步加载
    this.loaded = false;
  }

  Module.prototype.constructor = Module;

  var __cache = Module.__cache = {};

})(this);

/*jshint strict: false */
define('class', function () {
/*
 * Class
 * @author cfddream@gmail.com
 *
 * Thanks to:
 *
 *  - https://github.com/mootools/prime/blob/master/prime/index.js
 *  - https://github.com/mitsuhiko/classy/blob/master/classy.js
 *  - https://github.com/ded/klass/blob/master/klass.js
 *  - https://github.com/documentcloud/backbone/blob/master/backbone.js
 *  - https://github.com/alipay/arale/blob/master/lib/class/src/class.js
 *
 * Test:
 *
 *  - http://jsperf.com/odof-class
 *
 */

  function Class(o) {
    if (!(this instanceof Class) && isFunction(o)) {
      return classy(o);
    }
  }

  Class.create = function (parent, protoProps) {
    if (!isFunction(parent)) {
      protoProps = parent;
      parent = null;
    }
    protoProps || (protoProps = {});
    parent || (parent = protoProps.Extends || Class);
    return createClass(parent, protoProps);
  };

  Class.extend = function (protoProps, classProps) {
    return createClass(this, protoProps, classProps);
  };

  // Helpers
  // -------

  function classy(o) {
    o.extend = Class.extend;
    o.implement = implement;
    return o;
  }

  function createClass(parent, protoProps, staticProps, parentProtos, protos) {
    parentProtos = parent.prototype;

    function subclass() {
      parent.apply(this, arguments);

      // Only call initialize in self constructor.
      if (this.constructor === subclass && this.initialize) {
        this.initialize.apply(this, arguments);
        this.initialized = true;
      }
    }

    // Inherit class (static) properties from parent.
    if (parent !== Class) { mixin(subclass, parent); }

    subclass.Extends = parent;

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    protos = createProto(parentProtos);

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) { mixin(protos, protoProps); }

    subclass.prototype = protos;

    // Add static properties to the constructor function, if supplied.
    if (staticProps) { mixin(subclass, staticProps); }

    // Set a convenience property in case the parent's prototype is needed later.
    subclass.superclass = parentProtos;

    // Correctly set subclass's `prototype.constructor`.
    subclass.prototype.constructor = subclass;

    return classy(subclass);
  }

  // Shared empty constructor function to aid in prototype-chain creation.
  function ctor() {}

  // See: http://jsperf.com/object-create-vs-new-ctor
  var createProto = Object.__proto__ ?
    function (proto) {
      return { __proto__: proto };
    } :
    function (proto) {
      ctor.prototype = proto;
      return new ctor();
    };

  function implement(properties) {
    var key, proto = this.prototype;
    for (key in properties) { proto[key] = properties[key]; }
  }

  function mixin(r, s) {
    var k;
    for (k in s) { r[k] = s[k]; }
  }

  var toString = Object.prototype.toString;

  function isFunction(f) {
    return toString.call(f) === '[object Function]';
  }

  return Class;
});

/*jshint -W116*/
define('emitter', function () {
  'use strict';

 /**
  * Emitter
  *
  * Thanks to:
  *
  *  - https://github.com/documentcloud/backbone/blob/master/backbone.js
  *  - https://github.com/joyent/node/blob/master/lib/events.js
  *  - https://github.com/alipay/arale/blob/master/lib/events/src/events.js
  *
  *  Test:
  *
  *   - http://jsperf.com/odof-events-test/4
  *   - http://jsperf.com/if-vs-short-circuiting
  */
  var EVENT_SPLITTER = /\s+/
    , keys = Object.keys;

  if (!keys) {
    keys = function (o) {
      var r = [], p;
      for (p in o) {
        if (o.hasOwnProperty(p)) {
          r[r.length] = p;
        }
      }
      return r;
    };
  }

  function Emitter() {}

  Emitter.prototype.on = function (events, fn, ctx) {
    var callbacks, event, list;
    if (!fn) { return this; }
    events = events.split(EVENT_SPLITTER);

    callbacks = this.__callbacks || (this.__callbacks = {});

    while ((event = events.shift())) {
      list = callbacks[event] || (callbacks[event] = []);
      fn.__context = ctx;
      list[list.length] = fn;
    }

    return this;
  };

  Emitter.prototype.once = function (events, fn, ctx) {
    var callbacks, event, list;
    if (!fn) return this;
    events = events.split(EVENT_SPLITTER);

    callbacks = this.__callbacks || (this.__callbacks = {});

    while ((event = events.shift())) {
      list = callbacks[event] || (callbacks[event] = []);
      fn.__once = true;
      fn.__context = ctx;
      list[list.length] = fn;
    }

    return this;
  };

  Emitter.prototype.off = function (events, fn, ctx) {
    var callbacks, event, list, i, cb;
    if (!(callbacks = this.__callbacks)) return this;
    if (!(events || fn || ctx)) {
      delete this.__callbacks;
      return this;
    }

    events = events.split(EVENT_SPLITTER) || keys(callbacks);

    while ((event = events.shift())) {
      list = callbacks[event];
      if (!list) continue;

      if (!(fn || ctx)) {
        delete callbacks[event];
        continue;
      }

      for (i = list.length - 1; i; --i) {
        cb = list[i];
        if (!(fn && cb !== fn || ctx && cb.__context !== ctx)) {
          list.splice(i, 1);
        }
      }
    }

    return this;
  };

  Emitter.prototype.emit = function (events) {
    var callbacks, event, all, list, i, len, rest = [], args, cb;
    if (!(callbacks = this.__callbacks)) return this;

    events = events.split(EVENT_SPLITTER);

    for (i = arguments.length - 1; i; --i) {
      rest[i - 1] = arguments[i];
    }

    if ((all = callbacks.call)) args = [0].concat(rest);

    while ((event = events.shift())) {
      if ((list = callbacks[event])) {
        for (i = 0, len = list.length; i < len; ++i) {
          cb = list[i];
          cb.apply(cb.__context || this, rest);
          if (cb.__once) {
            list.splice(i--, 1);
            len--;
          }
        }
      }

      // if `list` not found, don't trigger `all`
      if (list && all) {
        args[0] = event;
        for (i = 0, len = all.length; i < len; ++i) {
          cb = all[i];
          cb.apply(cb.__context || this, args);
        }
      }
    }

    return this;
  };

  return Emitter;
});

/*jshint -W116*/
define('base', function (require) {
  'use strict';
  // Thanks to:
  //
  // - https://github.com/mootools/mootools-core/blob/master/Source/Class/Class.Extras.js
  // - https://github.com/alipay/arale/blob/master/lib/base/src/options.js


  // Helpers
  // -------
  var EVENT_PREFIX = /^on[A-Z]/;

  var PROTO = Object.__proto__;

  var toString = Object.prototype.toString;

  var isArray = Array.isArray;
  if (!isArray) isArray = function (a) {return toString.call(a) === '[object Array]';}

  function isFunction(f) {
    return toString.call(f) === '[object Function]';
  }

  function isPlainObject(o) {
    return o &&
      // 排除 boolean/string/number/function 等
      // 标准浏览器下，排除 window 等非 JS 对象
      // 注：ie8- 下，toString.call(window 等对象)  返回 '[object Object]'
        toString.call(o) === '[object Object]' &&
      // ie8- 下，排除 window 等非 JS 对象
        ('isPrototypeOf' in o);
  }

  function merge(receiver, supplier) {
    var key, value;

    for (key in supplier) {
      value = supplier[key];

      if (isArray(value)) {
        value = value.slice();
      } else if (isPlainObject(value)) {
        value = merge(receiver[key] || {}, value);
      }

      receiver[key] = value;
    }

    return receiver;
  }

  // Convert `onChangeTitle` to `changeTitle`
  function getEventName(name) {
    return name[2].toLowerCase() + name.substring(3);
  }

  var Class = require('class');
  var Emitter = require('emitter');

  return Class.create(Emitter, {

    setOptions: function (custom) {
      var key, value, options;
      if (!this.hasOwnProperty('options')) {
        this.options = {};
      }

      options = this.options;

      // 父类 options
      if (this.constructor.superclass.options) {
        merge(options, this.constructor.superclass.options);
      }

      // 子类 options
      if (this.constructor.prototype.options) merge(options, this.constructor.prototype.options);

      // 实例 options
      if (custom && custom.options) merge(options, custom.options);

      if (this.on) {
        for (key in options) {
          value = options[key];
          if (isFunction(value) && EVENT_PREFIX.test(key)) {
            this.on(getEventName(key), value);
            delete options[key];
          }
        }
      }
    },

    destory: function () {
      var k;
      for (k in this) {
        if (this.hasOwnProperty(k)) {
          delete this[k];
        }
      }

      if (PROTO) this.__proto__ = PROTO;
    }

  });

});

define('bus', function (require) {
  'use strict';

  /**
   *
   * 全局通信总线
   *
   * 模块通信的 BUS
   *
   * Usage:
   *          a.js
   *            var Bus = require('bus');
   *            Bus.on('click', function () { ... });
   *          b.js
   *            var Bus = require('bus');
   *            Bus.emit('click', data);
   *
   */

  var Emitter = require('emitter');

  return new Emitter();

});

/*jshint -W116*/

/**
 * rex: a lightweight JavaScript's functional library.
 *
 * Thanks:
 *    - https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js
 *    - https://github.com/ded/valentine/blob/master/valentine.js
 *    - https://github.com/documentcloud/underscore/blob/master/underscore.js
 *    - https://github.com/jquery/jquery/blob/master/src/core.js
 *    - http://cjohansen.no/talks/2012/sdc-functional/#1
 *    - http://osteele.com/sources/javascript/functional/
 *    - https://github.com/osteele/functional-javascript
 *    - http://fitzgen.github.com/wu.js/
 */

define('rex', function () {
  'use strict';

  var NULL = null
    , ArrayProto = Array.prototype
    , ObjectProto = Object.prototype
    , hasOwn = ObjectProto.hasOwnProperty
    , toString = ObjectProto.toString
    , slice = ArrayProto.slice
    , NIndexOf = ArrayProto.indexof
    , NLastIndexOf = ArrayProto.lastIndexOf
    , NReduce = ArrayProto.reduce
    , NReduceRight = ArrayProto.reduceRight
    , R = {};

  R.each = function (a, fn, ctx) {
    var i, l = a.length;
    // see: http://jsperf.com/for-vs-foreach/30
    if (l === +l) {
      for (i = 0; i < l; ++i) {
        i in a && fn.call(ctx, a[i], i, a);
      }
    } else {
      for (i in a) {
        R.has(a, i) && fn.call(ctx, i, a[i], a);
      }
    }
  };

  // see: http://es5.github.com/#x15.4.4.19
  //      http://jsperf.com/array-prototpy-map-vs-for
  R.map = function (a, fn, ctx) {
    var r = [], i, j, l = a.length;
    if (l === +l) {
      for (i = 0; i < l; ++i) {
        i in a && (r[i] = fn.call(ctx, a[i], i, a));
      }
    } else {
      j = 0;
      for (i in a) {
        R.has(a, i) && (r[j++] = fn.call(ctx, i, a[i], a));
      }
    }
    return r;
  };

  // see: http://es5.github.com/#x15.4.4.17
  R.some = function (a, fn, ctx) {
    var i = 0, l = a.length;
    for (; i < l; ++i) {
      if (i in a && fn.call(ctx, a[i], i, a)) return true;
    }
    return false;
  };

  // see: http://es5.github.com/#x15.4.4.16
  R.every = function (a, fn, ctx) {
    var i = 0, l = a.length;
    for (; i < l; ++i) {
      if (i in a && !fn.call(ctx, a[i], i, a)) return false;
    }
    return true;
  };

  // see: http://es5.github.com/#x15.4.4.20
  R.filter = R.select = function (a, fn, ctx) {
    var r = [], i = 0, j = 0, l = a.length;
    for (; i < l; ++i) {
      if (i in a) {
        if (!fn.call(ctx, a[i], i, a)) continue;
        r[j++] = a[i];
      }
    }
    return r;
  };

  // see: http://es5.github.com/#x15.4.4.14
  R.indexOf = NIndexOf ? function (a, el, i) {
    return a.indexOf(el, isFinite(i) ? i : 0);
  } :
  function (a, el, i) {
    var l = a.length;
    if (!l) return -1;
    i || (i = 0);
    if (i > l) return -1;
    (i < 0) && (i = Math.max(0, l + i));
    for (; i < l; ++i) {
      if (i in a && a[i] === el) return i;
    }
    return -1;
  };

  // see http://es5.github.com/#x15.4.4.15
  R.lastIndexOf = NLastIndexOf ? function (a, el, start) {
    return a.lastIndexOf(el, isFinite(start) ? start : a.length);
  } :
  function (a, el, i) {
    var l = a.length;
    i = l - 1;
    if (!l) return -1;
    (arguments.length > 1) && (i = Math.min(i, arguments[1]));
    (i < 0) && (i += l);
    for (; i >= 0; --i) {
      if (i in a && a[i] === el) return i;
    }
    return -1;
  };

  // http://es5.github.com/#x15.4.4.21
  R.reduce = NReduce ? function (o, fn, mem, ctx) {
    return o.reduce(fn, mem, ctx);
  } :
  function (o, fn, mem, ctx) {
    o || (o = []);
    var i = 0, l = o.length;

    if (arguments.length < 3) {
      do {
        if ( i in o) {
          mem = o[i++];
          break;
        }

        if (++i >= l) {
          throw new TypeError('Empty array');
        }
      } while (true);
    }
    for (; i < l; i++) {
      if (i in o) {
        mem = fn.call(ctx, mem, o[i], i, o);
      }
    }
    return mem;
  };

  // http://es5.github.com/#x15.4.4.22
  R.reduceRight = NReduceRight ? function (o, fn, mem, ctx) {
    return o.reduce(fn, mem, ctx);
  } :
  function (o, fn, mem, ctx) {
    o || (o = []);
    var i = o.length - 1;

    if (arguments.length < 3) {
      do {
        if (i in o) {
          mem = o[i--];
          break;
        }

        if (--i < 0) {
          throw new TypeError('Empty array');
        }
      } while (true);
    }
    for (; i >= 0; --i) {
      if (i in o) {
        mem = fn.call(ctx, mem, o[i], i, o);
      }
    }
    return mem;
  };

  R.find = function (a, fn, ctx) {
    var i = 0, l = a.length, r;
    for (; i < l; ++i) {
      if (i in a && fn.call(ctx, a[i], i, a)) {
        r = a[i];
        break;
      }
    }
    return r;
  }

  R.reject = function (a, fn, ctx) {
    var r = [], i = 0, l = a.length;
    for (; i < l; ++i) {
      if (i in a) {
        if (fn.call(ctx, a[i], i, a)) {
          continue;
        }
        r[i++] = a[i];
      }
    }
    return r;
  };

  R.toArray = function (a) {
    if (!a) return [];
    if (R.isArray(a)) return a;
    if (a.toArray) return a.toArray();
    if (R.isArgs(a)) return slice.call(a);
    var r = [], k, j = 0;
    for (k in a) {
      R.has(a, k) && (r[j++] = a[k]);
    }
    return r;
  };

  R.first = function (a) {
    return a[0];
  };

  R.last = function (a) {
    return a[a.length - 1];
  };

  R.size = function (a) {
    return R.toArray(a).length;
  };

  R.compact = function (a) {
    return R.filter(a, function (v) {
      return !!v;
    });
  };

  R.flatten = function (a) {
    return R.reduce(a, function (memo, value) {
      if (R.isArray(value)) {
        return memo.concat(R.flatten(value));
      }
      memo[memo.length] = value;
      return memo;
    }, []);
  };

  R.unique = function (a) {
    var r = [], i = a.length - 1, j = 0;
    label:
    for (; i >= 0; --i) {
      for (; j < r.length; ++j) {
        if (r[j] === a[i]) {
          continue label;
        }
      }
      r[r.length] = a[i];
    }
    return r;
  };

  R.merge = function (one, two) {
    var i = one.length, j = 0, l
    if (isFinite(two.length)) {
      for (l = two.length; j < l; j++) {
        one[i++] = two[j];
      }
    } else {
      while (two[j] !== undefined) {
        one[i++] = two[j++];
      }
    }
    one.length = i;
    return one;
  };

  R.inArray = function (a, v) {
    return !!~R.indexOf(a, v);
  };

  R.compose = function () {
    var fns = arguments, i = fns.length, args;

    function cp() {
      args = arguments;
      for (; i >= 0; --i) {
        args = [fns[i].apply(this, args)];
      }
      return args[0];
    }

    return cp;
  };

  //R.pluck = function (a, k) { };

  R.has = function (o, k) {
    return hasOwn.call(o, k);
  };

  R.keys = Object.keys || function (o) {
    var r = [], i = 0, k;
    for (k in o) {
      if (R.has(o, k)) r[i++] = k;
    }
    return r;
  };

  R.values = function (o) {
    var r = [], i = 0, k;
    for (k in o) {
      if (R.has(o, k)) r[i++] = o[k];
    }
    return r;
  };

  // TODO: 深拷贝/潜拷贝
  R.extend = function () {
  };

  R.mixin = function (r, s) {
    var p;
    for (p in s) r[p] = s[p];
  };

  // https://gist.github.com/2708275
  R.tap = function (o, f) {
    var r;
    if (f) r = f(o);
    return !r ? o : r;
  };

  R.nextTick = function (f) {
    setTimeout(f, 0);
  };

  R.countDown = function (n, f) {
    function cb() {
      if (--n === 0) f();
    }
    return cb;
  };

  R.isFunction = function (f) {
    return typeof f === 'function';
  };

  R.isString = function (s) {
    return toString.call(s) === '[object String]';
  };

  R.isElement = function (el) {
    return !!(el && el.nodeType && el.nodeType == 1)
  };

  R.isArray = Array.isArray || function (a) {
    return a instanceof Array;
  };

  R.isArrayLike = function (a) {
    return (a && a.length && isFinite(a.length));
  };

  R.isObject = function (o) {
    return o instanceof Object && !R.isFunction(o) && !R.isArray(o);
  };

  R.isDate = function (d) {
    return !!(d && d.getTimezoneOffset && d.setUTCFullYear)
  };

  R.isRegex = function (r) {
    return !!(r && r.test && r.exec && (r.ignoreCase || r.ignoreCase === false));
  };

  R.isUndefined = function (o) {
    return typeof o === 'undefined';
  };

  R.isDefined = function (o) {
    return typeof o !== 'undefined';
  };

  R.isNaN = function (n) {
    return n !== n;
  };

  R.isNull = function (o) {
    return o === null;
  };

  R.isNumber = function (n) {
    return toString.call(n) === '[object Number]';
  };

  R.isBoolean = function (b) {
    // return typeof b === 'boolean';
    return (b === true) || (b === false);
  };

  R.isArgs = function (a) {
    return !!(a && R.has(a, 'callee'))
  };

  R.isEmpty = function (o) {
    return R.isArray(o) ? o.length === 0 :
      R.isObject(o) ? (function () {
      for (var i in o) {
        i = 1;
        break;
      }
      return !!i;
    }()) :
    o === '';
  };

  function rex(v, ctx) {
    return new Rex(v, ctx);
  }

  rex.chain = function (v, ctx) {
    return new Rex(v, ctx).chain();
  };

  R.mixin(rex, R);

  function Rex(v, ctx) {
    this._value = v;
    this._context = ctx || NULL;
    this._chained = false;
  }

  var RP = Rex.prototype;

  RP.constructor = Rex;

  RP.chain = function () {
    this._chained = true;
    return this;
  };

  RP.value = function () {
    return this._value;
  };

  rex.each(R.keys(R), function (name, fn) {
    fn = rex[name]
    RP[name] = function () {
      var i = 0
        , ret = this._value
        , l = arguments.length
        , a = [ret];

      for (; i < l; ++i) a[i + 1] = arguments[i];

      ret = fn.apply(this._context, a);
      this._value = ret;
      return this._chained ? this : ret;
    };
  });

  return rex;

});

/*!
 * jQuery JavaScript Library v1.8.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: Thu Sep 20 2012 21:13:05 GMT-0400 (Eastern Daylight Time)
 */
(function( window, undefined ) {
var
	// A central reference to the root jQuery(document)
	rootjQuery,

	// The deferred used on DOM ready
	readyList,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,
	location = window.location,
	navigator = window.navigator,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// Save a reference to some core methods
	core_push = Array.prototype.push,
	core_slice = Array.prototype.slice,
	core_indexOf = Array.prototype.indexOf,
	core_toString = Object.prototype.toString,
	core_hasOwn = Object.prototype.hasOwnProperty,
	core_trim = String.prototype.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,

	// Used for detecting and trimming whitespace
	core_rnotwhite = /\S/,
	core_rspace = /\s+/,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	rquickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return ( letter + "" ).toUpperCase();
	},

	// The ready event handler and self cleanup method
	DOMContentLoaded = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
			jQuery.ready();
		} else if ( document.readyState === "complete" ) {
			// we're here because readyState === "complete" in oldIE
			// which is good enough for us to call the dom ready!
			document.detachEvent( "onreadystatechange", DOMContentLoaded );
			jQuery.ready();
		}
	},

	// [[Class]] -> type pairs
	class2type = {};

jQuery.fn = jQuery.prototype = {
	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem, ret, doc;

		// Handle $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle $(DOMElement)
		if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;
					doc = ( context && context.nodeType ? context.ownerDocument || context : document );

					// scripts is true for back-compat
					selector = jQuery.parseHTML( match[1], doc, true );
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						this.attr.call( selector, context, true );
					}

					return jQuery.merge( this, selector );

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The current version of jQuery being used
	jquery: "1.8.2",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems, name, selector ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		ret.context = this.context;

		if ( name === "find" ) {
			ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
		} else if ( name ) {
			ret.selector = this.selector + "." + name + "(" + selector + ")";
		}

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	eq: function( i ) {
		i = +i;
		return i === -1 ?
			this.slice( i ) :
			this.slice( i, i + 1 );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ),
			"slice", core_slice.call(arguments).join(",") );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready, 1 );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		return obj == null ?
			String( obj ) :
			class2type[ core_toString.call(obj) ] || "object";
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// scripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, scripts ) {
		var parsed;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			scripts = context;
			context = 0;
		}
		context = context || document;

		// Single tag
		if ( (parsed = rsingleTag.exec( data )) ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts ? null : [] );
		return jQuery.merge( [],
			(parsed.cacheable ? jQuery.clone( parsed.fragment ) : parsed.fragment).childNodes );
	},

	parseJSON: function( data ) {
		if ( !data || typeof data !== "string") {
			return null;
		}

		// Make sure leading/trailing whitespace is removed (IE can't handle it)
		data = jQuery.trim( data );

		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		// Make sure the incoming data is actual JSON
		// Logic borrowed from http://json.org/json2.js
		if ( rvalidchars.test( data.replace( rvalidescape, "@" )
			.replace( rvalidtokens, "]" )
			.replace( rvalidbraces, "")) ) {

			return ( new Function( "return " + data ) )();

		}
		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && core_rnotwhite.test( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var name,
			i = 0,
			length = obj.length,
			isObj = length === undefined || jQuery.isFunction( obj );

		if ( args ) {
			if ( isObj ) {
				for ( name in obj ) {
					if ( callback.apply( obj[ name ], args ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.apply( obj[ i++ ], args ) === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isObj ) {
				for ( name in obj ) {
					if ( callback.call( obj[ name ], name, obj[ name ] ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.call( obj[ i ], i, obj[ i++ ] ) === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var type,
			ret = results || [];

		if ( arr != null ) {
			// The window, strings (and functions) also have 'length'
			// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
			type = jQuery.type( arr );

			if ( arr.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( arr ) ) {
				core_push.call( ret, arr );
			} else {
				jQuery.merge( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}

		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value, key,
			ret = [],
			i = 0,
			length = elems.length,
			// jquery objects are treated as arrays
			isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ( ( length > 0 && elems[ 0 ] && elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( key in elems ) {
				value = callback( elems[ key ], key, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return ret.concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, pass ) {
		var exec,
			bulk = key == null,
			i = 0,
			length = elems.length;

		// Sets many values
		if ( key && typeof key === "object" ) {
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], 1, emptyGet, value );
			}
			chainable = 1;

		// Sets one value
		} else if ( value !== undefined ) {
			// Optionally, function values get executed if exec is true
			exec = pass === undefined && jQuery.isFunction( value );

			if ( bulk ) {
				// Bulk operations only iterate when executing function values
				if ( exec ) {
					exec = fn;
					fn = function( elem, key, value ) {
						return exec.call( jQuery( elem ), value );
					};

				// Otherwise they run against the entire set
				} else {
					fn.call( elems, value );
					fn = null;
				}
			}

			if ( fn ) {
				for (; i < length; i++ ) {
					fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
				}
			}

			chainable = 1;
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready, 1 );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", jQuery.ready, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", DOMContentLoaded );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", jQuery.ready );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.split( core_rspace ), function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" && ( !options.unique || !self.has( arg ) ) ) {
								list.push( arg );
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Control if a given callback is in the list
			has: function( fn ) {
				return jQuery.inArray( fn, list ) > -1;
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				args = args || [];
				args = [ context, args.slice ? args.slice() : args ];
				if ( list && ( !fired || stack ) ) {
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ]( jQuery.isFunction( fn ) ?
								function() {
									var returned = fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.done( newDefer.resolve )
											.fail( newDefer.reject )
											.progress( newDefer.notify );
									} else {
										newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
									}
								} :
								newDefer[ action ]
							);
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ] = list.fire
			deferred[ tuple[0] ] = list.fire;
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function() {

	var support,
		all,
		a,
		select,
		opt,
		input,
		fragment,
		eventName,
		i,
		isSupported,
		clickFn,
		div = document.createElement("div");

	// Preliminary tests
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	all = div.getElementsByTagName("*");
	a = div.getElementsByTagName("a")[ 0 ];
	a.style.cssText = "top:1px;float:left;opacity:.5";

	// Can't get basic test support
	if ( !all || !all.length ) {
		return {};
	}

	// First batch of supports tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	support = {
		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: ( div.firstChild.nodeType === 3 ),

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: ( a.getAttribute("href") === "/a" ),

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.5/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Make sure that if no value is specified for a checkbox
		// that it defaults to "on".
		// (WebKit defaults to "" instead)
		checkOn: ( input.value === "on" ),

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// Tests for enctype support on a form(#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
		boxModel: ( document.compatMode === "CSS1Compat" ),

		// Will be defined later
		submitBubbles: true,
		changeBubbles: true,
		focusinBubbles: false,
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		boxSizingReliable: true,
		pixelPosition: false
	};

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Test to see if it's possible to delete an expando from an element
	// Fails in Internet Explorer
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	if ( !div.addEventListener && div.attachEvent && div.fireEvent ) {
		div.attachEvent( "onclick", clickFn = function() {
			// Cloning a node shouldn't copy over any
			// bound event handlers (IE does this)
			support.noCloneEvent = false;
		});
		div.cloneNode( true ).fireEvent("onclick");
		div.detachEvent( "onclick", clickFn );
	}

	// Check if a radio maintains its value
	// after being appended to the DOM
	input = document.createElement("input");
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	input.setAttribute( "checked", "checked" );

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "name", "t" );

	div.appendChild( input );
	fragment = document.createDocumentFragment();
	fragment.appendChild( div.lastChild );

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	fragment.removeChild( input );
	fragment.appendChild( div );

	// Technique from Juriy Zaytsev
	// http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
	// We only care about the case where non-standard event systems
	// are used, namely in IE. Short-circuiting here helps us to
	// avoid an eval call (in setAttribute) which can cause CSP
	// to go haywire. See: https://developer.mozilla.org/en/Security/CSP
	if ( div.attachEvent ) {
		for ( i in {
			submit: true,
			change: true,
			focusin: true
		}) {
			eventName = "on" + i;
			isSupported = ( eventName in div );
			if ( !isSupported ) {
				div.setAttribute( eventName, "return;" );
				isSupported = ( typeof div[ eventName ] === "function" );
			}
			support[ i + "Bubbles" ] = isSupported;
		}
	}

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, div, tds, marginDiv,
			divReset = "padding:0;margin:0;border:0;display:block;overflow:hidden;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px";
		body.insertBefore( container, body.firstChild );

		// Construct the test element
		div = document.createElement("div");
		container.appendChild( div );

		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		// (only IE 8 fails this test)
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Check if empty table cells still have offsetWidth/Height
		// (IE <= 8 fail this test)
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
		support.boxSizing = ( div.offsetWidth === 4 );
		support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

		// NOTE: To any future maintainer, we've window.getComputedStyle
		// because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. For more
			// info see bug #3333
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = document.createElement("div");
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";
			div.appendChild( marginDiv );
			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== "undefined" ) {
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			// (IE < 8 does this)
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Check if elements with layout shrink-wrap their children
			// (IE 6 does this)
			div.style.display = "block";
			div.style.overflow = "visible";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			container.style.zoom = 1;
		}

		// Null elements to avoid leaks in IE
		body.removeChild( container );
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	fragment.removeChild( div );
	all = a = select = opt = input = fragment = div = null;

	return support;
})();
var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

jQuery.extend({
	cache: {},

	deletedIds: [],

	// Remove at next major release (1.9/2.0)
	uuid: 0,

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var thisCache, ret,
			internalKey = jQuery.expando,
			getByName = typeof name === "string",

			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,

			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,

			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

		// Avoid doing any more work than we need to when trying to get data on an
		// object that has no data at all
		if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
			return;
		}

		if ( !id ) {
			// Only DOM nodes need a new unique ID for each element since their data
			// ends up in the global cache
			if ( isNode ) {
				elem[ internalKey ] = id = jQuery.deletedIds.pop() || jQuery.guid++;
			} else {
				id = internalKey;
			}
		}

		if ( !cache[ id ] ) {
			cache[ id ] = {};

			// Avoids exposing jQuery metadata on plain JS objects when the object
			// is serialized using JSON.stringify
			if ( !isNode ) {
				cache[ id ].toJSON = jQuery.noop;
			}
		}

		// An object can be passed to jQuery.data instead of a key/value pair; this gets
		// shallow copied over onto the existing cache
		if ( typeof name === "object" || typeof name === "function" ) {
			if ( pvt ) {
				cache[ id ] = jQuery.extend( cache[ id ], name );
			} else {
				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
			}
		}

		thisCache = cache[ id ];

		// jQuery data() is stored in a separate object inside the object's internal data
		// cache in order to avoid key collisions between internal data and user-defined
		// data.
		if ( !pvt ) {
			if ( !thisCache.data ) {
				thisCache.data = {};
			}

			thisCache = thisCache.data;
		}

		if ( data !== undefined ) {
			thisCache[ jQuery.camelCase( name ) ] = data;
		}

		// Check for both converted-to-camel and non-converted data property names
		// If a data property was specified
		if ( getByName ) {

			// First Try to find as-is property data
			ret = thisCache[ name ];

			// Test for null|undefined property data
			if ( ret == null ) {

				// Try to find the camelCased property
				ret = thisCache[ jQuery.camelCase( name ) ];
			}
		} else {
			ret = thisCache;
		}

		return ret;
	},

	removeData: function( elem, name, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var thisCache, i, l,

			isNode = elem.nodeType,

			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,
			id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

		// If there is already no cache entry for this object, there is no
		// purpose in continuing
		if ( !cache[ id ] ) {
			return;
		}

		if ( name ) {

			thisCache = pvt ? cache[ id ] : cache[ id ].data;

			if ( thisCache ) {

				// Support array or space separated string names for data keys
				if ( !jQuery.isArray( name ) ) {

					// try the string as a key before any manipulation
					if ( name in thisCache ) {
						name = [ name ];
					} else {

						// split the camel cased version by spaces unless a key with the spaces exists
						name = jQuery.camelCase( name );
						if ( name in thisCache ) {
							name = [ name ];
						} else {
							name = name.split(" ");
						}
					}
				}

				for ( i = 0, l = name.length; i < l; i++ ) {
					delete thisCache[ name[i] ];
				}

				// If there is no data left in the cache, we want to continue
				// and let the cache object itself get destroyed
				if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
					return;
				}
			}
		}

		// See jQuery.data for more information
		if ( !pvt ) {
			delete cache[ id ].data;

			// Don't destroy the parent cache unless the internal data object
			// had been the only thing left in it
			if ( !isEmptyDataObject( cache[ id ] ) ) {
				return;
			}
		}

		// Destroy the cache
		if ( isNode ) {
			jQuery.cleanData( [ elem ], true );

		// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
		} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
			delete cache[ id ];

		// When all else fails, null
		} else {
			cache[ id ] = null;
		}
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return jQuery.data( elem, name, data, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var parts, part, attr, name, l,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attr = elem.attributes;
					for ( l = attr.length; i < l; i++ ) {
						name = attr[i].name;

						if ( !name.indexOf( "data-" ) ) {
							name = jQuery.camelCase( name.substring(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		parts = key.split( ".", 2 );
		parts[1] = parts[1] ? "." + parts[1] : "";
		part = parts[1] + "!";

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				data = this.triggerHandler( "getData" + part, [ parts[0] ] );

				// Try to fetch any internally stored data first
				if ( data === undefined && elem ) {
					data = jQuery.data( elem, key );
					data = dataAttr( elem, key, data );
				}

				return data === undefined && parts[1] ?
					this.data( parts[0] ) :
					data;
			}

			parts[1] = value;
			this.each(function() {
				var self = jQuery( this );

				self.triggerHandler( "setData" + part, parts );
				jQuery.data( this, key, value );
				self.triggerHandler( "changeData" + part, parts );
			});
		}, null, value, arguments.length > 1, null, false );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
				data === "false" ? false :
				data === "null" ? null :
				// Only convert to a number if it doesn't change the string
				+data + "" === data ? +data :
				rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery.removeData( elem, type + "queue", true );
				jQuery.removeData( elem, key, true );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook, fixSpecified,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rtype = /^(?:button|input)$/i,
	rfocusable = /^(?:button|input|object|select|textarea)$/i,
	rclickable = /^a(?:rea|)$/i,
	rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classNames, i, l, elem,
			setClass, c, cl;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call(this, j, this.className) );
			});
		}

		if ( value && typeof value === "string" ) {
			classNames = value.split( core_rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];

				if ( elem.nodeType === 1 ) {
					if ( !elem.className && classNames.length === 1 ) {
						elem.className = value;

					} else {
						setClass = " " + elem.className + " ";

						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
							if ( setClass.indexOf( " " + classNames[ c ] + " " ) < 0 ) {
								setClass += classNames[ c ] + " ";
							}
						}
						elem.className = jQuery.trim( setClass );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var removes, className, elem, c, cl, i, l;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call(this, j, this.className) );
			});
		}
		if ( (value && typeof value === "string") || value === undefined ) {
			removes = ( value || "" ).split( core_rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];
				if ( elem.nodeType === 1 && elem.className ) {

					className = (" " + elem.className + " ").replace( rclass, " " );

					// loop over each item in the removal list
					for ( c = 0, cl = removes.length; c < cl; c++ ) {
						// Remove until there is nothing to remove,
						while ( className.indexOf(" " + removes[ c ] + " ") >= 0 ) {
							className = className.replace( " " + removes[ c ] + " " , " " );
						}
					}
					elem.className = value ? jQuery.trim( className ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.split( core_rspace );

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			} else if ( type === "undefined" || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// toggle whole className
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val,
				self = jQuery(this);

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, i, max, option,
					index = elem.selectedIndex,
					values = [],
					options = elem.options,
					one = elem.type === "select-one";

				// Nothing was selected
				if ( index < 0 ) {
					return null;
				}

				// Loop through all the selected options
				i = one ? index : 0;
				max = one ? index + 1 : options.length;
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Don't return options that are disabled or in a disabled optgroup
					if ( option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
							(!option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" )) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				// Fixes Bug #2551 -- select.val() broken in IE after form.reset()
				if ( one && !values.length && options.length ) {
					return jQuery( options[ index ] ).val();
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	// Unused in 1.8, left in so attrFn-stabbers won't die; remove in 1.9
	attrFn: {},

	attr: function( elem, name, value, pass ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( pass && jQuery.isFunction( jQuery.fn[ name ] ) ) {
			return jQuery( elem )[ name ]( value );
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;

			} else if ( hooks && "set" in hooks && notxml && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && notxml && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			ret = elem.getAttribute( name );

			// Non-existent attributes return null, we normalize to undefined
			return ret === null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var propName, attrNames, name, isBool,
			i = 0;

		if ( value && elem.nodeType === 1 ) {

			attrNames = value.split( core_rspace );

			for ( ; i < attrNames.length; i++ ) {
				name = attrNames[ i ];

				if ( name ) {
					propName = jQuery.propFix[ name ] || name;
					isBool = rboolean.test( name );

					// See #9699 for explanation of this approach (setting first, then removal)
					// Do not do this for boolean attributes (see #10870)
					if ( !isBool ) {
						jQuery.attr( elem, name, "" );
					}
					elem.removeAttribute( getSetAttribute ? name : propName );

					// Set corresponding property to false for boolean attributes
					if ( isBool && propName in elem ) {
						elem[ propName ] = false;
					}
				}
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				// We can't allow the type property to be changed (since it causes problems in IE)
				if ( rtype.test( elem.nodeName ) && elem.parentNode ) {
					jQuery.error( "type property can't be changed" );
				} else if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to it's default in case type is set after value
					// This is for element creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		},
		// Use the value property for back compat
		// Use the nodeHook for button elements in IE6/7 (#1954)
		value: {
			get: function( elem, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.get( elem, name );
				}
				return name in elem ?
					elem.value :
					null;
			},
			set: function( elem, value, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.set( elem, value, name );
				}
				// Does not return so that setAttribute is also used
				elem.value = value;
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		// Align boolean attributes with corresponding properties
		// Fall back to attribute presence where some booleans are not supported
		var attrNode,
			property = jQuery.prop( elem, name );
		return property === true || typeof property !== "boolean" && ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		var propName;
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			// value is true since we know at this point it's type boolean and not false
			// Set boolean attributes to the same name and set the DOM property
			propName = jQuery.propFix[ name ] || name;
			if ( propName in elem ) {
				// Only set the IDL specifically if it already exists on the element
				elem[ propName ] = true;
			}

			elem.setAttribute( name, name.toLowerCase() );
		}
		return name;
	}
};

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	fixSpecified = {
		name: true,
		id: true,
		coords: true
	};

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret;
			ret = elem.getAttributeNode( name );
			return ret && ( fixSpecified[ name ] ? ret.value !== "" : ret.specified ) ?
				ret.value :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				ret = document.createAttribute( name );
				elem.setAttributeNode( ret );
			}
			return ( ret.value = value + "" );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			if ( value === "" ) {
				value = "false";
			}
			nodeHook.set( elem, value, name );
		}
	};
}


// Some attributes require a special call on IE
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret === null ? undefined : ret;
			}
		});
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Normalize to lowercase since IE uppercases css property names
			return elem.style.cssText.toLowerCase() || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});
var rformElems = /^(?:textarea|input|select)$/i,
	rtypenamespace = /^([^\.]*|)(?:\.(.+)|)$/,
	rhoverHack = /(?:^|\s)hover(\.\S+|)\b/,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	hoverHack = function( events ) {
		return jQuery.event.special.hover ? events : events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
	};

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	add: function( elem, types, handler, data, selector ) {

		var elemData, eventHandle, events,
			t, tns, type, namespaces, handleObj,
			handleObjIn, handlers, special;

		// Don't attach events to noData or text/comment nodes (allow plain objects tho)
		if ( elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data( elem )) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		events = elemData.events;
		if ( !events ) {
			elemData.events = events = {};
		}
		eventHandle = elemData.handle;
		if ( !eventHandle ) {
			elemData.handle = eventHandle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = jQuery.trim( hoverHack(types) ).split( " " );
		for ( t = 0; t < types.length; t++ ) {

			tns = rtypenamespace.exec( types[t] ) || [];
			type = tns[1];
			namespaces = ( tns[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: tns[1],
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			handlers = events[ type ];
			if ( !handlers ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	global: {},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var t, tns, type, origType, namespaces, origCount,
			j, events, special, eventType, handleObj,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = jQuery.trim( hoverHack( types || "" ) ).split(" ");
		for ( t = 0; t < types.length; t++ ) {
			tns = rtypenamespace.exec( types[t] ) || [];
			type = origType = tns[1];
			namespaces = tns[2];

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector? special.delegateType : special.bindType ) || type;
			eventType = events[ type ] || [];
			origCount = eventType.length;
			namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

			// Remove matching events
			for ( j = 0; j < eventType.length; j++ ) {
				handleObj = eventType[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					 ( !handler || handler.guid === handleObj.guid ) &&
					 ( !namespaces || namespaces.test( handleObj.namespace ) ) &&
					 ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					eventType.splice( j--, 1 );

					if ( handleObj.selector ) {
						eventType.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( eventType.length === 0 && origCount !== eventType.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery.removeData( elem, "events", true );
		}
	},

	// Events that are safe to short-circuit if no handlers are attached.
	// Native DOM events should not be added, they may have inline handlers.
	customEvent: {
		"getData": true,
		"setData": true,
		"changeData": true
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		// Don't do events on text and comment nodes
		if ( elem && (elem.nodeType === 3 || elem.nodeType === 8) ) {
			return;
		}

		// Event object or event type
		var cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType,
			type = event.type || event,
			namespaces = [];

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "!" ) >= 0 ) {
			// Exclusive events trigger only for the exact event (no namespaces)
			type = type.slice(0, -1);
			exclusive = true;
		}

		if ( type.indexOf( "." ) >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}

		if ( (!elem || jQuery.event.customEvent[ type ]) && !jQuery.event.global[ type ] ) {
			// No jQuery handlers for this event type, and it can't have inline handlers
			return;
		}

		// Caller can pass in an Event, Object, or just an event type string
		event = typeof event === "object" ?
			// jQuery.Event object
			event[ jQuery.expando ] ? event :
			// Object literal
			new jQuery.Event( type, event ) :
			// Just the event type (string)
			new jQuery.Event( type );

		event.type = type;
		event.isTrigger = true;
		event.exclusive = exclusive;
		event.namespace = namespaces.join( "." );
		event.namespace_re = event.namespace? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
		ontype = type.indexOf( ":" ) < 0 ? "on" + type : "";

		// Handle a global trigger
		if ( !elem ) {

			// TODO: Stop taunting the data cache; remove global events and always attach to document
			cache = jQuery.cache;
			for ( i in cache ) {
				if ( cache[ i ].events && cache[ i ].events[ type ] ) {
					jQuery.event.trigger( event, data, cache[ i ].handle.elem, true );
				}
			}
			return;
		}

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data != null ? jQuery.makeArray( data ) : [];
		data.unshift( event );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		eventPath = [[ elem, special.bindType || type ]];
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			cur = rfocusMorph.test( bubbleType + type ) ? elem : elem.parentNode;
			for ( old = elem; cur; cur = cur.parentNode ) {
				eventPath.push([ cur, bubbleType ]);
				old = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( old === (elem.ownerDocument || document) ) {
				eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
			}
		}

		// Fire handlers on the event path
		for ( i = 0; i < eventPath.length && !event.isPropagationStopped(); i++ ) {

			cur = eventPath[i][0];
			event.type = eventPath[i][1];

			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}
			// Note that this is a bare JS function and not a jQuery handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				// IE<9 dies on focus/blur to hidden element (#1486)
				if ( ontype && elem[ type ] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					old = elem[ ontype ];

					if ( old ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( old ) {
						elem[ ontype ] = old;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event || window.event );

		var i, j, cur, ret, selMatch, matched, matches, handleObj, sel, related,
			handlers = ( (jQuery._data( this, "events" ) || {} )[ event.type ] || []),
			delegateCount = handlers.delegateCount,
			args = core_slice.call( arguments ),
			run_all = !event.exclusive && !event.namespace,
			special = jQuery.event.special[ event.type ] || {},
			handlerQueue = [];

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers that should run if there are delegated events
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && !(event.button && event.type === "click") ) {

			for ( cur = event.target; cur != this; cur = cur.parentNode || this ) {

				// Don't process clicks (ONLY) on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					selMatch = {};
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];
						sel = handleObj.selector;

						if ( selMatch[ sel ] === undefined ) {
							selMatch[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( selMatch[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, matches: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( handlers.length > delegateCount ) {
			handlerQueue.push({ elem: this, matches: handlers.slice( delegateCount ) });
		}

		// Run delegates first; they may want to stop propagation beneath us
		for ( i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++ ) {
			matched = handlerQueue[ i ];
			event.currentTarget = matched.elem;

			for ( j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++ ) {
				handleObj = matched.matches[ j ];

				// Triggered event must either 1) be non-exclusive and have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test( handleObj.namespace ) ) {

					event.data = handleObj.data;
					event.handleObj = handleObj;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						event.result = ret;
						if ( ret === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	// *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
	props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop,
			originalEvent = event,
			fixHook = jQuery.event.fixHooks[ event.type ] || {},
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = jQuery.Event( originalEvent );

		for ( i = copy.length; i; ) {
			prop = copy[ --i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Target should not be a text node (#504, Safari)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328; IE6/7/8)
		event.metaKey = !!event.metaKey;

		return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},

		focus: {
			delegateType: "focusin"
		},
		blur: {
			delegateType: "focusout"
		},

		beforeunload: {
			setup: function( data, namespaces, eventHandle ) {
				// We only want to do this special case on windows
				if ( jQuery.isWindow( this ) ) {
					this.onbeforeunload = eventHandle;
				}
			},

			teardown: function( namespaces, eventHandle ) {
				if ( this.onbeforeunload === eventHandle ) {
					this.onbeforeunload = null;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

// Some plugins are using, but it's undocumented/deprecated and will be removed.
// The 1.7 special event interface should provide all the hooks needed now.
jQuery.event.handle = jQuery.event.dispatch;

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8 –
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === "undefined" ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

function returnFalse() {
	return false;
}
function returnTrue() {
	return true;
}

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	preventDefault: function() {
		this.isDefaultPrevented = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}

		// if preventDefault exists run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// otherwise set the returnValue property of the original event to false (IE)
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		this.isPropagationStopped = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}
		// if stopPropagation exists run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}
		// otherwise set the cancelBubble property of the original event to true (IE)
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	},
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj,
				selector = handleObj.selector;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "_submit_attached" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "_submit_attached", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "_change_attached" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "_change_attached", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) { // && selector != null
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	live: function( types, data, fn ) {
		jQuery( this.context ).on( types, this.selector, data, fn );
		return this;
	},
	die: function( types, fn ) {
		jQuery( this.context ).off( types, this.selector || "**", fn );
		return this;
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		if ( this[0] ) {
			return jQuery.event.trigger( type, data, this[0], true );
		}
	},

	toggle: function( fn ) {
		// Save reference to arguments for access in closure
		var args = arguments,
			guid = fn.guid || jQuery.guid++,
			i = 0,
			toggler = function( event ) {
				// Figure out which function to execute
				var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
				jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );

				// Make sure that clicks stop
				event.preventDefault();

				// and execute the function
				return args[ lastToggle ].apply( this, arguments ) || false;
			};

		// link all the functions, so any of them can unbind this click handler
		toggler.guid = guid;
		while ( i < args.length ) {
			args[ i++ ].guid = guid;
		}

		return this.click( toggler );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
});

jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		if ( fn == null ) {
			fn = data;
			data = null;
		}

		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};

	if ( rkeyEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
	}

	if ( rmouseEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
	}
});
/*!
 * Sizzle CSS Selector Engine
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://sizzlejs.com/
 */
(function( window, undefined ) {

var cachedruns,
	assertGetIdNotName,
	Expr,
	getText,
	isXML,
	contains,
	compile,
	sortOrder,
	hasDuplicate,
	outermostContext,

	baseHasDuplicate = true,
	strundefined = "undefined",

	expando = ( "sizcache" + Math.random() ).replace( ".", "" ),

	Token = String,
	document = window.document,
	docElem = document.documentElement,
	dirruns = 0,
	done = 0,
	pop = [].pop,
	push = [].push,
	slice = [].slice,
	// Use a stripped-down indexOf if a native one is unavailable
	indexOf = [].indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	// Augment a function for special use by Sizzle
	markFunction = function( fn, value ) {
		fn[ expando ] = value == null || value;
		return fn;
	},

	createCache = function() {
		var cache = {},
			keys = [];

		return markFunction(function( key, value ) {
			// Only keep the most recent entries
			if ( keys.push( key ) > Expr.cacheLength ) {
				delete cache[ keys.shift() ];
			}

			return (cache[ key ] = value);
		}, cache );
	},

	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),

	// Regex

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier (http://www.w3.org/TR/css3-selectors/#attribute-selectors)
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	operators = "([*^$|!~]?=)",
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments not in parens/brackets,
	//   then attribute selectors and non-pseudos (denoted by :),
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:" + attributes + ")|[^:]|\\\\.)*|.*))\\)|)",

	// For matchExpr.POS and matchExpr.needsContext
	pos = ":(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
		"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
	rpseudo = new RegExp( pseudos ),

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,

	rnot = /^:not/,
	rsibling = /[\x20\t\r\n\f]*[+~]/,
	rendsWithNot = /:not\($/,

	rheader = /h\d/i,
	rinputs = /input|select|textarea|button/i,

	rbackslash = /\\(?!\\)/g,

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"POS": new RegExp( pos, "i" ),
		"CHILD": new RegExp( "^:(only|nth|first|last)-child(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		// For use in libraries implementing .is()
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|" + pos, "i" )
	},

	// Support

	// Used for testing something on an element
	assert = function( fn ) {
		var div = document.createElement("div");

		try {
			return fn( div );
		} catch (e) {
			return false;
		} finally {
			// release memory in IE
			div = null;
		}
	},

	// Check if getElementsByTagName("*") returns only elements
	assertTagNameNoComments = assert(function( div ) {
		div.appendChild( document.createComment("") );
		return !div.getElementsByTagName("*").length;
	}),

	// Check if getAttribute returns normalized href attributes
	assertHrefNotNormalized = assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
			div.firstChild.getAttribute("href") === "#";
	}),

	// Check if attributes should be retrieved by attribute nodes
	assertAttributes = assert(function( div ) {
		div.innerHTML = "<select></select>";
		var type = typeof div.lastChild.getAttribute("multiple");
		// IE8 returns a string for some attributes even when not present
		return type !== "boolean" && type !== "string";
	}),

	// Check if getElementsByClassName can be trusted
	assertUsableClassName = assert(function( div ) {
		// Opera can't find a second classname (in 9.6)
		div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
		if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
			return false;
		}

		// Safari 3.2 caches class attributes and doesn't catch changes
		div.lastChild.className = "e";
		return div.getElementsByClassName("e").length === 2;
	}),

	// Check if getElementById returns elements by name
	// Check if getElementsByName privileges form controls or returns elements by ID
	assertUsableName = assert(function( div ) {
		// Inject content
		div.id = expando + 0;
		div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
		docElem.insertBefore( div, docElem.firstChild );

		// Test
		var pass = document.getElementsByName &&
			// buggy browsers will return fewer than the correct 2
			document.getElementsByName( expando ).length === 2 +
			// buggy browsers will return more than the correct 0
			document.getElementsByName( expando + 0 ).length;
		assertGetIdNotName = !document.getElementById( expando );

		// Cleanup
		docElem.removeChild( div );

		return pass;
	});

// If slice is not available, provide a backup
try {
	slice.call( docElem.childNodes, 0 )[0].nodeType;
} catch ( e ) {
	slice = function( i ) {
		var elem,
			results = [];
		for ( ; (elem = this[i]); i++ ) {
			results.push( elem );
		}
		return results;
	};
}

function Sizzle( selector, context, results, seed ) {
	results = results || [];
	context = context || document;
	var match, elem, xml, m,
		nodeType = context.nodeType;

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( nodeType !== 1 && nodeType !== 9 ) {
		return [];
	}

	xml = isXML( context );

	if ( !xml && !seed ) {
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && assertUsableClassName && context.getElementsByClassName ) {
				push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
				return results;
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed, xml );
}

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	return Sizzle( expr, null, null, [ elem ] ).length > 0;
};

// Returns a function to use in pseudos for input types
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

// Returns a function to use in pseudos for buttons
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

// Returns a function to use in pseudos for positionals
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( nodeType ) {
		if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (see #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	} else {

		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	}
	return ret;
};

isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

// Element contains another
contains = Sizzle.contains = docElem.contains ?
	function( a, b ) {
		var adown = a.nodeType === 9 ? a.documentElement : a,
			bup = b && b.parentNode;
		return a === bup || !!( bup && bup.nodeType === 1 && adown.contains && adown.contains(bup) );
	} :
	docElem.compareDocumentPosition ?
	function( a, b ) {
		return b && !!( a.compareDocumentPosition( b ) & 16 );
	} :
	function( a, b ) {
		while ( (b = b.parentNode) ) {
			if ( b === a ) {
				return true;
			}
		}
		return false;
	};

Sizzle.attr = function( elem, name ) {
	var val,
		xml = isXML( elem );

	if ( !xml ) {
		name = name.toLowerCase();
	}
	if ( (val = Expr.attrHandle[ name ]) ) {
		return val( elem );
	}
	if ( xml || assertAttributes ) {
		return elem.getAttribute( name );
	}
	val = elem.getAttributeNode( name );
	return val ?
		typeof elem[ name ] === "boolean" ?
			elem[ name ] ? name : null :
			val.specified ? val.value : null :
		null;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	// IE6/7 return a modified href
	attrHandle: assertHrefNotNormalized ?
		{} :
		{
			"href": function( elem ) {
				return elem.getAttribute( "href", 2 );
			},
			"type": function( elem ) {
				return elem.getAttribute("type");
			}
		},

	find: {
		"ID": assertGetIdNotName ?
			function( id, context, xml ) {
				if ( typeof context.getElementById !== strundefined && !xml ) {
					var m = context.getElementById( id );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					return m && m.parentNode ? [m] : [];
				}
			} :
			function( id, context, xml ) {
				if ( typeof context.getElementById !== strundefined && !xml ) {
					var m = context.getElementById( id );

					return m ?
						m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
							[m] :
							undefined :
						[];
				}
			},

		"TAG": assertTagNameNoComments ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== strundefined ) {
					return context.getElementsByTagName( tag );
				}
			} :
			function( tag, context ) {
				var results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					var elem,
						tmp = [],
						i = 0;

					for ( ; (elem = results[i]); i++ ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			},

		"NAME": assertUsableName && function( tag, context ) {
			if ( typeof context.getElementsByName !== strundefined ) {
				return context.getElementsByName( name );
			}
		},

		"CLASS": assertUsableClassName && function( className, context, xml ) {
			if ( typeof context.getElementsByClassName !== strundefined && !xml ) {
				return context.getElementsByClassName( className );
			}
		}
	},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( rbackslash, "" );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( rbackslash, "" );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				3 xn-component of xn+y argument ([+-]?\d*n|)
				4 sign of xn-component
				5 x of xn-component
				6 sign of y-component
				7 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1] === "nth" ) {
				// nth-child requires argument
				if ( !match[2] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[3] = +( match[3] ? match[4] + (match[5] || 1) : 2 * ( match[2] === "even" || match[2] === "odd" ) );
				match[4] = +( ( match[6] + match[7] ) || match[2] === "odd" );

			// other types prohibit arguments
			} else if ( match[2] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var unquoted, excess;
			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			if ( match[3] ) {
				match[2] = match[3];
			} else if ( (unquoted = match[4]) ) {
				// Only check arguments that contain a pseudo
				if ( rpseudo.test(unquoted) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					unquoted = unquoted.slice( 0, excess );
					match[0] = match[0].slice( 0, excess );
				}
				match[2] = unquoted;
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {
		"ID": assertGetIdNotName ?
			function( id ) {
				id = id.replace( rbackslash, "" );
				return function( elem ) {
					return elem.getAttribute("id") === id;
				};
			} :
			function( id ) {
				id = id.replace( rbackslash, "" );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
					return node && node.value === id;
				};
			},

		"TAG": function( nodeName ) {
			if ( nodeName === "*" ) {
				return function() { return true; };
			}
			nodeName = nodeName.replace( rbackslash, "" ).toLowerCase();

			return function( elem ) {
				return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
			};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ expando ][ className ];
			if ( !pattern ) {
				pattern = classCache( className, new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)") );
			}
			return function( elem ) {
				return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
			};
		},

		"ATTR": function( name, operator, check ) {
			return function( elem, context ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.substr( result.length - check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.substr( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, argument, first, last ) {

			if ( type === "nth" ) {
				return function( elem ) {
					var node, diff,
						parent = elem.parentNode;

					if ( first === 1 && last === 0 ) {
						return true;
					}

					if ( parent ) {
						diff = 0;
						for ( node = parent.firstChild; node; node = node.nextSibling ) {
							if ( node.nodeType === 1 ) {
								diff++;
								if ( elem === node ) {
									break;
								}
							}
						}
					}

					// Incorporate the offset (or cast to NaN), then check against cycle size
					diff -= last;
					return diff === first || ( diff % first === 0 && diff / first >= 0 );
				};
			}

			return function( elem ) {
				var node = elem;

				switch ( type ) {
					case "only":
					case "first":
						while ( (node = node.previousSibling) ) {
							if ( node.nodeType === 1 ) {
								return false;
							}
						}

						if ( type === "first" ) {
							return true;
						}

						node = elem;

						/* falls through */
					case "last":
						while ( (node = node.nextSibling) ) {
							if ( node.nodeType === 1 ) {
								return false;
							}
						}

						return true;
				}
			};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			var nodeType;
			elem = elem.firstChild;
			while ( elem ) {
				if ( elem.nodeName > "@" || (nodeType = elem.nodeType) === 3 || nodeType === 4 ) {
					return false;
				}
				elem = elem.nextSibling;
			}
			return true;
		},

		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"text": function( elem ) {
			var type, attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				(type = elem.type) === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === type );
		},

		// Input types
		"radio": createInputPseudo("radio"),
		"checkbox": createInputPseudo("checkbox"),
		"file": createInputPseudo("file"),
		"password": createInputPseudo("password"),
		"image": createInputPseudo("image"),

		"submit": createButtonPseudo("submit"),
		"reset": createButtonPseudo("reset"),

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"focus": function( elem ) {
			var doc = elem.ownerDocument;
			return elem === doc.activeElement && (!doc.hasFocus || doc.hasFocus()) && !!(elem.type || elem.href);
		},

		"active": function( elem ) {
			return elem === elem.ownerDocument.activeElement;
		},

		// Positional types
		"first": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length, argument ) {
			for ( var i = 0; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length, argument ) {
			for ( var i = 1; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			for ( var i = argument < 0 ? argument + length : argument; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			for ( var i = argument < 0 ? argument + length : argument; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

function siblingCheck( a, b, ret ) {
	if ( a === b ) {
		return ret;
	}

	var cur = a.nextSibling;

	while ( cur ) {
		if ( cur === b ) {
			return -1;
		}

		cur = cur.nextSibling;
	}

	return 1;
}

sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		return ( !a.compareDocumentPosition || !b.compareDocumentPosition ?
			a.compareDocumentPosition :
			a.compareDocumentPosition(b) & 4
		) ? -1 : 1;
	} :
	function( a, b ) {
		// The nodes are identical, we can exit early
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Fallback to using sourceIndex (in IE) if it's available on both nodes
		} else if ( a.sourceIndex && b.sourceIndex ) {
			return a.sourceIndex - b.sourceIndex;
		}

		var al, bl,
			ap = [],
			bp = [],
			aup = a.parentNode,
			bup = b.parentNode,
			cur = aup;

		// If the nodes are siblings (or identical) we can do a quick check
		if ( aup === bup ) {
			return siblingCheck( a, b );

		// If no parents were found then the nodes are disconnected
		} else if ( !aup ) {
			return -1;

		} else if ( !bup ) {
			return 1;
		}

		// Otherwise they're somewhere else in the tree so we need
		// to build up a full list of the parentNodes for comparison
		while ( cur ) {
			ap.unshift( cur );
			cur = cur.parentNode;
		}

		cur = bup;

		while ( cur ) {
			bp.unshift( cur );
			cur = cur.parentNode;
		}

		al = ap.length;
		bl = bp.length;

		// Start walking down the tree looking for a discrepancy
		for ( var i = 0; i < al && i < bl; i++ ) {
			if ( ap[i] !== bp[i] ) {
				return siblingCheck( ap[i], bp[i] );
			}
		}

		// We ended someplace up the tree so do a sibling check
		return i === al ?
			siblingCheck( a, bp[i], -1 ) :
			siblingCheck( ap[i], b, 1 );
	};

// Always assume the presence of duplicates if sort doesn't
// pass them to our comparison function (as in Google Chrome).
[0, 0].sort( sortOrder );
baseHasDuplicate = !hasDuplicate;

// Document sorting and removing duplicates
Sizzle.uniqueSort = function( results ) {
	var elem,
		i = 1;

	hasDuplicate = baseHasDuplicate;
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		for ( ; (elem = results[i]); i++ ) {
			if ( elem === results[ i - 1 ] ) {
				results.splice( i--, 1 );
			}
		}
	}

	return results;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type, soFar, groups, preFilters,
		cached = tokenCache[ expando ][ selector ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				soFar = soFar.slice( match[0].length );
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			tokens.push( matched = new Token( match.shift() ) );
			soFar = soFar.slice( matched.length );

			// Cast descendant combinators to space
			matched.type = match[0].replace( rtrim, " " );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				// The last two arguments here are (context, xml) for backCompat
				(match = preFilters[ type ]( match, document, true ))) ) {

				tokens.push( matched = new Token( match.shift() ) );
				soFar = soFar.slice( matched.length );
				matched.type = type;
				matched.matches = match;
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && combinator.dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( checkNonElements || elem.nodeType === 1  ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( !xml ) {
				var cache,
					dirkey = dirruns + " " + doneName + " ",
					cachedkey = dirkey + cachedruns;
				while ( (elem = elem[ dir ]) ) {
					if ( checkNonElements || elem.nodeType === 1 ) {
						if ( (cache = elem[ expando ]) === cachedkey ) {
							return elem.sizset;
						} else if ( typeof cache === "string" && cache.indexOf(dirkey) === 0 ) {
							if ( elem.sizset ) {
								return elem;
							}
						} else {
							elem[ expando ] = cachedkey;
							if ( matcher( elem, context, xml ) ) {
								elem.sizset = true;
								return elem;
							}
							elem.sizset = false;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( checkNonElements || elem.nodeType === 1 ) {
						if ( matcher( elem, context, xml ) ) {
							return elem;
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		// Positional selectors apply to seed elements, so it is invalid to follow them with relative ones
		if ( seed && postFinder ) {
			return;
		}

		var i, elem, postFilterIn,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [], seed ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			postFilterIn = condense( matcherOut, postMap );
			postFilter( postFilterIn, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = postFilterIn.length;
			while ( i-- ) {
				if ( (elem = postFilterIn[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		// Keep seed and results synchronized
		if ( seed ) {
			// Ignore postFinder because it can't coexist with seed
			i = preFilter && matcherOut.length;
			while ( i-- ) {
				if ( (elem = matcherOut[i]) ) {
					seed[ preMap[i] ] = !(results[ preMap[i] ] = elem);
				}
			}
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			// The concatenated values are (context, xml) for backCompat
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && tokens.slice( 0, i - 1 ).join("").replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && tokens.join("")
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Nested matchers should use non-integer dirruns
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.E);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = superMatcher.el;
			}

			// Add elements passing elementMatchers directly to results
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					for ( j = 0; (matcher = elementMatchers[j]); j++ ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++superMatcher.el;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				for ( j = 0; (matcher = setMatchers[j]); j++ ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	superMatcher.el = 0;
	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ expando ][ selector ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results, seed ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results, seed );
	}
	return results;
}

function select( selector, context, results, seed, xml ) {
	var i, tokens, token, type, find,
		match = tokenize( selector ),
		j = match.length;

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && !xml &&
					Expr.relative[ tokens[1].type ] ) {

				context = Expr.find["ID"]( token.matches[0].replace( rbackslash, "" ), context, xml )[0];
				if ( !context ) {
					return results;
				}

				selector = selector.slice( tokens.shift().length );
			}

			// Fetch a seed set for right-to-left matching
			for ( i = matchExpr["POS"].test( selector ) ? -1 : tokens.length - 1; i >= 0; i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( rbackslash, "" ),
						rsibling.test( tokens[0].type ) && context.parentNode || context,
						xml
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && tokens.join("");
						if ( !selector ) {
							push.apply( results, slice.call( seed, 0 ) );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		xml,
		results,
		rsibling.test( selector )
	);
	return results;
}

if ( document.querySelectorAll ) {
	(function() {
		var disconnectedMatch,
			oldSelect = select,
			rescape = /'|\\/g,
			rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

			// qSa(:focus) reports false when true (Chrome 21),
			// A support test would require too much code (would include document ready)
			rbuggyQSA = [":focus"],

			// matchesSelector(:focus) reports false when true (Chrome 21),
			// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
			// A support test would require too much code (would include document ready)
			// just skip matchesSelector for :active
			rbuggyMatches = [ ":active", ":focus" ],
			matches = docElem.matchesSelector ||
				docElem.mozMatchesSelector ||
				docElem.webkitMatchesSelector ||
				docElem.oMatchesSelector ||
				docElem.msMatchesSelector;

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explictly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// IE8 - Some boolean attributes are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here (do not put tests after this one)
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Opera 10-12/IE9 - ^= $= *= and empty values
			// Should not select anything
			div.innerHTML = "<p test=''></p>";
			if ( div.querySelectorAll("[test^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here (do not put tests after this one)
			div.innerHTML = "<input type='hidden'/>";
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push(":enabled", ":disabled");
			}
		});

		// rbuggyQSA always contains :focus, so no need for a length check
		rbuggyQSA = /* rbuggyQSA.length && */ new RegExp( rbuggyQSA.join("|") );

		select = function( selector, context, results, seed, xml ) {
			// Only use querySelectorAll when not filtering,
			// when this is not xml,
			// and when no QSA bugs apply
			if ( !seed && !xml && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
				var groups, i,
					old = true,
					nid = expando,
					newContext = context,
					newSelector = context.nodeType === 9 && selector;

				// qSA works strangely on Element-rooted queries
				// We can work around this by specifying an extra ID on the root
				// and working up from there (Thanks to Andrew Dupont for the technique)
				// IE 8 doesn't work on object elements
				if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
					groups = tokenize( selector );

					if ( (old = context.getAttribute("id")) ) {
						nid = old.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", nid );
					}
					nid = "[id='" + nid + "'] ";

					i = groups.length;
					while ( i-- ) {
						groups[i] = nid + groups[i].join("");
					}
					newContext = rsibling.test( selector ) && context.parentNode || context;
					newSelector = groups.join(",");
				}

				if ( newSelector ) {
					try {
						push.apply( results, slice.call( newContext.querySelectorAll(
							newSelector
						), 0 ) );
						return results;
					} catch(qsaError) {
					} finally {
						if ( !old ) {
							context.removeAttribute("id");
						}
					}
				}
			}

			return oldSelect( selector, context, results, seed, xml );
		};

		if ( matches ) {
			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				try {
					matches.call( div, "[test!='']:sizzle" );
					rbuggyMatches.push( "!=", pseudos );
				} catch ( e ) {}
			});

			// rbuggyMatches always contains :active and :focus, so no need for a length check
			rbuggyMatches = /* rbuggyMatches.length && */ new RegExp( rbuggyMatches.join("|") );

			Sizzle.matchesSelector = function( elem, expr ) {
				// Make sure that attribute selectors are quoted
				expr = expr.replace( rattributeQuotes, "='$1']" );

				// rbuggyMatches always contains :active, so no need for an existence check
				if ( !isXML( elem ) && !rbuggyMatches.test( expr ) && (!rbuggyQSA || !rbuggyQSA.test( expr )) ) {
					try {
						var ret = matches.call( elem, expr );

						// IE 9's matchesSelector returns false on disconnected nodes
						if ( ret || disconnectedMatch ||
								// As well, disconnected nodes are said to be in a document
								// fragment in IE 9
								elem.document && elem.document.nodeType !== 11 ) {
							return ret;
						}
					} catch(e) {}
				}

				return Sizzle( expr, null, null, [ elem ] ).length > 0;
			};
		}
	})();
}

// Deprecated
Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Back-compat
function setFilters() {}
Expr.filters = setFilters.prototype = Expr.pseudos;
Expr.setFilters = new setFilters();

// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
var runtil = /Until$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i, l, length, n, r, ret,
			self = this;

		if ( typeof selector !== "string" ) {
			return jQuery( selector ).filter(function() {
				for ( i = 0, l = self.length; i < l; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			});
		}

		ret = this.pushStack( "", "find", selector );

		for ( i = 0, l = this.length; i < l; i++ ) {
			length = ret.length;
			jQuery.find( selector, this[i], ret );

			if ( i > 0 ) {
				// Make sure that the results are unique
				for ( n = length; n < ret.length; n++ ) {
					for ( r = 0; r < length; r++ ) {
						if ( ret[r] === ret[n] ) {
							ret.splice(n--, 1);
							break;
						}
					}
				}
			}
		}

		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false), "not", selector);
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true), "filter", selector );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				rneedsContext.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			cur = this[i];

			while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;
				}
				cur = cur.parentNode;
			}
		}

		ret = ret.length > 1 ? jQuery.unique( ret ) : ret;

		return this.pushStack( ret, "closest", selectors );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
			all :
			jQuery.unique( all ) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

jQuery.fn.andSelf = jQuery.fn.addBack;

// A painfully simple check to see if an element is disconnected
// from a document (should be improved, where feasible).
function isDisconnected( node ) {
	return !node || !node.parentNode || node.parentNode.nodeType === 11;
}

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( this.length > 1 && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret, name, core_slice.call( arguments ).join(",") );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem, i ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem, i ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
	safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	rnocache = /<(?:script|object|embed|option|style)/i,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rcheckableType = /^(?:checkbox|radio)$/,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /\/(java|ecma)script/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		area: [ 1, "<map>", "</map>" ],
		_default: [ 0, "", "" ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
// unless wrapped in a div with non-breaking characters in front of it.
if ( !jQuery.support.htmlSerialize ) {
	wrapMap._default = [ 1, "X<div>", "</div>" ];
}

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		if ( !isDisconnected( this[0] ) ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this );
			});
		}

		if ( arguments.length ) {
			var set = jQuery.clean( arguments );
			return this.pushStack( jQuery.merge( set, this ), "before", this.selector );
		}
	},

	after: function() {
		if ( !isDisconnected( this[0] ) ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			});
		}

		if ( arguments.length ) {
			var set = jQuery.clean( arguments );
			return this.pushStack( jQuery.merge( this, set ), "after", this.selector );
		}
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( elem.getElementsByTagName("*") );
					jQuery.cleanData( [ elem ] );
				}

				if ( elem.parentNode ) {
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( elem.getElementsByTagName("*") );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( elem.getElementsByTagName( "*" ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		if ( !isDisconnected( this[0] ) ) {
			// Make sure that the elements are removed from the DOM before they are inserted
			// this can help fix replacing a parent with child elements
			if ( jQuery.isFunction( value ) ) {
				return this.each(function(i) {
					var self = jQuery(this), old = self.html();
					self.replaceWith( value.call( this, i, old ) );
				});
			}

			if ( typeof value !== "string" ) {
				value = jQuery( value ).detach();
			}

			return this.each(function() {
				var next = this.nextSibling,
					parent = this.parentNode;

				jQuery( this ).remove();

				if ( next ) {
					jQuery(next).before( value );
				} else {
					jQuery(parent).append( value );
				}
			});
		}

		return this.length ?
			this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value ) :
			this;
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {

		// Flatten any nested arrays
		args = [].concat.apply( [], args );

		var results, first, fragment, iNoClone,
			i = 0,
			value = args[0],
			scripts = [],
			l = this.length;

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( !jQuery.support.checkClone && l > 1 && typeof value === "string" && rchecked.test( value ) ) {
			return this.each(function() {
				jQuery(this).domManip( args, table, callback );
			});
		}

		if ( jQuery.isFunction(value) ) {
			return this.each(function(i) {
				var self = jQuery(this);
				args[0] = value.call( this, i, table ? self.html() : undefined );
				self.domManip( args, table, callback );
			});
		}

		if ( this[0] ) {
			results = jQuery.buildFragment( args, this, scripts );
			fragment = results.fragment;
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				// Fragments from the fragment cache must always be cloned and never used in place.
				for ( iNoClone = results.cacheable || l - 1; i < l; i++ ) {
					callback.call(
						table && jQuery.nodeName( this[i], "table" ) ?
							findOrAppend( this[i], "tbody" ) :
							this[i],
						i === iNoClone ?
							fragment :
							jQuery.clone( fragment, true, true )
					);
				}
			}

			// Fix #11809: Avoid leaking memory
			fragment = first = null;

			if ( scripts.length ) {
				jQuery.each( scripts, function( i, elem ) {
					if ( elem.src ) {
						if ( jQuery.ajax ) {
							jQuery.ajax({
								url: elem.src,
								type: "GET",
								dataType: "script",
								async: false,
								global: false,
								"throws": true
							});
						} else {
							jQuery.error("no ajax");
						}
					} else {
						jQuery.globalEval( ( elem.text || elem.textContent || elem.innerHTML || "" ).replace( rcleanScript, "" ) );
					}

					if ( elem.parentNode ) {
						elem.parentNode.removeChild( elem );
					}
				});
			}
		}

		return this;
	}
});

function findOrAppend( elem, tag ) {
	return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function cloneFixAttributes( src, dest ) {
	var nodeName;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	// clearAttributes removes the attributes, which we don't want,
	// but also removes the attachEvent events, which we *do* want
	if ( dest.clearAttributes ) {
		dest.clearAttributes();
	}

	// mergeAttributes, in contrast, only merges back on the
	// original attributes, not the events
	if ( dest.mergeAttributes ) {
		dest.mergeAttributes( src );
	}

	nodeName = dest.nodeName.toLowerCase();

	if ( nodeName === "object" ) {
		// IE6-10 improperly clones children of object elements using classid.
		// IE10 throws NoModificationAllowedError if parent is null, #12132.
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML)) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;

	// IE blanks contents when cloning scripts
	} else if ( nodeName === "script" && dest.text !== src.text ) {
		dest.text = src.text;
	}

	// Event data gets referenced instead of copied if the expando
	// gets copied too
	dest.removeAttribute( jQuery.expando );
}

jQuery.buildFragment = function( args, context, scripts ) {
	var fragment, cacheable, cachehit,
		first = args[ 0 ];

	// Set context from what may come in as undefined or a jQuery collection or a node
	// Updated to fix #12266 where accessing context[0] could throw an exception in IE9/10 &
	// also doubles as fix for #8950 where plain objects caused createDocumentFragment exception
	context = context || document;
	context = !context.nodeType && context[0] || context;
	context = context.ownerDocument || context;

	// Only cache "small" (1/2 KB) HTML strings that are associated with the main document
	// Cloning options loses the selected state, so don't cache them
	// IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
	// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
	// Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
	if ( args.length === 1 && typeof first === "string" && first.length < 512 && context === document &&
		first.charAt(0) === "<" && !rnocache.test( first ) &&
		(jQuery.support.checkClone || !rchecked.test( first )) &&
		(jQuery.support.html5Clone || !rnoshimcache.test( first )) ) {

		// Mark cacheable and look for a hit
		cacheable = true;
		fragment = jQuery.fragments[ first ];
		cachehit = fragment !== undefined;
	}

	if ( !fragment ) {
		fragment = context.createDocumentFragment();
		jQuery.clean( args, context, fragment, scripts );

		// Update the cache, but only store false
		// unless this is a second parsing of the same content
		if ( cacheable ) {
			jQuery.fragments[ first ] = cachehit && fragment;
		}
	}

	return { fragment: fragment, cacheable: cacheable };
};

jQuery.fragments = {};

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			l = insert.length,
			parent = this.length === 1 && this[0].parentNode;

		if ( (parent == null || parent && parent.nodeType === 11 && parent.childNodes.length === 1) && l === 1 ) {
			insert[ original ]( this[0] );
			return this;
		} else {
			for ( ; i < l; i++ ) {
				elems = ( i > 0 ? this.clone(true) : this ).get();
				jQuery( insert[i] )[ original ]( elems );
				ret = ret.concat( elems );
			}

			return this.pushStack( ret, name, insert.selector );
		}
	};
});

function getAll( elem ) {
	if ( typeof elem.getElementsByTagName !== "undefined" ) {
		return elem.getElementsByTagName( "*" );

	} else if ( typeof elem.querySelectorAll !== "undefined" ) {
		return elem.querySelectorAll( "*" );

	} else {
		return [];
	}
}

// Used in clean, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var srcElements,
			destElements,
			i,
			clone;

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {
			// IE copies events bound via attachEvent when using cloneNode.
			// Calling detachEvent on the clone will also remove the events
			// from the original. In order to get around this, we use some
			// proprietary methods to clear the events. Thanks to MooTools
			// guys for this hotness.

			cloneFixAttributes( elem, clone );

			// Using Sizzle here is crazy slow, so we use getElementsByTagName instead
			srcElements = getAll( elem );
			destElements = getAll( clone );

			// Weird iteration because IE will replace the length property
			// with an element if you are cloning the body and one of the
			// elements on the page has a name or id of "length"
			for ( i = 0; srcElements[i]; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					cloneFixAttributes( srcElements[i], destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			cloneCopyEvent( elem, clone );

			if ( deepDataAndEvents ) {
				srcElements = getAll( elem );
				destElements = getAll( clone );

				for ( i = 0; srcElements[i]; ++i ) {
					cloneCopyEvent( srcElements[i], destElements[i] );
				}
			}
		}

		srcElements = destElements = null;

		// Return the cloned set
		return clone;
	},

	clean: function( elems, context, fragment, scripts ) {
		var i, j, elem, tag, wrap, depth, div, hasBody, tbody, len, handleScript, jsTags,
			safe = context === document && safeFragment,
			ret = [];

		// Ensure that context is a document
		if ( !context || typeof context.createDocumentFragment === "undefined" ) {
			context = document;
		}

		// Use the already-created safe fragment if context permits
		for ( i = 0; (elem = elems[i]) != null; i++ ) {
			if ( typeof elem === "number" ) {
				elem += "";
			}

			if ( !elem ) {
				continue;
			}

			// Convert html string into DOM nodes
			if ( typeof elem === "string" ) {
				if ( !rhtml.test( elem ) ) {
					elem = context.createTextNode( elem );
				} else {
					// Ensure a safe container in which to render the html
					safe = safe || createSafeFragment( context );
					div = context.createElement("div");
					safe.appendChild( div );

					// Fix "XHTML"-style tags in all browsers
					elem = elem.replace(rxhtmlTag, "<$1></$2>");

					// Go to html and back, then peel off extra wrappers
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					depth = wrap[0];
					div.innerHTML = wrap[1] + elem + wrap[2];

					// Move to the right depth
					while ( depth-- ) {
						div = div.lastChild;
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						hasBody = rtbody.test(elem);
							tbody = tag === "table" && !hasBody ?
								div.firstChild && div.firstChild.childNodes :

								// String was a bare <thead> or <tfoot>
								wrap[1] === "<table>" && !hasBody ?
									div.childNodes :
									[];

						for ( j = tbody.length - 1; j >= 0 ; --j ) {
							if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
								tbody[ j ].parentNode.removeChild( tbody[ j ] );
							}
						}
					}

					// IE completely kills leading whitespace when innerHTML is used
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
					}

					elem = div.childNodes;

					// Take out of fragment container (we need a fresh div each time)
					div.parentNode.removeChild( div );
				}
			}

			if ( elem.nodeType ) {
				ret.push( elem );
			} else {
				jQuery.merge( ret, elem );
			}
		}

		// Fix #11356: Clear elements from safeFragment
		if ( div ) {
			elem = div = safe = null;
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			for ( i = 0; (elem = ret[i]) != null; i++ ) {
				if ( jQuery.nodeName( elem, "input" ) ) {
					fixDefaultChecked( elem );
				} else if ( typeof elem.getElementsByTagName !== "undefined" ) {
					jQuery.grep( elem.getElementsByTagName("input"), fixDefaultChecked );
				}
			}
		}

		// Append elements to a provided document fragment
		if ( fragment ) {
			// Special handling of each script element
			handleScript = function( elem ) {
				// Check if we consider it executable
				if ( !elem.type || rscriptType.test( elem.type ) ) {
					// Detach the script and store it in the scripts array (if provided) or the fragment
					// Return truthy to indicate that it has been handled
					return scripts ?
						scripts.push( elem.parentNode ? elem.parentNode.removeChild( elem ) : elem ) :
						fragment.appendChild( elem );
				}
			};

			for ( i = 0; (elem = ret[i]) != null; i++ ) {
				// Check if we're done after handling an executable script
				if ( !( jQuery.nodeName( elem, "script" ) && handleScript( elem ) ) ) {
					// Append to fragment and handle embedded scripts
					fragment.appendChild( elem );
					if ( typeof elem.getElementsByTagName !== "undefined" ) {
						// handleScript alters the DOM, so use jQuery.merge to ensure snapshot iteration
						jsTags = jQuery.grep( jQuery.merge( [], elem.getElementsByTagName("script") ), handleScript );

						// Splice the scripts into ret after their former ancestor and advance our index beyond them
						ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
						i += jsTags.length;
					}
				}
			}
		}

		return ret;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var data, id, elem, type,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( elem.removeAttribute ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						jQuery.deletedIds.push( id );
					}
				}
			}
		}
	}
});
// Limit scope pollution from any deprecated API
(function() {

var matched, browser;

// Use of jQuery.browser is frowned upon.
// More details: http://api.jquery.com/jQuery.browser
// jQuery.uaMatch maintained for back-compat
jQuery.uaMatch = function( ua ) {
	ua = ua.toLowerCase();

	var match = /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
		/(webkit)[ \/]([\w.]+)/.exec( ua ) ||
		/(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
		/(msie) ([\w.]+)/.exec( ua ) ||
		ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
		[];

	return {
		browser: match[ 1 ] || "",
		version: match[ 2 ] || "0"
	};
};

matched = jQuery.uaMatch( navigator.userAgent );
browser = {};

if ( matched.browser ) {
	browser[ matched.browser ] = true;
	browser.version = matched.version;
}

// Chrome is Webkit, but Webkit is also Safari.
if ( browser.chrome ) {
	browser.webkit = true;
} else if ( browser.webkit ) {
	browser.safari = true;
}

jQuery.browser = browser;

jQuery.sub = function() {
	function jQuerySub( selector, context ) {
		return new jQuerySub.fn.init( selector, context );
	}
	jQuery.extend( true, jQuerySub, this );
	jQuerySub.superclass = this;
	jQuerySub.fn = jQuerySub.prototype = this();
	jQuerySub.fn.constructor = jQuerySub;
	jQuerySub.sub = this.sub;
	jQuerySub.fn.init = function init( selector, context ) {
		if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
			context = jQuerySub( context );
		}

		return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
	};
	jQuerySub.fn.init.prototype = jQuerySub.fn;
	var rootjQuerySub = jQuerySub(document);
	return jQuerySub;
};

})();
var curCSS, iframe, iframeDoc,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity=([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([-+])=(" + core_pnum + ")", "i" ),
	elemdisplay = {},

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],

	eventsToggle = jQuery.fn.toggle;

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var elem, display,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		values[ index ] = jQuery._data( elem, "olddisplay" );
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && elem.style.display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {
			display = curCSS( elem, "display" );

			if ( !values[ index ] && display !== "none" ) {
				jQuery._data( elem, "olddisplay", display );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state, fn2 ) {
		var bool = typeof state === "boolean";

		if ( jQuery.isFunction( state ) && jQuery.isFunction( fn2 ) ) {
			return eventsToggle.apply( this, arguments );
		}

		return this.each(function() {
			if ( bool ? state : isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;

				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, numeric, extra ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( numeric || extra !== undefined ) {
			num = parseFloat( val );
			return numeric || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.call( elem );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// NOTE: To any future maintainer, we've window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	curCSS = function( elem, name ) {
		var ret, width, minWidth, maxWidth,
			computed = window.getComputedStyle( elem, null ),
			style = elem.style;

		if ( computed ) {

			ret = computed[ name ];
			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	curCSS = function( elem, name ) {
		var left, rsLeft,
			ret = elem.currentStyle && elem.currentStyle[ name ],
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				elem.runtimeStyle.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				elem.runtimeStyle.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
			Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
			value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			// we use jQuery.css instead of curCSS here
			// because of the reliableMarginRight CSS hook!
			val += jQuery.css( elem, extra + cssExpand[ i ], true );
		}

		// From this point on we use curCSS for maximum performance (relevant in animations)
		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= parseFloat( curCSS( elem, "padding" + cssExpand[ i ] ) ) || 0;
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= parseFloat( curCSS( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += parseFloat( curCSS( elem, "padding" + cssExpand[ i ] ) ) || 0;

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += parseFloat( curCSS( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		valueIsBorderBox = true,
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing" ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox
		)
	) + "px";
}


// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	if ( elemdisplay[ nodeName ] ) {
		return elemdisplay[ nodeName ];
	}

	var elem = jQuery( "<" + nodeName + ">" ).appendTo( document.body ),
		display = elem.css("display");
	elem.remove();

	// If the simple way fails,
	// get element's real default display by attaching it to a temp iframe
	if ( display === "none" || display === "" ) {
		// Use the already-created iframe if possible
		iframe = document.body.appendChild(
			iframe || jQuery.extend( document.createElement("iframe"), {
				frameBorder: 0,
				width: 0,
				height: 0
			})
		);

		// Create a cacheable copy of the iframe document on first call.
		// IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
		// document to it; WebKit & Firefox won't allow reusing the iframe document.
		if ( !iframeDoc || !iframe.createElement ) {
			iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
			iframeDoc.write("<!doctype html><html><body>");
			iframeDoc.close();
		}

		elem = iframeDoc.body.appendChild( iframeDoc.createElement(nodeName) );

		display = curCSS( elem, "display" );
		document.body.removeChild( iframe );
	}

	// Store the correct default display
	elemdisplay[ nodeName ] = display;

	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				if ( elem.offsetWidth === 0 && rdisplayswap.test( curCSS( elem, "display" ) ) ) {
					return jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					});
				} else {
					return getWidthOrHeight( elem, name, extra );
				}
			}
		},

		set: function( elem, value, extra ) {
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing" ) === "border-box"
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			if ( value >= 1 && jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
				style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there there is no filter style applied in a css rule, we are done
				if ( currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// Work around by temporarily setting element display to inline-block
				return jQuery.swap( elem, { "display": "inline-block" }, function() {
					if ( computed ) {
						return curCSS( elem, "marginRight" );
					}
				});
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						var ret = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( ret ) ? jQuery( elem ).position()[ prop ] + "px" : ret;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		return ( elem.offsetWidth === 0 && elem.offsetHeight === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || curCSS( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i,

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ],
				expanded = {};

			for ( i = 0; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
	rselectTextarea = /^(?:select|textarea)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			return this.elements ? jQuery.makeArray( this.elements ) : this;
		})
		.filter(function(){
			return this.name && !this.disabled &&
				( this.checked || rselectTextarea.test( this.nodeName ) ||
					rinput.test( this.type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val, i ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// If array item is non-scalar (array or object), encode its
				// numeric index to resolve deserialization ambiguity issues.
				// Note that rack (as of 1.0.0) can't currently deserialize
				// nested arrays properly, and attempting to do so may cause
				// a server error. Possible fixes are to modify rack's
				// deserialization algorithm or to provide an option or flag
				// to force array serialization to be shallow.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rquery = /\?/,
	rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
	rts = /([?&])_=[^&]*/,
	rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = ["*/"] + ["*"];

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType, list, placeBefore,
			dataTypes = dataTypeExpression.toLowerCase().split( core_rspace ),
			i = 0,
			length = dataTypes.length;

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			for ( ; i < length; i++ ) {
				dataType = dataTypes[ i ];
				// We control if we're asked to add before
				// any existing element
				placeBefore = /^\+/.test( dataType );
				if ( placeBefore ) {
					dataType = dataType.substr( 1 ) || "*";
				}
				list = structure[ dataType ] = structure[ dataType ] || [];
				// then we add to the structure accordingly
				list[ placeBefore ? "unshift" : "push" ]( func );
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR,
		dataType /* internal */, inspected /* internal */ ) {

	dataType = dataType || options.dataTypes[ 0 ];
	inspected = inspected || {};

	inspected[ dataType ] = true;

	var selection,
		list = structure[ dataType ],
		i = 0,
		length = list ? list.length : 0,
		executeOnly = ( structure === prefilters );

	for ( ; i < length && ( executeOnly || !selection ); i++ ) {
		selection = list[ i ]( options, originalOptions, jqXHR );
		// If we got redirected to another dataType
		// we try there if executing only and not done already
		if ( typeof selection === "string" ) {
			if ( !executeOnly || inspected[ selection ] ) {
				selection = undefined;
			} else {
				options.dataTypes.unshift( selection );
				selection = inspectPrefiltersOrTransports(
						structure, options, originalOptions, jqXHR, selection, inspected );
			}
		}
	}
	// If we're only executing or nothing was selected
	// we try the catchall dataType if not done already
	if ( ( executeOnly || !selection ) && !inspected[ "*" ] ) {
		selection = inspectPrefiltersOrTransports(
				structure, options, originalOptions, jqXHR, "*", inspected );
	}
	// unnecessary when only executing (prefilters)
	// but it'll be ignored by the caller in that case
	return selection;
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};
	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	// Don't do a request if no elements are being requested
	if ( !this.length ) {
		return this;
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// Request the remote document
	jQuery.ajax({
		url: url,

		// if "type" variable is undefined, then "GET" method will be used
		type: type,
		dataType: "html",
		data: params,
		complete: function( jqXHR, status ) {
			if ( callback ) {
				self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
			}
		}
	}).done(function( responseText ) {

		// Save response for use in complete callback
		response = arguments;

		// See if a selector was specified
		self.html( selector ?

			// Create a dummy div to hold the results
			jQuery("<div>")

				// inject the contents of the document in, removing the scripts
				// to avoid any 'Permission Denied' errors in IE
				.append( responseText.replace( rscript, "" ) )

				// Locate the specified elements
				.find( selector ) :

			// If not, just inject the full result
			responseText );

	});

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split( " " ), function( i, o ){
	jQuery.fn[ o ] = function( f ){
		return this.on( o, f );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			type: method,
			url: url,
			data: data,
			success: callback,
			dataType: type
		});
	};
});

jQuery.extend({

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		if ( settings ) {
			// Building a settings object
			ajaxExtend( target, jQuery.ajaxSettings );
		} else {
			// Extending ajaxSettings
			settings = target;
			target = jQuery.ajaxSettings;
		}
		ajaxExtend( target, settings );
		return target;
	},

	ajaxSettings: {
		url: ajaxLocation,
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		type: "GET",
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		processData: true,
		async: true,
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			xml: "application/xml, text/xml",
			html: "text/html",
			text: "text/plain",
			json: "application/json, text/javascript",
			"*": allTypes
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// List of data converters
		// 1) key format is "source_type destination_type" (a single space in-between)
		// 2) the catchall symbol "*" can be used for source_type
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			context: true,
			url: true
		}
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // ifModified key
			ifModifiedKey,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// transport
			transport,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events
			// It's the callbackContext if one was provided in the options
			// and if it's a DOM node or a jQuery collection
			globalEventContext = callbackContext !== s &&
				( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
						jQuery( callbackContext ) : jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {

				readyState: 0,

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( !state ) {
						var lname = name.toLowerCase();
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match === undefined ? null : match;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					statusText = statusText || strAbort;
					if ( transport ) {
						transport.abort( statusText );
					}
					done( 0, statusText );
					return this;
				}
			};

		// Callback for when everything is done
		// It is defined here because jslint complains if it is declared
		// at the end of the function (which would be more logical and readable)
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {

					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ ifModifiedKey ] = modified;
					}
					modified = jqXHR.getResponseHeader("Etag");
					if ( modified ) {
						jQuery.etag[ ifModifiedKey ] = modified;
					}
				}

				// If not modified
				if ( status === 304 ) {

					statusText = "notmodified";
					isSuccess = true;

				// If we have data
				} else {

					isSuccess = ajaxConvert( s, response );
					statusText = isSuccess.state;
					success = isSuccess.data;
					error = isSuccess.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( !statusText || status ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : "Error" ),
						[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		// Attach deferreds
		deferred.promise( jqXHR );
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;
		jqXHR.complete = completeDeferred.add;

		// Status-dependent callbacks
		jqXHR.statusCode = function( map ) {
			if ( map ) {
				var tmp;
				if ( state < 2 ) {
					for ( tmp in map ) {
						statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
					}
				} else {
					tmp = map[ jqXHR.status ];
					jqXHR.always( tmp );
				}
			}
			return this;
		};

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// We also use the url parameter if available
		s.url = ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().split( core_rspace );

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() ) || false;
			s.crossDomain = parts && ( parts.join(":") + ( parts[ 3 ] ? "" : parts[ 1 ] === "http:" ? 80 : 443 ) ) !==
				( ajaxLocParts.join(":") + ( ajaxLocParts[ 3 ] ? "" : ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) );
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.data;
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Get ifModifiedKey before adding the anti-cache parameter
			ifModifiedKey = s.url;

			// Add anti-cache in url if needed
			if ( s.cache === false ) {

				var ts = jQuery.now(),
					// try replacing _= if it is there
					ret = s.url.replace( rts, "$1_=" + ts );

				// if nothing was replaced, add timestamp to the end
				s.url = ret + ( ( ret === s.url ) ? ( rquery.test( s.url ) ? "&" : "?" ) + "_=" + ts : "" );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			ifModifiedKey = ifModifiedKey || s.url;
			if ( jQuery.lastModified[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ ifModifiedKey ] );
			}
			if ( jQuery.etag[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ ifModifiedKey ] );
			}
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
				// Abort if not done already and return
				return jqXHR.abort();

		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;
			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout( function(){
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch (e) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		return jqXHR;
	},

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {}

});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "content-type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {

	var conv, conv2, current, tmp,
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice(),
		prev = dataTypes[ 0 ],
		converters = {},
		i = 0;

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	// Convert to each sequential dataType, tolerating list modification
	for ( ; (current = dataTypes[++i]); ) {

		// There's only work to do if current dataType is non-auto
		if ( current !== "*" ) {

			// Convert response if prev dataType is non-auto and differs from current
			if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split(" ");
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.splice( i--, 0, current );
								}

								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s["throws"] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}

			// Update prev for next iteration
			prev = current;
		}
	}

	return { state: "success", data: response };
}
var oldCallbacks = [],
	rquestion = /\?/,
	rjsonp = /(=)\?(?=&|$)|\?\?/,
	nonce = jQuery.now();

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		data = s.data,
		url = s.url,
		hasCallback = s.jsonp !== false,
		replaceInUrl = hasCallback && rjsonp.test( url ),
		replaceInData = hasCallback && !replaceInUrl && typeof data === "string" &&
			!( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") &&
			rjsonp.test( data );

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( s.dataTypes[ 0 ] === "jsonp" || replaceInUrl || replaceInData ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;
		overwritten = window[ callbackName ];

		// Insert callback into url or form data
		if ( replaceInUrl ) {
			s.url = url.replace( rjsonp, "$1" + callbackName );
		} else if ( replaceInData ) {
			s.data = data.replace( rjsonp, "$1" + callbackName );
		} else if ( hasCallback ) {
			s.url += ( rquestion.test( url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /javascript|ecmascript/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || document.getElementsByTagName( "head" )[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement( "script" );

				script.async = "async";

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( head && script.parentNode ) {
							head.removeChild( script );
						}

						// Dereference the script
						script = undefined;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};
				// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
				// This arises when a base node is used (#2709 and #4378).
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( 0, 1 );
				}
			}
		};
	}
});
var xhrCallbacks,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject ? function() {
		// Abort all pending requests
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( 0, 1 );
		}
	} : false,
	xhrId = 0;

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
(function( xhr ) {
	jQuery.extend( jQuery.support, {
		ajax: !!xhr,
		cors: !!xhr && ( "withCredentials" in xhr )
	});
})( jQuery.ajaxSettings.xhr() );

// Create transport if the browser can provide an xhr
if ( jQuery.support.ajax ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( _ ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {

						var status,
							statusText,
							responseHeaders,
							responses,
							xml;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();
									responses = {};
									xml = xhr.responseXML;

									// Construct response list
									if ( xml && xml.documentElement /* #4958 */ ) {
										responses.xml = xml;
									}

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									try {
										responses.text = xhr.responseText;
									} catch( _ ) {
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback, 0 );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback(0,1);
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([-+])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var end, unit,
				tween = this.createTween( prop, value ),
				parts = rfxnum.exec( value ),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;

			if ( parts ) {
				end = +parts[2];
				unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

				// We need to compute starting value
				if ( unit !== "px" && start ) {
					// Iteratively approximate from a nonzero starting point
					// Prefer the current property, because this process will be trivial if it uses the same units
					// Fallback to end or a simple constant
					start = jQuery.css( tween.elem, prop, true ) || end || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				tween.unit = unit;
				tween.start = start;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
			}
			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	}, 0 );
	return ( fxNow = jQuery.now() );
}

function createTweens( animation, props ) {
	jQuery.each( props, function( prop, value ) {
		var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( collection[ index ].call( animation, prop, value ) ) {

				// we're done with this property
				return;
			}
		}
	});
}

function Animation( elem, properties, options ) {
	var result,
		index = 0,
		tweenerIndex = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				percent = 1 - ( remaining / animation.duration || 0 ),
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end, easing ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	createTweens( animation, props );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			anim: animation,
			queue: animation.opts.queue,
			elem: elem
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	var index, prop, value, length, dataShow, tween, hooks, oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType && isHidden( elem );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.done(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( index in props ) {
		value = props[ index ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ index ];
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			handled.push( index );
		}
	}

	length = handled.length;
	if ( length ) {
		dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery.removeData( elem, "fxshow", true );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( index = 0 ; index < length ; index++ ) {
			prop = handled[ index ];
			tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
			orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing any value as a 4th parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, false, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ||
			// special check for .toggle( handler, handler, ... )
			( !i && jQuery.isFunction( speed ) && jQuery.isFunction( easing ) ) ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations resolve immediately
				if ( empty ) {
					anim.stop( true );
				}
			};

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) && !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.interval = 13;

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
var rroot = /^(?:body|html)$/i;

jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, body, win, clientTop, clientLeft, scrollTop, scrollLeft,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	if ( (body = doc.body) === elem ) {
		return jQuery.offset.bodyOffset( elem );
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== "undefined" ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	clientTop  = docElem.clientTop  || body.clientTop  || 0;
	clientLeft = docElem.clientLeft || body.clientLeft || 0;
	scrollTop  = win.pageYOffset || docElem.scrollTop;
	scrollLeft = win.pageXOffset || docElem.scrollLeft;
	return {
		top: box.top  + scrollTop  - clientTop,
		left: box.left + scrollLeft - clientLeft
	};
};

jQuery.offset = {

	bodyOffset: function( body ) {
		var top = body.offsetTop,
			left = body.offsetLeft;

		if ( jQuery.support.doesNotIncludeMarginInBodyOffset ) {
			top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
			left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
		}

		return { top: top, left: left };
	},

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[0] ) {
			return;
		}

		var elem = this[0],

		// Get *real* offsetParent
		offsetParent = this.offsetParent(),

		// Get correct offsets
		offset       = this.offset(),
		parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();

		// Subtract element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
		offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;

		// Add offsetParent borders
		parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
		parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;

		// Subtract the two offsets
		return {
			top:  offset.top  - parentOffset.top,
			left: offset.left - parentOffset.left
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.body;
			while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || document.body;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					 top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, value, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}

})( window );

define(function () {
  'use strict';

  var $ = require('jquery');

  $.fn.focusend = function () {
      if (!this[0]) {
        return;
      }

      var target = this[0]
        , l = target.value.length;
      target.focus();

      try {
        target.setSelectionRange(l, l);
      } catch (e) {}

    };

});

define(function (require) {
  'use strict';

  var $ = require('jquery');

  // Firefox does not implement offsetX, OffsetY

  if ($.browser.mozilla) {

    var originalFilter = $.event.mouseHooks.filter;

    $.event.mouseHooks.filter = function (event, original) {
      event = originalFilter(event, original);

      if (event.offsetX === undefined) {
        var offset = $(event.target).offset();
        event.offsetY = event.pageY - offset.top;
        event.offsetX = event.pageX - offset.left;
      }

      return event;
    };

  }

});

/*! Copyright (c) 2013 Brandon Aaron (http://brandonaaron.net)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers.
 * Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix.
 * Thanks to: Seamus Leahy for adding deltaX and deltaY
 *
 * Version: 3.1.3
 *
 * Requires: 1.2.2+
 */

define(function (require) {
    var $ = require('jquery');

    var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'];
    var toBind = 'onwheel' in document || document.documentMode >= 9 ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'];
    var lowestDelta, lowestDeltaXY;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    $.event.special.mousewheel = {
        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel");
        },

        unmousewheel: function(fn) {
            return this.unbind("mousewheel", fn);
        }
    });


    function handler(event) {
        var orgEvent = event || window.event,
            args = [].slice.call(arguments, 1),
            delta = 0,
            deltaX = 0,
            deltaY = 0,
            absDelta = 0,
            absDeltaXY = 0,
            fn;
        event = $.event.fix(orgEvent);
        event.type = "mousewheel";

        // Old school scrollwheel delta
        if ( orgEvent.wheelDelta ) { delta = orgEvent.wheelDelta; }
        if ( orgEvent.detail )     { delta = orgEvent.detail * -1; }

        // New school wheel delta (wheel event)
        if ( orgEvent.deltaY ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( orgEvent.deltaX ) {
            deltaX = orgEvent.deltaX;
            delta  = deltaX * -1;
        }

        // Webkit
        if ( orgEvent.wheelDeltaY !== undefined ) { deltaY = orgEvent.wheelDeltaY; }
        if ( orgEvent.wheelDeltaX !== undefined ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Look for lowest delta to normalize the delta values
        absDelta = Math.abs(delta);
        if ( !lowestDelta || absDelta < lowestDelta ) { lowestDelta = absDelta; }
        absDeltaXY = Math.max(Math.abs(deltaY), Math.abs(deltaX));
        if ( !lowestDeltaXY || absDeltaXY < lowestDeltaXY ) { lowestDeltaXY = absDeltaXY; }

        // Get a whole value for the deltas
        fn = delta > 0 ? 'floor' : 'ceil';
        delta  = Math[fn](delta / lowestDelta);
        deltaX = Math[fn](deltaX / lowestDeltaXY);
        deltaY = Math[fn](deltaY / lowestDeltaXY);

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

});

define(function (require) {
  'use strict';

  var $ = require('jquery');
  /**
    * Refer:
    *  https://github.com/bgrins/nativesortable/blob/master/nativesortable.js
    *  https://github.com/farhadi/html5sortable/blob/master/jquery.sortable.js
    */

  /**
    * Usage:
    *    <ul>
    *      <li>1</li>
    *      <li>2</li>
    *      <li>3</li>
    *    </ul>
    *
    *    $('ul').dndsortable({items: '> li'});
    *
    */
  $.fn.dndsortable = function (options) {
    options = $.extend({}, $.fn.dndsortable.defaults, options);

    return this.each(function () {
      var $this = $(this)
        , index
        , dragging
        , selector = options.list + options.items
        , items = $this.find(options.items);

      items
        .addClass(options.childClass)
        .prop('draggable', options.draggable);

      $this
        // dragstart
        .on('dragstart.ui', selector, function (e) {
          e.stopPropagation();
          if (e.originalEvent.dataTransfer) {
            e.originalEvent.dataTransfer.effectAllowed = 'moving';
            e.originalEvent.dataTransfer.setData('Text', options.setData(this));
          }

          index = $(dragging = this).addClass(options.draggingClass).index();

          // start handle
          options.start && options.start.call(this, index);

          return true;
        })
        // dragend
        .on('dragend.ui', selector, function (e) {
          e.stopPropagation();
          $(this).removeClass(options.draggingClass);

          // end handle
          options.end && options.end.call(this, index);
          index = undefined;
          dragging = null;
          dragenterData(this, false);

          return false;
        })
        // dragenter
        .on('dragenter.ui', selector, function () {
          if (!dragging || dragging === this) {
            return true;
          }

          var ele = this;
          var $ele = $(ele);
          // Prevent dragenter on a child from allowing a dragleave on the container
          var prevCounter = dragenterData(this);
          dragenterData(this, prevCounter + 1);

          if (prevCounter === 0) {
            $ele.addClass(options.overClass);

            if (!options.wrap) {
              wrap($this, dragging, this, options.delay, function (dragging, dropzone) {
                options.enter && options.enter.call(dropzone);

                $ele[$(dragging).index() < $ele.index() ? 'after' : 'before'](dragging);
              });
            }

          }

          return false;
        })
        // dragleave
        .on('dragleave.ui', selector, function () {
          // Prevent dragenter on a child from allowing a dragleave on the container
          var prevCounter = dragenterData(this);
          dragenterData(this, prevCounter - 1);

          // This is a fix for child elements firing dragenter before the parent fires dragleave
          if (!dragenterData(this)) {
            $(this).removeClass(options.overClass);
            dragenterData(this, false);

            options.leave && options.leave.call(this);
          }

          return false;
        })
        // drop
        .on('drop.ui', selector, function (e) {
          e.stopPropagation();
          e.preventDefault();

          if (this === dragging) {
            return;
          }

          if (options.wrap) {
            wrap($this, dragging, this, options.delay, function (dragging, dropzone) {
              options.sort ?
                options.sort.call($this, dragging, dropzone) :
                sort.call($this, dragging, dropzone);

              var data;
              if (e.originalEvent.dataTransfer) {
                data = e.originalEvent.dataTransfer.getData('Text');
              }

              options.change && options.change.call(dropzone, data);
            });
          }

          return false;
        })
        // dragover
        .on('dragover.ui', selector, function (e) {
          if (!dragging) {
            return true;
          }
          e.stopPropagation();
          e.preventDefault();
          return false;
        });

    });
  };

  $.fn.dndsortable.defaults = {
      delay: 0
    , wrap: false
    , list: 'ul'
    , items: '> li'
    , overClass: 'sortable-over'
    , placeholderClass: 'sortable-placeholder'
    , draggingClass: 'sortable-dragging'
    , childClass: 'sortable-child'
    , dragenterData: 'child-dragenter'
    , setData: function () {}
    //start: function () {}
    //end: function () {}
    //enter: function () {}
    //leave: function () {}
    //change: function () {}
    };

  function dragenterData(ele, val, ded) {
    ele = $(ele);
    ded = $.fn.dndsortable.defaults.dragenterData;
    if (arguments.length === 1) {
      return ele.data(ded) || 0;
    } else if (!val) {
      ele.data(ded, null);
    } else {
      ele.data(ded, Math.max(0, val));
    }
  }

  function sort(dragging, dropzone) {
    var sibling = $(dragging).next();
    if (sibling[0] === dropzone) {
      $(dragging).before(dropzone);
    } else {
      $(dropzone).before(dragging);
      sibling.before(dropzone);
    }
  }

  function wrap(container, dragging, dropzone, delay, fn) {
    if (delay) {
      var t = container.data('drag-timer');
      if (t) {
        clearTimeout(t);
        t = null;
        container.removeData('drag-timer');
      }
      t = setTimeout(function () {
        fn(dragging, dropzone);
      }, delay);
      container.data('drag-timer', t);
    } else {
      fn(dragging, dropzone);
    }
  }

});

/*
 * https://github.com/jquery/jquery-mobile/blob/master/js/events/throttledresize.js
 */
define(function (require) {
  'use strict';

  var $ = require('jquery');

  $.event.special.throttledresize = {
    setup: function () {
      $( this ).bind( 'resize', handler );
    },
    teardown: function () {
      $( this ).unbind( 'resize', handler );
    }
  };

  var throttle = 250,
      handler = function() {
        curr = ( new Date() ).getTime();
        diff = curr - lastCall;

        if ( diff >= throttle ) {

          lastCall = curr;
          $( this ).trigger( 'throttledresize' );

        } else {

          if ( heldCall ) {
            clearTimeout( heldCall );
          }

          // Promise a held call will still execute
          heldCall = setTimeout( handler, throttle - diff );
        }
      },
      lastCall = 0,
      heldCall,
      curr,
      diff;
});

/**
 * @author sole / http://soledadpenades.com
 * @author mrdoob / http://mrdoob.com
 * @author Robert Eisele / http://www.xarg.org
 * @author Philippe / http://philippe.elsass.me
 * @author Robert Penner / http://www.robertpenner.com/easing_terms_of_use.html
 * @author Paul Lewis / http://www.aerotwist.com/
 * @author lechecacharro
 * @author Josh Faul / http://jocafa.com/
 * @author egraether / http://egraether.com/
 * @author endel / http://endel.me
 */

var TWEEN = TWEEN || ( function () {

	var _tweens = [];

	return {

		REVISION: '10',

		getAll: function () {

			return _tweens;

		},

		removeAll: function () {

			_tweens = [];

		},

		add: function ( tween ) {

			_tweens.push( tween );

		},

		remove: function ( tween ) {

			var i = _tweens.indexOf( tween );

			if ( i !== -1 ) {

				_tweens.splice( i, 1 );

			}

		},

		update: function ( time ) {
      var numTweens = _tweens.length;

			if ( numTweens === 0 ) return false;

			var i = 0, _tween;

			time = time !== undefined ? time : ( window.performance !== undefined && window.performance.now !== undefined ? window.performance.now() : Date.now() );

			while ( i < numTweens ) {

        _tween = _tweens[i];

				if ( _tween && _tween.update( time ) ) {

					i ++;

				} else {

					_tweens.splice( i, 1 );

					numTweens --;

				}

			}

			return true;

		}
	};

} )();

TWEEN.Tween = function ( object ) {

	var _object = object;
	var _valuesStart = {};
	var _valuesEnd = {};
	var _valuesStartRepeat = {};
	var _duration = 1000;
	var _repeat = 0;
	var _delayTime = 0;
	var _startTime = null;
	var _easingFunction = TWEEN.Easing.Linear.None;
	var _interpolationFunction = TWEEN.Interpolation.Linear;
	var _chainedTweens = [];
	var _onStartCallback = null;
	var _onStartCallbackFired = false;
	var _onUpdateCallback = null;
	var _onCompleteCallback = null;

	// Set all starting values present on the target object
	for ( var field in object ) {

		_valuesStart[ field ] = parseFloat(object[field], 10);

	}

	this.to = function ( properties, duration ) {

		if ( duration !== undefined ) {

			_duration = duration;

		}

		_valuesEnd = properties;

		return this;

	};

	this.start = function ( time ) {

		TWEEN.add( this );

		_onStartCallbackFired = false;

		_startTime = time !== undefined ? time : (window.performance !== undefined && window.performance.now !== undefined ? window.performance.now() : Date.now() );
		_startTime += _delayTime;

		for ( var property in _valuesEnd ) {

			// check if an Array was provided as property value
			if ( _valuesEnd[ property ] instanceof Array ) {

				if ( _valuesEnd[ property ].length === 0 ) {

					continue;

				}

				// create a local copy of the Array with the start value at the front
				_valuesEnd[ property ] = [ _object[ property ] ].concat( _valuesEnd[ property ] );

			}

			_valuesStart[ property ] = _object[ property ];

			if( ( _valuesStart[ property ] instanceof Array ) === false ) {
				_valuesStart[ property ] *= 1.0; // Ensures we're using numbers, not strings
			}

			_valuesStartRepeat[ property ] = _valuesStart[ property ] || 0;

		}

		return this;

	};

	this.stop = function () {

		TWEEN.remove( this );
		return this;

	};

	this.delay = function ( amount ) {

		_delayTime = amount;
		return this;

	};

	this.repeat = function ( times ) {

		_repeat = times;
		return this;

	};

	this.easing = function ( easing ) {

		_easingFunction = easing;
		return this;

	};

	this.interpolation = function ( interpolation ) {

		_interpolationFunction = interpolation;
		return this;

	};

	this.chain = function () {

		_chainedTweens = arguments;
		return this;

	};

	this.onStart = function ( callback ) {

		_onStartCallback = callback;
		return this;

	};

	this.onUpdate = function ( callback ) {

		_onUpdateCallback = callback;
		return this;

	};

	this.onComplete = function ( callback ) {

		_onCompleteCallback = callback;
		return this;

	};

	this.update = function ( time ) {

		if ( time < _startTime ) {

			return true;

		}

		if ( _onStartCallbackFired === false ) {

			if ( _onStartCallback !== null ) {

				_onStartCallback.call( _object );

			}

			_onStartCallbackFired = true;

		}

		var elapsed = ( time - _startTime ) / _duration;
		elapsed = elapsed > 1 ? 1 : elapsed;

		var value = _easingFunction( elapsed );

		for ( var property in _valuesEnd ) {

			var start = _valuesStart[ property ] || 0;
			var end = _valuesEnd[ property ];

			if ( end instanceof Array ) {

				_object[ property ] = _interpolationFunction( end, value );

			} else {

				if ( typeof(end) === "string" ) {
					end = start + parseFloat(end, 10);
				}

				_object[ property ] = start + ( end - start ) * value;

			}

		}

		if ( _onUpdateCallback !== null ) {

			_onUpdateCallback.call( _object, value );

		}

		if ( elapsed == 1 ) {

			if ( _repeat > 0 ) {

				if( isFinite( _repeat ) ) {
					_repeat--;
				}

				// reassign starting values, restart by making startTime = now
				for( var property in _valuesStartRepeat ) {

					if ( typeof( _valuesEnd[ property ] ) === "string" ) {
						_valuesStartRepeat[ property ] = _valuesStartRepeat[ property ] + parseFloat(_valuesEnd[ property ], 10);
					}

					_valuesStart[ property ] = _valuesStartRepeat[ property ];

				}

				_startTime = time + _delayTime;

				return true;

			} else {

				if ( _onCompleteCallback !== null ) {

					_onCompleteCallback.call( _object );

				}

				for ( var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i ++ ) {

					_chainedTweens[ i ].start( time );

				}

				return false;

			}

		}

		return true;

	};

};

TWEEN.Easing = {

	Linear: {

		None: function ( k ) {

			return k;

		}

	},

	Quadratic: {

		In: function ( k ) {

			return k * k;

		},

		Out: function ( k ) {

			return k * ( 2 - k );

		},

		InOut: function ( k ) {

			if ( ( k *= 2 ) < 1 ) return 0.5 * k * k;
			return - 0.5 * ( --k * ( k - 2 ) - 1 );

		}

	},

	Cubic: {

		In: function ( k ) {

			return k * k * k;

		},

		Out: function ( k ) {

			return --k * k * k + 1;

		},

		InOut: function ( k ) {

			if ( ( k *= 2 ) < 1 ) return 0.5 * k * k * k;
			return 0.5 * ( ( k -= 2 ) * k * k + 2 );

		}

	},

	Quartic: {

		In: function ( k ) {

			return k * k * k * k;

		},

		Out: function ( k ) {

			return 1 - ( --k * k * k * k );

		},

		InOut: function ( k ) {

			if ( ( k *= 2 ) < 1) return 0.5 * k * k * k * k;
			return - 0.5 * ( ( k -= 2 ) * k * k * k - 2 );

		}

	},

	Quintic: {

		In: function ( k ) {

			return k * k * k * k * k;

		},

		Out: function ( k ) {

			return --k * k * k * k * k + 1;

		},

		InOut: function ( k ) {

			if ( ( k *= 2 ) < 1 ) return 0.5 * k * k * k * k * k;
			return 0.5 * ( ( k -= 2 ) * k * k * k * k + 2 );

		}

	},

	Sinusoidal: {

		In: function ( k ) {

			return 1 - Math.cos( k * Math.PI / 2 );

		},

		Out: function ( k ) {

			return Math.sin( k * Math.PI / 2 );

		},

		InOut: function ( k ) {

			return 0.5 * ( 1 - Math.cos( Math.PI * k ) );

		}

	},

	Exponential: {

		In: function ( k ) {

			return k === 0 ? 0 : Math.pow( 1024, k - 1 );

		},

		Out: function ( k ) {

			return k === 1 ? 1 : 1 - Math.pow( 2, - 10 * k );

		},

		InOut: function ( k ) {

			if ( k === 0 ) return 0;
			if ( k === 1 ) return 1;
			if ( ( k *= 2 ) < 1 ) return 0.5 * Math.pow( 1024, k - 1 );
			return 0.5 * ( - Math.pow( 2, - 10 * ( k - 1 ) ) + 2 );

		}

	},

	Circular: {

		In: function ( k ) {

			return 1 - Math.sqrt( 1 - k * k );

		},

		Out: function ( k ) {

			return Math.sqrt( 1 - ( --k * k ) );

		},

		InOut: function ( k ) {

			if ( ( k *= 2 ) < 1) return - 0.5 * ( Math.sqrt( 1 - k * k) - 1);
			return 0.5 * ( Math.sqrt( 1 - ( k -= 2) * k) + 1);

		}

	},

	Elastic: {

		In: function ( k ) {

			var s, a = 0.1, p = 0.4;
			if ( k === 0 ) return 0;
			if ( k === 1 ) return 1;
			if ( !a || a < 1 ) { a = 1; s = p / 4; }
			else s = p * Math.asin( 1 / a ) / ( 2 * Math.PI );
			return - ( a * Math.pow( 2, 10 * ( k -= 1 ) ) * Math.sin( ( k - s ) * ( 2 * Math.PI ) / p ) );

		},

		Out: function ( k ) {

			var s, a = 0.1, p = 0.4;
			if ( k === 0 ) return 0;
			if ( k === 1 ) return 1;
			if ( !a || a < 1 ) { a = 1; s = p / 4; }
			else s = p * Math.asin( 1 / a ) / ( 2 * Math.PI );
			return ( a * Math.pow( 2, - 10 * k) * Math.sin( ( k - s ) * ( 2 * Math.PI ) / p ) + 1 );

		},

		InOut: function ( k ) {

			var s, a = 0.1, p = 0.4;
			if ( k === 0 ) return 0;
			if ( k === 1 ) return 1;
			if ( !a || a < 1 ) { a = 1; s = p / 4; }
			else s = p * Math.asin( 1 / a ) / ( 2 * Math.PI );
			if ( ( k *= 2 ) < 1 ) return - 0.5 * ( a * Math.pow( 2, 10 * ( k -= 1 ) ) * Math.sin( ( k - s ) * ( 2 * Math.PI ) / p ) );
			return a * Math.pow( 2, -10 * ( k -= 1 ) ) * Math.sin( ( k - s ) * ( 2 * Math.PI ) / p ) * 0.5 + 1;

		}

	},

	Back: {

		In: function ( k ) {

			var s = 1.70158;
			return k * k * ( ( s + 1 ) * k - s );

		},

		Out: function ( k ) {

			var s = 1.70158;
			return --k * k * ( ( s + 1 ) * k + s ) + 1;

		},

		InOut: function ( k ) {

			var s = 1.70158 * 1.525;
			if ( ( k *= 2 ) < 1 ) return 0.5 * ( k * k * ( ( s + 1 ) * k - s ) );
			return 0.5 * ( ( k -= 2 ) * k * ( ( s + 1 ) * k + s ) + 2 );

		}

	},

	Bounce: {

		In: function ( k ) {

			return 1 - TWEEN.Easing.Bounce.Out( 1 - k );

		},

		Out: function ( k ) {

			if ( k < ( 1 / 2.75 ) ) {

				return 7.5625 * k * k;

			} else if ( k < ( 2 / 2.75 ) ) {

				return 7.5625 * ( k -= ( 1.5 / 2.75 ) ) * k + 0.75;

			} else if ( k < ( 2.5 / 2.75 ) ) {

				return 7.5625 * ( k -= ( 2.25 / 2.75 ) ) * k + 0.9375;

			} else {

				return 7.5625 * ( k -= ( 2.625 / 2.75 ) ) * k + 0.984375;

			}

		},

		InOut: function ( k ) {

			if ( k < 0.5 ) return TWEEN.Easing.Bounce.In( k * 2 ) * 0.5;
			return TWEEN.Easing.Bounce.Out( k * 2 - 1 ) * 0.5 + 0.5;

		}

	}

};

TWEEN.Interpolation = {

	Linear: function ( v, k ) {

		var m = v.length - 1, f = m * k, i = Math.floor( f ), fn = TWEEN.Interpolation.Utils.Linear;

		if ( k < 0 ) return fn( v[ 0 ], v[ 1 ], f );
		if ( k > 1 ) return fn( v[ m ], v[ m - 1 ], m - f );

		return fn( v[ i ], v[ i + 1 > m ? m : i + 1 ], f - i );

	},

	Bezier: function ( v, k ) {

		var b = 0, n = v.length - 1, pw = Math.pow, bn = TWEEN.Interpolation.Utils.Bernstein, i;

		for ( i = 0; i <= n; i++ ) {
			b += pw( 1 - k, n - i ) * pw( k, i ) * v[ i ] * bn( n, i );
		}

		return b;

	},

	CatmullRom: function ( v, k ) {

		var m = v.length - 1, f = m * k, i = Math.floor( f ), fn = TWEEN.Interpolation.Utils.CatmullRom;

		if ( v[ 0 ] === v[ m ] ) {

			if ( k < 0 ) i = Math.floor( f = m * ( 1 + k ) );

			return fn( v[ ( i - 1 + m ) % m ], v[ i ], v[ ( i + 1 ) % m ], v[ ( i + 2 ) % m ], f - i );

		} else {

			if ( k < 0 ) return v[ 0 ] - ( fn( v[ 0 ], v[ 0 ], v[ 1 ], v[ 1 ], -f ) - v[ 0 ] );
			if ( k > 1 ) return v[ m ] - ( fn( v[ m ], v[ m ], v[ m - 1 ], v[ m - 1 ], f - m ) - v[ m ] );

			return fn( v[ i ? i - 1 : 0 ], v[ i ], v[ m < i + 1 ? m : i + 1 ], v[ m < i + 2 ? m : i + 2 ], f - i );

		}

	},

	Utils: {

		Linear: function ( p0, p1, t ) {

			return ( p1 - p0 ) * t + p0;

		},

		Bernstein: function ( n , i ) {

			var fc = TWEEN.Interpolation.Utils.Factorial;
			return fc( n ) / fc( i ) / fc( n - i );

		},

		Factorial: ( function () {

			var a = [ 1 ];

			return function ( n ) {

				var s = 1, i;
				if ( a[ n ] ) return a[ n ];
				for ( i = n; i > 1; i-- ) s *= i;
				return a[ n ] = s;

			};

		} )(),

		CatmullRom: function ( p0, p1, p2, p3, t ) {

			var v0 = ( p2 - p0 ) * 0.5, v1 = ( p3 - p1 ) * 0.5, t2 = t * t, t3 = t * t2;
			return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

		}

	}

};

if ( typeof define === "function") {
  define( "tween", function () { return TWEEN; } );
}

/**
 * `Animation Frame`
 */

define('af', function () {
  'use strict';

  var performanceNow = window.performance && window.performance.now,
      now = performanceNow ?
        function () {
          return window.performance.now();
        }
          : Date.now || function () {
              return new Date().getTime();
            };

  /** Thanks to:
   *      http://paulirish.com/2011/requestanimationframe-for-smart-animating/
   *      http://creativejs.com/resources/requestanimationframe/
   *      http://www.makeitgo.ws/articles/animationframe/
   *      https://github.com/component/raf/blob/master/index.js
   *      https://gist.github.com/paulirish/1579671
   *      https://gist.github.com/joelambert/1002116
   *      https://gist.github.com/KrofDrakula/5318048
   */

   /**
    * `requestAnimationFrame(time)`
    */

  var r = window.requestAnimationFrame
    || window.webkitRequestAnimationFrame
    || window.mozRequestAnimationFrame
    || window.oRequestAnimationFrame
    || window.msRequestAnimationFrame;

   /**
    * `cancelAnimationFrame`
    */

  var c = window.cancelAnimationFrame
    || window.webkitCancelAnimationFrame
    || window.mozCancelAnimationFrame
    || window.oCancelAnimationFrame
    || window.msCancelAnimationFrame;

  if (!r) {
    var prev = 0;
    r = function (callback/*, element*/) {
      var curr = now(),
          ms = Math.max(0, 16 - (curr - prev)),
          id = setTimeout(function () {
            callback(curr + ms);
          }, ms);
      prev = curr + ms;
      return id;
    };
  }

  if (!c) {
    c = function (id) {
      clearTimeout(id);
    };
  }

  return {
    request: r,
    cancel: c
  };
});

/* Copyright (c) 2010-2012 Marcus Westin
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

;(function(){
	var store = {},
		win = window,
		doc = win.document,
		localStorageName = 'localStorage',
		globalStorageName = 'globalStorage',
		namespace = '__storejs__',
		storage

	store.disabled = false
	store.set = function(key, value) {}
	store.get = function(key) {}
	store.remove = function(key) {}
	store.clear = function() {}
	store.transact = function(key, defaultVal, transactionFn) {
		var val = store.get(key)
		if (transactionFn == null) {
			transactionFn = defaultVal
			defaultVal = null
		}
		if (typeof val == 'undefined') { val = defaultVal || {} }
		transactionFn(val)
		store.set(key, val)
	}
	store.getAll = function() {}

	store.serialize = function(value) {
		return JSON.stringify(value)
	}
	store.deserialize = function(value) {
		if (typeof value != 'string') { return undefined }
		try { return JSON.parse(value) }
		catch(e) { return value || undefined }
	}

	// Functions to encapsulate questionable FireFox 3.6.13 behavior
	// when about.config::dom.storage.enabled === false
	// See https://github.com/marcuswestin/store.js/issues#issue/13
	function isLocalStorageNameSupported() {
		try { return (localStorageName in win && win[localStorageName]) }
		catch(err) { return false }
	}

	function isGlobalStorageNameSupported() {
		try { return (globalStorageName in win && win[globalStorageName] && win[globalStorageName][win.location.hostname]) }
		catch(err) { return false }
	}

	if (isLocalStorageNameSupported()) {
		storage = win[localStorageName]
		store.set = function(key, val) {
			if (val === undefined) { return store.remove(key) }
			storage.setItem(key, store.serialize(val))
			return val
		}
		store.get = function(key) { return store.deserialize(storage.getItem(key)) }
		store.remove = function(key) { storage.removeItem(key) }
		store.clear = function() { storage.clear() }
		store.getAll = function() {
			var ret = {}
			for (var i=0; i<storage.length; ++i) {
				var key = storage.key(i)
				ret[key] = store.get(key)
			}
			return ret
		}
	} else if (isGlobalStorageNameSupported()) {
		storage = win[globalStorageName][win.location.hostname]
		store.set = function(key, val) {
			if (val === undefined) { return store.remove(key) }
			storage[key] = store.serialize(val)
			return val
		}
		store.get = function(key) { return store.deserialize(storage[key] && storage[key].value) }
		store.remove = function(key) { delete storage[key] }
		store.clear = function() { for (var key in storage ) { delete storage[key] } }
		store.getAll = function() {
			var ret = {}
			for (var i=0; i<storage.length; ++i) {
				var key = storage.key(i)
				ret[key] = store.get(key)
			}
			return ret
		}

	} else if (doc.documentElement.addBehavior) {
		var storageOwner,
			storageContainer
		// Since #userData storage applies only to specific paths, we need to
		// somehow link our data to a specific path.  We choose /favicon.ico
		// as a pretty safe option, since all browsers already make a request to
		// this URL anyway and being a 404 will not hurt us here.  We wrap an
		// iframe pointing to the favicon in an ActiveXObject(htmlfile) object
		// (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)
		// since the iframe access rules appear to allow direct access and
		// manipulation of the document element, even for a 404 page.  This
		// document can be used instead of the current document (which would
		// have been limited to the current path) to perform #userData storage.
		try {
			storageContainer = new ActiveXObject('htmlfile')
			storageContainer.open()
			storageContainer.write('<s' + 'cript>document.w=window</s' + 'cript><iframe src="/favicon.ico"></frame>')
			storageContainer.close()
			storageOwner = storageContainer.w.frames[0].document
			storage = storageOwner.createElement('div')
		} catch(e) {
			// somehow ActiveXObject instantiation failed (perhaps some special
			// security settings or otherwse), fall back to per-path storage
			storage = doc.createElement('div')
			storageOwner = doc.body
		}
		function withIEStorage(storeFunction) {
			return function() {
				var args = Array.prototype.slice.call(arguments, 0)
				args.unshift(storage)
				// See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx
				// and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx
				storageOwner.appendChild(storage)
				storage.addBehavior('#default#userData')
				storage.load(localStorageName)
				var result = storeFunction.apply(store, args)
				storageOwner.removeChild(storage)
				return result
			}
		}

		// In IE7, keys may not contain special chars. See all of https://github.com/marcuswestin/store.js/issues/40
		var forbiddenCharsRegex = new RegExp("[!\"#$%&'()*+,/\\\\:;<=>?@[\\]^`{|}~]", "g")
		function ieKeyFix(key) {
			return key.replace(forbiddenCharsRegex, '___')
		}
		store.set = withIEStorage(function(storage, key, val) {
			key = ieKeyFix(key)
			if (val === undefined) { return store.remove(key) }
			storage.setAttribute(key, store.serialize(val))
			storage.save(localStorageName)
			return val
		})
		store.get = withIEStorage(function(storage, key) {
			key = ieKeyFix(key)
			return store.deserialize(storage.getAttribute(key))
		})
		store.remove = withIEStorage(function(storage, key) {
			key = ieKeyFix(key)
			storage.removeAttribute(key)
			storage.save(localStorageName)
		})
		store.clear = withIEStorage(function(storage) {
			var attributes = storage.XMLDocument.documentElement.attributes
			storage.load(localStorageName)
			for (var i=0, attr; attr=attributes[i]; i++) {
				storage.removeAttribute(attr.name)
			}
			storage.save(localStorageName)
		})
		store.getAll = withIEStorage(function(storage) {
			var attributes = storage.XMLDocument.documentElement.attributes
			storage.load(localStorageName)
			var ret = {}
			for (var i=0, attr; attr=attributes[i]; ++i) {
				ret[attr] = store.get(attr)
			}
			return ret
		})
	}

	try {
		store.set(namespace, namespace)
		if (store.get(namespace) != namespace) { store.disabled = true }
		store.remove(namespace)
	} catch(e) {
		store.disabled = true
	}
	store.enabled = !store.disabled

	if (typeof module != 'undefined' && typeof module != 'function') { module.exports = store }
	else if (typeof define === 'function' && define.amd) { define(store) }
	else { this.store = store }

  if (typeof define === 'function') {
    define('store', function () { return store; });
  }

})();

define('marked', function (require, exports, module) {


/**
 * marked - A markdown parser (https://github.com/chjj/marked)
 * Copyright (c) 2011-2012, Christopher Jeffrey. (MIT Licensed)
 */

;(function() {

/**
 * Block-Level Grammar
 */

var block = {
  newline: /^\n+/,
  code: /^( {4}[^\n]+\n*)+/,
  fences: noop,
  hr: /^( *[-*_]){3,} *(?:\n+|$)/,
  heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,
  lheading: /^([^\n]+)\n *(=|-){3,} *\n*/,
  blockquote: /^( *>[^\n]+(\n[^\n]+)*\n*)+/,
  list: /^( *)(bull) [^\0]+?(?:hr|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
  html: /^ *(?:comment|closed|closing) *(?:\n{2,}|\s*$)/,
  def: /^ *\[([^\]]+)\]: *([^\s]+)(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,
  paragraph: /^([^\n]+\n?(?!body))+\n*/,
  text: /^[^\n]+/
};

block.bullet = /(?:[*+-]|\d+\.)/;
block.item = /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;
block.item = replace(block.item, 'gm')
  (/bull/g, block.bullet)
  ();

block.list = replace(block.list)
  (/bull/g, block.bullet)
  ('hr', /\n+(?=(?: *[-*_]){3,} *(?:\n+|$))/)
  ();

block.html = replace(block.html)
  ('comment', /<!--[^\0]*?-->/)
  ('closed', /<(tag)[^\0]+?<\/\1>/)
  ('closing', /<tag(?!:\/|@)\b(?:"[^"]*"|'[^']*'|[^'">])*?>/)
  (/tag/g, tag())
  ();

block.paragraph = (function() {
  var paragraph = block.paragraph.source
    , body = [];

  (function push(rule) {
    rule = block[rule] ? block[rule].source : rule;
    body.push(rule.replace(/(^|[^\[])\^/g, '$1'));
    return push;
  })
  ('hr')
  ('heading')
  ('lheading')
  ('blockquote')
  ('<' + tag())
  ('def');

  return new
    RegExp(paragraph.replace('body', body.join('|')));
})();

block.normal = {
  fences: block.fences,
  paragraph: block.paragraph
};

block.gfm = {
  fences: /^ *``` *(\w+)? *\n([^\0]+?)\s*``` *(?:\n+|$)/,
  paragraph: /^/
};

block.gfm.paragraph = replace(block.paragraph)
  ('(?!', '(?!' + block.gfm.fences.source.replace(/(^|[^\[])\^/g, '$1') + '|')
  ();

/**
 * Block Lexer
 */

block.lexer = function(src) {
  var tokens = [];

  tokens.links = {};

  src = src
    .replace(/\r\n|\r/g, '\n')
    .replace(/\t/g, '    ');

  return block.token(src, tokens, true);
};

block.token = function(src, tokens, top) {
  var src = src.replace(/^ +$/gm, '')
    , next
    , loose
    , cap
    , item
    , space
    , i
    , l;

  while (src) {
    // newline
    if (cap = block.newline.exec(src)) {
      src = src.substring(cap[0].length);
      if (cap[0].length > 1) {
        tokens.push({
          type: 'space'
        });
      }
    }

    // code
    if (cap = block.code.exec(src)) {
      src = src.substring(cap[0].length);
      cap = cap[0].replace(/^ {4}/gm, '');
      tokens.push({
        type: 'code',
        text: !options.pedantic
          ? cap.replace(/\n+$/, '')
          : cap
      });
      continue;
    }

    // fences (gfm)
    if (cap = block.fences.exec(src)) {
      src = src.substring(cap[0].length);
      tokens.push({
        type: 'code',
        lang: cap[1],
        text: cap[2]
      });
      continue;
    }

    // heading
    if (cap = block.heading.exec(src)) {
      src = src.substring(cap[0].length);
      tokens.push({
        type: 'heading',
        depth: cap[1].length,
        text: cap[2]
      });
      continue;
    }

    // lheading
    if (cap = block.lheading.exec(src)) {
      src = src.substring(cap[0].length);
      tokens.push({
        type: 'heading',
        depth: cap[2] === '=' ? 1 : 2,
        text: cap[1]
      });
      continue;
    }

    // hr
    if (cap = block.hr.exec(src)) {
      src = src.substring(cap[0].length);
      tokens.push({
        type: 'hr'
      });
      continue;
    }

    // blockquote
    if (cap = block.blockquote.exec(src)) {
      src = src.substring(cap[0].length);

      tokens.push({
        type: 'blockquote_start'
      });

      cap = cap[0].replace(/^ *> ?/gm, '');

      // Pass `top` to keep the current
      // "toplevel" state. This is exactly
      // how markdown.pl works.
      block.token(cap, tokens, top);

      tokens.push({
        type: 'blockquote_end'
      });

      continue;
    }

    // list
    if (cap = block.list.exec(src)) {
      src = src.substring(cap[0].length);

      tokens.push({
        type: 'list_start',
        ordered: isFinite(cap[2])
      });

      // Get each top-level item.
      cap = cap[0].match(block.item);

      next = false;
      l = cap.length;
      i = 0;

      for (; i < l; i++) {
        item = cap[i];

        // Remove the list item's bullet
        // so it is seen as the next token.
        space = item.length;
        item = item.replace(/^ *([*+-]|\d+\.) +/, '');

        // Outdent whatever the
        // list item contains. Hacky.
        if (~item.indexOf('\n ')) {
          space -= item.length;
          item = !options.pedantic
            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')
            : item.replace(/^ {1,4}/gm, '');
        }

        // Determine whether item is loose or not.
        // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
        // for discount behavior.
        loose = next || /\n\n(?!\s*$)/.test(item);
        if (i !== l - 1) {
          next = item[item.length-1] === '\n';
          if (!loose) loose = next;
        }

        tokens.push({
          type: loose
            ? 'loose_item_start'
            : 'list_item_start'
        });

        // Recurse.
        block.token(item, tokens);

        tokens.push({
          type: 'list_item_end'
        });
      }

      tokens.push({
        type: 'list_end'
      });

      continue;
    }

    // html
    if (cap = block.html.exec(src)) {
      src = src.substring(cap[0].length);
      tokens.push({
        type: 'html',
        pre: cap[1] === 'pre',
        text: cap[0]
      });
      continue;
    }

    // def
    if (top && (cap = block.def.exec(src))) {
      src = src.substring(cap[0].length);
      tokens.links[cap[1].toLowerCase()] = {
        href: cap[2],
        title: cap[3]
      };
      continue;
    }

    // top-level paragraph
    if (top && (cap = block.paragraph.exec(src))) {
      src = src.substring(cap[0].length);
      tokens.push({
        type: 'paragraph',
        text: cap[0]
      });
      continue;
    }

    // text
    if (cap = block.text.exec(src)) {
      // Top-level should never reach here.
      src = src.substring(cap[0].length);
      tokens.push({
        type: 'text',
        text: cap[0]
      });
      continue;
    }
  }

  return tokens;
};

/**
 * Inline Processing
 */

var inline = {
  escape: /^\\([\\`*{}\[\]()#+\-.!_>])/,
  autolink: /^<([^ >]+(@|:\/)[^ >]+)>/,
  url: noop,
  tag: /^<!--[^\0]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,
  link: /^!?\[(inside)\]\(href\)/,
  reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,
  nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,
  strong: /^__([^\0]+?)__(?!_)|^\*\*([^\0]+?)\*\*(?!\*)/,
  em: /^\b_((?:__|[^\0])+?)_\b|^\*((?:\*\*|[^\0])+?)\*(?!\*)/,
  code: /^(`+)([^\0]*?[^`])\1(?!`)/,
  br: /^ {2,}\n(?!\s*$)/,
  text: /^[^\0]+?(?=[\\<!\[_*`]| {2,}\n|$)/
};

inline._linkInside = /(?:\[[^\]]*\]|[^\]]|\](?=[^\[]*\]))*/;
inline._linkHref = /\s*<?([^\s]*?)>?(?:\s+['"]([^\0]*?)['"])?\s*/;

inline.link = replace(inline.link)
  ('inside', inline._linkInside)
  ('href', inline._linkHref)
  ();

inline.reflink = replace(inline.reflink)
  ('inside', inline._linkInside)
  ();

inline.normal = {
  url: inline.url,
  strong: inline.strong,
  em: inline.em,
  text: inline.text
};

inline.pedantic = {
  strong: /^__(?=\S)([^\0]*?\S)__(?!_)|^\*\*(?=\S)([^\0]*?\S)\*\*(?!\*)/,
  em: /^_(?=\S)([^\0]*?\S)_(?!_)|^\*(?=\S)([^\0]*?\S)\*(?!\*)/
};

inline.gfm = {
  url: /^(https?:\/\/[^\s]+[^.,:;"')\]\s])/,
  text: /^[^\0]+?(?=[\\<!\[_*`]|https?:\/\/| {2,}\n|$)/
};

/**
 * Inline Lexer
 */

inline.lexer = function(src) {
  var out = ''
    , links = tokens.links
    , link
    , text
    , href
    , cap;

  while (src) {
    // escape
    if (cap = inline.escape.exec(src)) {
      src = src.substring(cap[0].length);
      out += cap[1];
      continue;
    }

    // autolink
    if (cap = inline.autolink.exec(src)) {
      src = src.substring(cap[0].length);
      if (cap[2] === '@') {
        text = cap[1][6] === ':'
          ? mangle(cap[1].substring(7))
          : mangle(cap[1]);
        href = mangle('mailto:') + text;
      } else {
        text = escape(cap[1]);
        href = text;
      }
      out += '<a href="'
        + href
        + '">'
        + text
        + '</a>';
      continue;
    }

    // url (gfm)
    if (cap = inline.url.exec(src)) {
      src = src.substring(cap[0].length);
      text = escape(cap[1]);
      href = text;
      out += '<a href="'
        + href
        + '">'
        + text
        + '</a>';
      continue;
    }

    // tag
    if (cap = inline.tag.exec(src)) {
      src = src.substring(cap[0].length);
      out += options.sanitize
        ? escape(cap[0])
        : cap[0];
      continue;
    }

    // link
    if (cap = inline.link.exec(src)) {
      src = src.substring(cap[0].length);
      out += outputLink(cap, {
        href: cap[2],
        title: cap[3]
      });
      continue;
    }

    // reflink, nolink
    if ((cap = inline.reflink.exec(src))
        || (cap = inline.nolink.exec(src))) {
      src = src.substring(cap[0].length);
      link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
      link = links[link.toLowerCase()];
      if (!link || !link.href) {
        out += cap[0][0];
        src = cap[0].substring(1) + src;
        continue;
      }
      out += outputLink(cap, link);
      continue;
    }

    // strong
    if (cap = inline.strong.exec(src)) {
      src = src.substring(cap[0].length);
      out += '<strong>'
        + inline.lexer(cap[2] || cap[1])
        + '</strong>';
      continue;
    }

    // em
    if (cap = inline.em.exec(src)) {
      src = src.substring(cap[0].length);
      out += '<em>'
        + inline.lexer(cap[2] || cap[1])
        + '</em>';
      continue;
    }

    // code
    if (cap = inline.code.exec(src)) {
      src = src.substring(cap[0].length);
      out += '<code>'
        + escape(cap[2], true)
        + '</code>';
      continue;
    }

    // br
    if (cap = inline.br.exec(src)) {
      src = src.substring(cap[0].length);
      out += '<br>';
      continue;
    }

    // text
    if (cap = inline.text.exec(src)) {
      src = src.substring(cap[0].length);
      out += escape(cap[0]);
      continue;
    }
  }

  return out;
};

function outputLink(cap, link) {
  if (cap[0][0] !== '!') {
    return '<a href="'
      + escape(link.href)
      + '"'
      + (link.title
      ? ' title="'
      + escape(link.title)
      + '"'
      : '')
      + '>'
      + inline.lexer(cap[1])
      + '</a>';
  } else {
    return '<img src="'
      + escape(link.href)
      + '" alt="'
      + escape(cap[1])
      + '"'
      + (link.title
      ? ' title="'
      + escape(link.title)
      + '"'
      : '')
      + '>';
  }
}

/**
 * Parsing
 */

var tokens
  , token;

function next() {
  return token = tokens.pop();
}

function tok() {
  switch (token.type) {
    case 'space': {
      return '';
    }
    case 'hr': {
      return '<hr>\n';
    }
    case 'heading': {
      return '<h'
        + token.depth
        + '>'
        + inline.lexer(token.text)
        + '</h'
        + token.depth
        + '>\n';
    }
    case 'code': {
      if (options.highlight) {
        token.code = options.highlight(token.text, token.lang);
        if (token.code != null && token.code !== token.text) {
          token.escaped = true;
          token.text = token.code;
        }
      }

      if (!token.escaped) {
        token.text = escape(token.text, true);
      }

      return '<pre><code'
        + (token.lang
        ? ' class="lang-'
        + token.lang
        + '"'
        : '')
        + '>'
        + token.text
        + '</code></pre>\n';
    }
    case 'blockquote_start': {
      var body = '';

      while (next().type !== 'blockquote_end') {
        body += tok();
      }

      return '<blockquote>\n'
        + body
        + '</blockquote>\n';
    }
    case 'list_start': {
      var type = token.ordered ? 'ol' : 'ul'
        , body = '';

      while (next().type !== 'list_end') {
        body += tok();
      }

      return '<'
        + type
        + '>\n'
        + body
        + '</'
        + type
        + '>\n';
    }
    case 'list_item_start': {
      var body = '';

      while (next().type !== 'list_item_end') {
        body += token.type === 'text'
          ? parseText()
          : tok();
      }

      return '<li>'
        + body
        + '</li>\n';
    }
    case 'loose_item_start': {
      var body = '';

      while (next().type !== 'list_item_end') {
        body += tok();
      }

      return '<li>'
        + body
        + '</li>\n';
    }
    case 'html': {
      if (options.sanitize) {
        return inline.lexer(token.text);
      }
      return !token.pre && !options.pedantic
        ? inline.lexer(token.text)
        : token.text;
    }
    case 'paragraph': {
      return '<p>'
        + inline.lexer(token.text)
        + '</p>\n';
    }
    case 'text': {
      return '<p>'
        + parseText()
        + '</p>\n';
    }
  }
}

function parseText() {
  var body = token.text
    , top;

  while ((top = tokens[tokens.length-1])
         && top.type === 'text') {
    body += '\n' + next().text;
  }

  return inline.lexer(body);
}

function parse(src) {
  tokens = src.reverse();

  var out = '';
  while (next()) {
    out += tok();
  }

  tokens = null;
  token = null;

  return out;
}

/**
 * Helpers
 */

function escape(html, encode) {
  return html
    .replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

function mangle(text) {
  var out = ''
    , l = text.length
    , i = 0
    , ch;

  for (; i < l; i++) {
    ch = text.charCodeAt(i);
    if (Math.random() > 0.5) {
      ch = 'x' + ch.toString(16);
    }
    out += '&#' + ch + ';';
  }

  return out;
}

function tag() {
  var tag = '(?!(?:'
    + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'
    + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'
    + '|span|br|wbr|ins|del|img)\\b)\\w+';

  return tag;
}

function replace(regex, opt) {
  regex = regex.source;
  opt = opt || '';
  return function self(name, val) {
    if (!name) return new RegExp(regex, opt);
    regex = regex.replace(name, val.source || val);
    return self;
  };
}

function noop() {}
noop.exec = noop;

/**
 * Marked
 */

function marked(src, opt) {
  setOptions(opt);
  return parse(block.lexer(src));
}

/**
 * Options
 */

var options
  , defaults;

function setOptions(opt) {
  if (!opt) opt = defaults;
  if (options === opt) return;
  options = opt;

  if (options.gfm) {
    block.fences = block.gfm.fences;
    block.paragraph = block.gfm.paragraph;
    inline.text = inline.gfm.text;
    inline.url = inline.gfm.url;
  } else {
    block.fences = block.normal.fences;
    block.paragraph = block.normal.paragraph;
    inline.text = inline.normal.text;
    inline.url = inline.normal.url;
  }

  if (options.pedantic) {
    inline.em = inline.pedantic.em;
    inline.strong = inline.pedantic.strong;
  } else {
    inline.em = inline.normal.em;
    inline.strong = inline.normal.strong;
  }
}

marked.options =
marked.setOptions = function(opt) {
  defaults = opt;
  setOptions(opt);
  return marked;
};

marked.setOptions({
  gfm: true,
  pedantic: false,
  sanitize: false,
  highlight: null
});

/**
 * Expose
 */

marked.parser = function(src, opt) {
  setOptions(opt);
  return parse(src);
};

marked.lexer = function(src, opt) {
  setOptions(opt);
  return block.lexer(src);
};

marked.parse = marked;

if (typeof module !== 'undefined') {
  module.exports = marked;
} else {
  this.marked = marked;
}

}).call(function() {
  return this || (typeof window !== 'undefined' ? window : global);
}());



});

define('handlebars', function (require, exports, module) {


// lib/handlebars/base.js

/*jshint eqnull:true*/
this.Handlebars = {};

(function(Handlebars) {

Handlebars.VERSION = "1.0.rc.1";

Handlebars.helpers  = {};
Handlebars.partials = {};

Handlebars.registerHelper = function(name, fn, inverse) {
  if(inverse) { fn.not = inverse; }
  this.helpers[name] = fn;
};

Handlebars.registerPartial = function(name, str) {
  this.partials[name] = str;
};

Handlebars.registerHelper('helperMissing', function(arg) {
  if(arguments.length === 2) {
    return undefined;
  } else {
    throw new Error("Could not find property '" + arg + "'");
  }
});

var toString = Object.prototype.toString, functionType = "[object Function]";

Handlebars.registerHelper('blockHelperMissing', function(context, options) {
  var inverse = options.inverse || function() {}, fn = options.fn;


  var ret = "";
  var type = toString.call(context);

  if(type === functionType) { context = context.call(this); }

  if(context === true) {
    return fn(this);
  } else if(context === false || context == null) {
    return inverse(this);
  } else if(type === "[object Array]") {
    if(context.length > 0) {
      return Handlebars.helpers.each(context, options);
    } else {
      return inverse(this);
    }
  } else {
    return fn(context);
  }
});

Handlebars.K = function() {};

Handlebars.createFrame = Object.create || function(object) {
  Handlebars.K.prototype = object;
  var obj = new Handlebars.K();
  Handlebars.K.prototype = null;
  return obj;
};

Handlebars.registerHelper('each', function(context, options) {
  var fn = options.fn, inverse = options.inverse;
  var ret = "", data;

  if (options.data) {
    data = Handlebars.createFrame(options.data);
  }

  if(context && context.length > 0) {
    for(var i=0, j=context.length; i<j; i++) {
      if (data) { data.index = i; }
      ret = ret + fn(context[i], { data: data });
    }
  } else {
    ret = inverse(this);
  }
  return ret;
});

Handlebars.registerHelper('if', function(context, options) {
  var type = toString.call(context);
  if(type === functionType) { context = context.call(this); }

  if(!context || Handlebars.Utils.isEmpty(context)) {
    return options.inverse(this);
  } else {
    return options.fn(this);
  }
});

Handlebars.registerHelper('unless', function(context, options) {
  var fn = options.fn, inverse = options.inverse;
  options.fn = inverse;
  options.inverse = fn;

  return Handlebars.helpers['if'].call(this, context, options);
});

Handlebars.registerHelper('with', function(context, options) {
  return options.fn(context);
});

Handlebars.registerHelper('log', function(context) {
  Handlebars.log(context);
});

}(this.Handlebars));
;
// lib/handlebars/compiler/parser.js
/* Jison generated parser */
var handlebars = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"program":4,"EOF":5,"statements":6,"simpleInverse":7,"statement":8,"openInverse":9,"closeBlock":10,"openBlock":11,"mustache":12,"partial":13,"CONTENT":14,"COMMENT":15,"OPEN_BLOCK":16,"inMustache":17,"CLOSE":18,"OPEN_INVERSE":19,"OPEN_ENDBLOCK":20,"path":21,"OPEN":22,"OPEN_UNESCAPED":23,"OPEN_PARTIAL":24,"params":25,"hash":26,"DATA":27,"param":28,"STRING":29,"INTEGER":30,"BOOLEAN":31,"hashSegments":32,"hashSegment":33,"ID":34,"EQUALS":35,"pathSegments":36,"SEP":37,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"CONTENT",15:"COMMENT",16:"OPEN_BLOCK",18:"CLOSE",19:"OPEN_INVERSE",20:"OPEN_ENDBLOCK",22:"OPEN",23:"OPEN_UNESCAPED",24:"OPEN_PARTIAL",27:"DATA",29:"STRING",30:"INTEGER",31:"BOOLEAN",34:"ID",35:"EQUALS",37:"SEP"},
productions_: [0,[3,2],[4,3],[4,1],[4,0],[6,1],[6,2],[8,3],[8,3],[8,1],[8,1],[8,1],[8,1],[11,3],[9,3],[10,3],[12,3],[12,3],[13,3],[13,4],[7,2],[17,3],[17,2],[17,2],[17,1],[17,1],[25,2],[25,1],[28,1],[28,1],[28,1],[28,1],[28,1],[26,1],[32,2],[32,1],[33,3],[33,3],[33,3],[33,3],[33,3],[21,1],[36,3],[36,1]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = new yy.ProgramNode($$[$0-2], $$[$0]); 
break;
case 3: this.$ = new yy.ProgramNode($$[$0]); 
break;
case 4: this.$ = new yy.ProgramNode([]); 
break;
case 5: this.$ = [$$[$0]]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = new yy.BlockNode($$[$0-2], $$[$0-1].inverse, $$[$0-1], $$[$0]); 
break;
case 8: this.$ = new yy.BlockNode($$[$0-2], $$[$0-1], $$[$0-1].inverse, $$[$0]); 
break;
case 9: this.$ = $$[$0]; 
break;
case 10: this.$ = $$[$0]; 
break;
case 11: this.$ = new yy.ContentNode($$[$0]); 
break;
case 12: this.$ = new yy.CommentNode($$[$0]); 
break;
case 13: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]); 
break;
case 14: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]); 
break;
case 15: this.$ = $$[$0-1]; 
break;
case 16: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]); 
break;
case 17: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1], true); 
break;
case 18: this.$ = new yy.PartialNode($$[$0-1]); 
break;
case 19: this.$ = new yy.PartialNode($$[$0-2], $$[$0-1]); 
break;
case 20: 
break;
case 21: this.$ = [[$$[$0-2]].concat($$[$0-1]), $$[$0]]; 
break;
case 22: this.$ = [[$$[$0-1]].concat($$[$0]), null]; 
break;
case 23: this.$ = [[$$[$0-1]], $$[$0]]; 
break;
case 24: this.$ = [[$$[$0]], null]; 
break;
case 25: this.$ = [[new yy.DataNode($$[$0])], null]; 
break;
case 26: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 27: this.$ = [$$[$0]]; 
break;
case 28: this.$ = $$[$0]; 
break;
case 29: this.$ = new yy.StringNode($$[$0]); 
break;
case 30: this.$ = new yy.IntegerNode($$[$0]); 
break;
case 31: this.$ = new yy.BooleanNode($$[$0]); 
break;
case 32: this.$ = new yy.DataNode($$[$0]); 
break;
case 33: this.$ = new yy.HashNode($$[$0]); 
break;
case 34: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 35: this.$ = [$$[$0]]; 
break;
case 36: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 37: this.$ = [$$[$0-2], new yy.StringNode($$[$0])]; 
break;
case 38: this.$ = [$$[$0-2], new yy.IntegerNode($$[$0])]; 
break;
case 39: this.$ = [$$[$0-2], new yy.BooleanNode($$[$0])]; 
break;
case 40: this.$ = [$$[$0-2], new yy.DataNode($$[$0])]; 
break;
case 41: this.$ = new yy.IdNode($$[$0]); 
break;
case 42: $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 43: this.$ = [$$[$0]]; 
break;
}
},
table: [{3:1,4:2,5:[2,4],6:3,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],22:[1,13],23:[1,14],24:[1,15]},{1:[3]},{5:[1,16]},{5:[2,3],7:17,8:18,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,19],20:[2,3],22:[1,13],23:[1,14],24:[1,15]},{5:[2,5],14:[2,5],15:[2,5],16:[2,5],19:[2,5],20:[2,5],22:[2,5],23:[2,5],24:[2,5]},{4:20,6:3,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,4],22:[1,13],23:[1,14],24:[1,15]},{4:21,6:3,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,4],22:[1,13],23:[1,14],24:[1,15]},{5:[2,9],14:[2,9],15:[2,9],16:[2,9],19:[2,9],20:[2,9],22:[2,9],23:[2,9],24:[2,9]},{5:[2,10],14:[2,10],15:[2,10],16:[2,10],19:[2,10],20:[2,10],22:[2,10],23:[2,10],24:[2,10]},{5:[2,11],14:[2,11],15:[2,11],16:[2,11],19:[2,11],20:[2,11],22:[2,11],23:[2,11],24:[2,11]},{5:[2,12],14:[2,12],15:[2,12],16:[2,12],19:[2,12],20:[2,12],22:[2,12],23:[2,12],24:[2,12]},{17:22,21:23,27:[1,24],34:[1,26],36:25},{17:27,21:23,27:[1,24],34:[1,26],36:25},{17:28,21:23,27:[1,24],34:[1,26],36:25},{17:29,21:23,27:[1,24],34:[1,26],36:25},{21:30,34:[1,26],36:25},{1:[2,1]},{6:31,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],22:[1,13],23:[1,14],24:[1,15]},{5:[2,6],14:[2,6],15:[2,6],16:[2,6],19:[2,6],20:[2,6],22:[2,6],23:[2,6],24:[2,6]},{17:22,18:[1,32],21:23,27:[1,24],34:[1,26],36:25},{10:33,20:[1,34]},{10:35,20:[1,34]},{18:[1,36]},{18:[2,24],21:41,25:37,26:38,27:[1,45],28:39,29:[1,42],30:[1,43],31:[1,44],32:40,33:46,34:[1,47],36:25},{18:[2,25]},{18:[2,41],27:[2,41],29:[2,41],30:[2,41],31:[2,41],34:[2,41],37:[1,48]},{18:[2,43],27:[2,43],29:[2,43],30:[2,43],31:[2,43],34:[2,43],37:[2,43]},{18:[1,49]},{18:[1,50]},{18:[1,51]},{18:[1,52],21:53,34:[1,26],36:25},{5:[2,2],8:18,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,2],22:[1,13],23:[1,14],24:[1,15]},{14:[2,20],15:[2,20],16:[2,20],19:[2,20],22:[2,20],23:[2,20],24:[2,20]},{5:[2,7],14:[2,7],15:[2,7],16:[2,7],19:[2,7],20:[2,7],22:[2,7],23:[2,7],24:[2,7]},{21:54,34:[1,26],36:25},{5:[2,8],14:[2,8],15:[2,8],16:[2,8],19:[2,8],20:[2,8],22:[2,8],23:[2,8],24:[2,8]},{14:[2,14],15:[2,14],16:[2,14],19:[2,14],20:[2,14],22:[2,14],23:[2,14],24:[2,14]},{18:[2,22],21:41,26:55,27:[1,45],28:56,29:[1,42],30:[1,43],31:[1,44],32:40,33:46,34:[1,47],36:25},{18:[2,23]},{18:[2,27],27:[2,27],29:[2,27],30:[2,27],31:[2,27],34:[2,27]},{18:[2,33],33:57,34:[1,58]},{18:[2,28],27:[2,28],29:[2,28],30:[2,28],31:[2,28],34:[2,28]},{18:[2,29],27:[2,29],29:[2,29],30:[2,29],31:[2,29],34:[2,29]},{18:[2,30],27:[2,30],29:[2,30],30:[2,30],31:[2,30],34:[2,30]},{18:[2,31],27:[2,31],29:[2,31],30:[2,31],31:[2,31],34:[2,31]},{18:[2,32],27:[2,32],29:[2,32],30:[2,32],31:[2,32],34:[2,32]},{18:[2,35],34:[2,35]},{18:[2,43],27:[2,43],29:[2,43],30:[2,43],31:[2,43],34:[2,43],35:[1,59],37:[2,43]},{34:[1,60]},{14:[2,13],15:[2,13],16:[2,13],19:[2,13],20:[2,13],22:[2,13],23:[2,13],24:[2,13]},{5:[2,16],14:[2,16],15:[2,16],16:[2,16],19:[2,16],20:[2,16],22:[2,16],23:[2,16],24:[2,16]},{5:[2,17],14:[2,17],15:[2,17],16:[2,17],19:[2,17],20:[2,17],22:[2,17],23:[2,17],24:[2,17]},{5:[2,18],14:[2,18],15:[2,18],16:[2,18],19:[2,18],20:[2,18],22:[2,18],23:[2,18],24:[2,18]},{18:[1,61]},{18:[1,62]},{18:[2,21]},{18:[2,26],27:[2,26],29:[2,26],30:[2,26],31:[2,26],34:[2,26]},{18:[2,34],34:[2,34]},{35:[1,59]},{21:63,27:[1,67],29:[1,64],30:[1,65],31:[1,66],34:[1,26],36:25},{18:[2,42],27:[2,42],29:[2,42],30:[2,42],31:[2,42],34:[2,42],37:[2,42]},{5:[2,19],14:[2,19],15:[2,19],16:[2,19],19:[2,19],20:[2,19],22:[2,19],23:[2,19],24:[2,19]},{5:[2,15],14:[2,15],15:[2,15],16:[2,15],19:[2,15],20:[2,15],22:[2,15],23:[2,15],24:[2,15]},{18:[2,36],34:[2,36]},{18:[2,37],34:[2,37]},{18:[2,38],34:[2,38]},{18:[2,39],34:[2,39]},{18:[2,40],34:[2,40]}],
defaultActions: {16:[2,1],24:[2,25],38:[2,23],55:[2,21]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};
/* Jison generated lexer */
var lexer = (function(){
var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    }});
lexer.options = {};
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0:
                                   if(yy_.yytext.slice(-1) !== "\\") this.begin("mu");
                                   if(yy_.yytext.slice(-1) === "\\") yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-1), this.begin("emu");
                                   if(yy_.yytext) return 14;
                                 
break;
case 1: return 14; 
break;
case 2:
                                   if(yy_.yytext.slice(-1) !== "\\") this.popState();
                                   if(yy_.yytext.slice(-1) === "\\") yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-1);
                                   return 14;
                                 
break;
case 3: return 24; 
break;
case 4: return 16; 
break;
case 5: return 20; 
break;
case 6: return 19; 
break;
case 7: return 19; 
break;
case 8: return 23; 
break;
case 9: return 23; 
break;
case 10: yy_.yytext = yy_.yytext.substr(3,yy_.yyleng-5); this.popState(); return 15; 
break;
case 11: return 22; 
break;
case 12: return 35; 
break;
case 13: return 34; 
break;
case 14: return 34; 
break;
case 15: return 37; 
break;
case 16: /*ignore whitespace*/ 
break;
case 17: this.popState(); return 18; 
break;
case 18: this.popState(); return 18; 
break;
case 19: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace(/\\"/g,'"'); return 29; 
break;
case 20: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace(/\\"/g,'"'); return 29; 
break;
case 21: yy_.yytext = yy_.yytext.substr(1); return 27; 
break;
case 22: return 31; 
break;
case 23: return 31; 
break;
case 24: return 30; 
break;
case 25: return 34; 
break;
case 26: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 34; 
break;
case 27: return 'INVALID'; 
break;
case 28: return 5; 
break;
}
};
lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|$)))/,/^(?:\{\{>)/,/^(?:\{\{#)/,/^(?:\{\{\/)/,/^(?:\{\{\^)/,/^(?:\{\{\s*else\b)/,/^(?:\{\{\{)/,/^(?:\{\{&)/,/^(?:\{\{![\s\S]*?\}\})/,/^(?:\{\{)/,/^(?:=)/,/^(?:\.(?=[} ]))/,/^(?:\.\.)/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}\}\})/,/^(?:\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@[a-zA-Z]+)/,/^(?:true(?=[}\s]))/,/^(?:false(?=[}\s]))/,/^(?:[0-9]+(?=[}\s]))/,/^(?:[a-zA-Z0-9_$-]+(?=[=}\s\/.]))/,/^(?:\[[^\]]*\])/,/^(?:.)/,/^(?:$)/];
lexer.conditions = {"mu":{"rules":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"inclusive":false},"emu":{"rules":[2],"inclusive":false},"INITIAL":{"rules":[0,1,28],"inclusive":true}};
return lexer;})()
parser.lexer = lexer;
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = handlebars;
exports.Parser = handlebars.Parser;
exports.parse = function () { return handlebars.parse.apply(handlebars, arguments); }
exports.main = function commonjsMain(args) {
    if (!args[1])
        throw new Error('Usage: '+args[0]+' FILE');
    var source, cwd;
    if (typeof process !== 'undefined') {
        source = require('fs').readFileSync(require('path').resolve(args[1]), "utf8");
    } else {
        source = require("file").path(require("file").cwd()).join(args[1]).read({charset: "utf-8"});
    }
    return exports.parser.parse(source);
}
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(typeof process !== 'undefined' ? process.argv.slice(1) : require("system").args);
}
};
;
// lib/handlebars/compiler/base.js
Handlebars.Parser = handlebars;

Handlebars.parse = function(string) {
  Handlebars.Parser.yy = Handlebars.AST;
  return Handlebars.Parser.parse(string);
};

Handlebars.print = function(ast) {
  return new Handlebars.PrintVisitor().accept(ast);
};

Handlebars.logger = {
  DEBUG: 0, INFO: 1, WARN: 2, ERROR: 3, level: 3,

  // override in the host environment
  log: function(level, str) {}
};

Handlebars.log = function(level, str) { Handlebars.logger.log(level, str); };
;
// lib/handlebars/compiler/ast.js
(function() {

  Handlebars.AST = {};

  Handlebars.AST.ProgramNode = function(statements, inverse) {
    this.type = "program";
    this.statements = statements;
    if(inverse) { this.inverse = new Handlebars.AST.ProgramNode(inverse); }
  };

  Handlebars.AST.MustacheNode = function(rawParams, hash, unescaped) {
    this.type = "mustache";
    this.escaped = !unescaped;
    this.hash = hash;

    var id = this.id = rawParams[0];
    var params = this.params = rawParams.slice(1);

    // a mustache is an eligible helper if:
    // * its id is simple (a single part, not `this` or `..`)
    var eligibleHelper = this.eligibleHelper = id.isSimple;

    // a mustache is definitely a helper if:
    // * it is an eligible helper, and
    // * it has at least one parameter or hash segment
    this.isHelper = eligibleHelper && (params.length || hash);

    // if a mustache is an eligible helper but not a definite
    // helper, it is ambiguous, and will be resolved in a later
    // pass or at runtime.
  };

  Handlebars.AST.PartialNode = function(id, context) {
    this.type    = "partial";

    // TODO: disallow complex IDs

    this.id      = id;
    this.context = context;
  };

  var verifyMatch = function(open, close) {
    if(open.original !== close.original) {
      throw new Handlebars.Exception(open.original + " doesn't match " + close.original);
    }
  };

  Handlebars.AST.BlockNode = function(mustache, program, inverse, close) {
    verifyMatch(mustache.id, close);
    this.type = "block";
    this.mustache = mustache;
    this.program  = program;
    this.inverse  = inverse;

    if (this.inverse && !this.program) {
      this.isInverse = true;
    }
  };

  Handlebars.AST.ContentNode = function(string) {
    this.type = "content";
    this.string = string;
  };

  Handlebars.AST.HashNode = function(pairs) {
    this.type = "hash";
    this.pairs = pairs;
  };

  Handlebars.AST.IdNode = function(parts) {
    this.type = "ID";
    this.original = parts.join(".");

    var dig = [], depth = 0;

    for(var i=0,l=parts.length; i<l; i++) {
      var part = parts[i];

      if(part === "..") { depth++; }
      else if(part === "." || part === "this") { this.isScoped = true; }
      else { dig.push(part); }
    }

    this.parts    = dig;
    this.string   = dig.join('.');
    this.depth    = depth;

    // an ID is simple if it only has one part, and that part is not
    // `..` or `this`.
    this.isSimple = parts.length === 1 && !this.isScoped && depth === 0;
  };

  Handlebars.AST.DataNode = function(id) {
    this.type = "DATA";
    this.id = id;
  };

  Handlebars.AST.StringNode = function(string) {
    this.type = "STRING";
    this.string = string;
  };

  Handlebars.AST.IntegerNode = function(integer) {
    this.type = "INTEGER";
    this.integer = integer;
  };

  Handlebars.AST.BooleanNode = function(bool) {
    this.type = "BOOLEAN";
    this.bool = bool;
  };

  Handlebars.AST.CommentNode = function(comment) {
    this.type = "comment";
    this.comment = comment;
  };

})();;
// lib/handlebars/utils.js
Handlebars.Exception = function(message) {
  var tmp = Error.prototype.constructor.apply(this, arguments);

  for (var p in tmp) {
    if (tmp.hasOwnProperty(p)) { this[p] = tmp[p]; }
  }

  this.message = tmp.message;
};
Handlebars.Exception.prototype = new Error();

// Build out our basic SafeString type
Handlebars.SafeString = function(string) {
  this.string = string;
};
Handlebars.SafeString.prototype.toString = function() {
  return this.string.toString();
};

(function() {
  var escape = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#x27;",
    "`": "&#x60;"
  };

  var badChars = /[&<>"'`]/g;
  var possible = /[&<>"'`]/;

  var escapeChar = function(chr) {
    return escape[chr] || "&amp;";
  };

  Handlebars.Utils = {
    escapeExpression: function(string) {
      // don't escape SafeStrings, since they're already safe
      if (string instanceof Handlebars.SafeString) {
        return string.toString();
      } else if (string == null || string === false) {
        return "";
      }

      if(!possible.test(string)) { return string; }
      return string.replace(badChars, escapeChar);
    },

    isEmpty: function(value) {
      if (typeof value === "undefined") {
        return true;
      } else if (value === null) {
        return true;
      } else if (value === false) {
        return true;
      } else if(Object.prototype.toString.call(value) === "[object Array]" && value.length === 0) {
        return true;
      } else {
        return false;
      }
    }
  };
})();;
// lib/handlebars/compiler/compiler.js

/*jshint eqnull:true*/
Handlebars.Compiler = function() {};
Handlebars.JavaScriptCompiler = function() {};

(function(Compiler, JavaScriptCompiler) {
  // the foundHelper register will disambiguate helper lookup from finding a
  // function in a context. This is necessary for mustache compatibility, which
  // requires that context functions in blocks are evaluated by blockHelperMissing,
  // and then proceed as if the resulting value was provided to blockHelperMissing.

  Compiler.prototype = {
    compiler: Compiler,

    disassemble: function() {
      var opcodes = this.opcodes, opcode, out = [], params, param;

      for (var i=0, l=opcodes.length; i<l; i++) {
        opcode = opcodes[i];

        if (opcode.opcode === 'DECLARE') {
          out.push("DECLARE " + opcode.name + "=" + opcode.value);
        } else {
          params = [];
          for (var j=0; j<opcode.args.length; j++) {
            param = opcode.args[j];
            if (typeof param === "string") {
              param = "\"" + param.replace("\n", "\\n") + "\"";
            }
            params.push(param);
          }
          out.push(opcode.opcode + " " + params.join(" "));
        }
      }

      return out.join("\n");
    },

    guid: 0,

    compile: function(program, options) {
      this.children = [];
      this.depths = {list: []};
      this.options = options;

      // These changes will propagate to the other compiler components
      var knownHelpers = this.options.knownHelpers;
      this.options.knownHelpers = {
        'helperMissing': true,
        'blockHelperMissing': true,
        'each': true,
        'if': true,
        'unless': true,
        'with': true,
        'log': true
      };
      if (knownHelpers) {
        for (var name in knownHelpers) {
          this.options.knownHelpers[name] = knownHelpers[name];
        }
      }

      return this.program(program);
    },

    accept: function(node) {
      return this[node.type](node);
    },

    program: function(program) {
      var statements = program.statements, statement;
      this.opcodes = [];

      for(var i=0, l=statements.length; i<l; i++) {
        statement = statements[i];
        this[statement.type](statement);
      }
      this.isSimple = l === 1;

      this.depths.list = this.depths.list.sort(function(a, b) {
        return a - b;
      });

      return this;
    },

    compileProgram: function(program) {
      var result = new this.compiler().compile(program, this.options);
      var guid = this.guid++, depth;

      this.usePartial = this.usePartial || result.usePartial;

      this.children[guid] = result;

      for(var i=0, l=result.depths.list.length; i<l; i++) {
        depth = result.depths.list[i];

        if(depth < 2) { continue; }
        else { this.addDepth(depth - 1); }
      }

      return guid;
    },

    block: function(block) {
      var mustache = block.mustache,
          program = block.program,
          inverse = block.inverse;

      if (program) {
        program = this.compileProgram(program);
      }

      if (inverse) {
        inverse = this.compileProgram(inverse);
      }

      var type = this.classifyMustache(mustache);

      if (type === "helper") {
        this.helperMustache(mustache, program, inverse);
      } else if (type === "simple") {
        this.simpleMustache(mustache);

        // now that the simple mustache is resolved, we need to
        // evaluate it by executing `blockHelperMissing`
        this.opcode('pushProgram', program);
        this.opcode('pushProgram', inverse);
        this.opcode('pushLiteral', '{}');
        this.opcode('blockValue');
      } else {
        this.ambiguousMustache(mustache, program, inverse);

        // now that the simple mustache is resolved, we need to
        // evaluate it by executing `blockHelperMissing`
        this.opcode('pushProgram', program);
        this.opcode('pushProgram', inverse);
        this.opcode('pushLiteral', '{}');
        this.opcode('ambiguousBlockValue');
      }

      this.opcode('append');
    },

    hash: function(hash) {
      var pairs = hash.pairs, pair, val;

      this.opcode('push', '{}');

      for(var i=0, l=pairs.length; i<l; i++) {
        pair = pairs[i];
        val  = pair[1];

        this.accept(val);
        this.opcode('assignToHash', pair[0]);
      }
    },

    partial: function(partial) {
      var id = partial.id;
      this.usePartial = true;

      if(partial.context) {
        this.ID(partial.context);
      } else {
        this.opcode('push', 'depth0');
      }

      this.opcode('invokePartial', id.original);
      this.opcode('append');
    },

    content: function(content) {
      this.opcode('appendContent', content.string);
    },

    mustache: function(mustache) {
      var options = this.options;
      var type = this.classifyMustache(mustache);

      if (type === "simple") {
        this.simpleMustache(mustache);
      } else if (type === "helper") {
        this.helperMustache(mustache);
      } else {
        this.ambiguousMustache(mustache);
      }

      if(mustache.escaped && !options.noEscape) {
        this.opcode('appendEscaped');
      } else {
        this.opcode('append');
      }
    },

    ambiguousMustache: function(mustache, program, inverse) {
      var id = mustache.id, name = id.parts[0];

      this.opcode('getContext', id.depth);

      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);

      this.opcode('invokeAmbiguous', name);
    },

    simpleMustache: function(mustache, program, inverse) {
      var id = mustache.id;

      if (id.type === 'DATA') {
        this.DATA(id);
      } else if (id.parts.length) {
        this.ID(id);
      } else {
        // Simplified ID for `this`
        this.addDepth(id.depth);
        this.opcode('getContext', id.depth);
        this.opcode('pushContext');
      }

      this.opcode('resolvePossibleLambda');
    },

    helperMustache: function(mustache, program, inverse) {
      var params = this.setupFullMustacheParams(mustache, program, inverse),
          name = mustache.id.parts[0];

      if (this.options.knownHelpers[name]) {
        this.opcode('invokeKnownHelper', params.length, name);
      } else if (this.knownHelpersOnly) {
        throw new Error("You specified knownHelpersOnly, but used the unknown helper " + name);
      } else {
        this.opcode('invokeHelper', params.length, name);
      }
    },

    ID: function(id) {
      this.addDepth(id.depth);
      this.opcode('getContext', id.depth);

      var name = id.parts[0];
      if (!name) {
        this.opcode('pushContext');
      } else {
        this.opcode('lookupOnContext', id.parts[0]);
      }

      for(var i=1, l=id.parts.length; i<l; i++) {
        this.opcode('lookup', id.parts[i]);
      }
    },

    DATA: function(data) {
      this.options.data = true;
      this.opcode('lookupData', data.id);
    },

    STRING: function(string) {
      this.opcode('pushString', string.string);
    },

    INTEGER: function(integer) {
      this.opcode('pushLiteral', integer.integer);
    },

    BOOLEAN: function(bool) {
      this.opcode('pushLiteral', bool.bool);
    },

    comment: function() {},

    // HELPERS
    opcode: function(name) {
      this.opcodes.push({ opcode: name, args: [].slice.call(arguments, 1) });
    },

    declare: function(name, value) {
      this.opcodes.push({ opcode: 'DECLARE', name: name, value: value });
    },

    addDepth: function(depth) {
      if(isNaN(depth)) { throw new Error("EWOT"); }
      if(depth === 0) { return; }

      if(!this.depths[depth]) {
        this.depths[depth] = true;
        this.depths.list.push(depth);
      }
    },

    classifyMustache: function(mustache) {
      var isHelper   = mustache.isHelper;
      var isEligible = mustache.eligibleHelper;
      var options    = this.options;

      // if ambiguous, we can possibly resolve the ambiguity now
      if (isEligible && !isHelper) {
        var name = mustache.id.parts[0];

        if (options.knownHelpers[name]) {
          isHelper = true;
        } else if (options.knownHelpersOnly) {
          isEligible = false;
        }
      }

      if (isHelper) { return "helper"; }
      else if (isEligible) { return "ambiguous"; }
      else { return "simple"; }
    },

    pushParams: function(params) {
      var i = params.length, param;

      while(i--) {
        param = params[i];

        if(this.options.stringParams) {
          if(param.depth) {
            this.addDepth(param.depth);
          }

          this.opcode('getContext', param.depth || 0);
          this.opcode('pushStringParam', param.string);
        } else {
          this[param.type](param);
        }
      }
    },

    setupMustacheParams: function(mustache) {
      var params = mustache.params;
      this.pushParams(params);

      if(mustache.hash) {
        this.hash(mustache.hash);
      } else {
        this.opcode('pushLiteral', '{}');
      }

      return params;
    },

    // this will replace setupMustacheParams when we're done
    setupFullMustacheParams: function(mustache, program, inverse) {
      var params = mustache.params;
      this.pushParams(params);

      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);

      if(mustache.hash) {
        this.hash(mustache.hash);
      } else {
        this.opcode('pushLiteral', '{}');
      }

      return params;
    }
  };

  var Literal = function(value) {
    this.value = value;
  };

  JavaScriptCompiler.prototype = {
    // PUBLIC API: You can override these methods in a subclass to provide
    // alternative compiled forms for name lookup and buffering semantics
    nameLookup: function(parent, name, type) {
      if (/^[0-9]+$/.test(name)) {
        return parent + "[" + name + "]";
      } else if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
        return parent + "." + name;
      }
      else {
        return parent + "['" + name + "']";
      }
    },

    appendToBuffer: function(string) {
      if (this.environment.isSimple) {
        return "return " + string + ";";
      } else {
        return "buffer += " + string + ";";
      }
    },

    initializeBuffer: function() {
      return this.quotedString("");
    },

    namespace: "Handlebars",
    // END PUBLIC API

    compile: function(environment, options, context, asObject) {
      this.environment = environment;
      this.options = options || {};

      Handlebars.log(Handlebars.logger.DEBUG, this.environment.disassemble() + "\n\n");

      this.name = this.environment.name;
      this.isChild = !!context;
      this.context = context || {
        programs: [],
        aliases: { }
      };

      this.preamble();

      this.stackSlot = 0;
      this.stackVars = [];
      this.registers = { list: [] };
      this.compileStack = [];

      this.compileChildren(environment, options);

      var opcodes = environment.opcodes, opcode;

      this.i = 0;

      for(l=opcodes.length; this.i<l; this.i++) {
        opcode = opcodes[this.i];

        if(opcode.opcode === 'DECLARE') {
          this[opcode.name] = opcode.value;
        } else {
          this[opcode.opcode].apply(this, opcode.args);
        }
      }

      return this.createFunctionContext(asObject);
    },

    nextOpcode: function() {
      var opcodes = this.environment.opcodes, opcode = opcodes[this.i + 1];
      return opcodes[this.i + 1];
    },

    eat: function(opcode) {
      this.i = this.i + 1;
    },

    preamble: function() {
      var out = [];

      if (!this.isChild) {
        var namespace = this.namespace;
        var copies = "helpers = helpers || " + namespace + ".helpers;";
        if (this.environment.usePartial) { copies = copies + " partials = partials || " + namespace + ".partials;"; }
        if (this.options.data) { copies = copies + " data = data || {};"; }
        out.push(copies);
      } else {
        out.push('');
      }

      if (!this.environment.isSimple) {
        out.push(", buffer = " + this.initializeBuffer());
      } else {
        out.push("");
      }

      // track the last context pushed into place to allow skipping the
      // getContext opcode when it would be a noop
      this.lastContext = 0;
      this.source = out;
    },

    createFunctionContext: function(asObject) {
      var locals = this.stackVars.concat(this.registers.list);

      if(locals.length > 0) {
        this.source[1] = this.source[1] + ", " + locals.join(", ");
      }

      // Generate minimizer alias mappings
      if (!this.isChild) {
        var aliases = [];
        for (var alias in this.context.aliases) {
          this.source[1] = this.source[1] + ', ' + alias + '=' + this.context.aliases[alias];
        }
      }

      if (this.source[1]) {
        this.source[1] = "var " + this.source[1].substring(2) + ";";
      }

      // Merge children
      if (!this.isChild) {
        this.source[1] += '\n' + this.context.programs.join('\n') + '\n';
      }

      if (!this.environment.isSimple) {
        this.source.push("return buffer;");
      }

      var params = this.isChild ? ["depth0", "data"] : ["Handlebars", "depth0", "helpers", "partials", "data"];

      for(var i=0, l=this.environment.depths.list.length; i<l; i++) {
        params.push("depth" + this.environment.depths.list[i]);
      }

      if (asObject) {
        params.push(this.source.join("\n  "));

        return Function.apply(this, params);
      } else {
        var functionSource = 'function ' + (this.name || '') + '(' + params.join(',') + ') {\n  ' + this.source.join("\n  ") + '}';
        Handlebars.log(Handlebars.logger.DEBUG, functionSource + "\n\n");
        return functionSource;
      }
    },

    // [blockValue]
    //
    // On stack, before: hash, inverse, program, value
    // On stack, after: return value of blockHelperMissing
    //
    // The purpose of this opcode is to take a block of the form
    // `{{#foo}}...{{/foo}}`, resolve the value of `foo`, and
    // replace it on the stack with the result of properly
    // invoking blockHelperMissing.
    blockValue: function() {
      this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';

      var params = ["depth0"];
      this.setupParams(0, params);

      this.replaceStack(function(current) {
        params.splice(1, 0, current);
        return current + " = blockHelperMissing.call(" + params.join(", ") + ")";
      });
    },

    // [ambiguousBlockValue]
    //
    // On stack, before: hash, inverse, program, value
    // Compiler value, before: lastHelper=value of last found helper, if any
    // On stack, after, if no lastHelper: same as [blockValue]
    // On stack, after, if lastHelper: value
    ambiguousBlockValue: function() {
      this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';

      var params = ["depth0"];
      this.setupParams(0, params);

      var current = this.topStack();
      params.splice(1, 0, current);

      this.source.push("if (!" + this.lastHelper + ") { " + current + " = blockHelperMissing.call(" + params.join(", ") + "); }");
    },

    // [appendContent]
    //
    // On stack, before: ...
    // On stack, after: ...
    //
    // Appends the string value of `content` to the current buffer
    appendContent: function(content) {
      this.source.push(this.appendToBuffer(this.quotedString(content)));
    },

    // [append]
    //
    // On stack, before: value, ...
    // On stack, after: ...
    //
    // Coerces `value` to a String and appends it to the current buffer.
    //
    // If `value` is truthy, or 0, it is coerced into a string and appended
    // Otherwise, the empty string is appended
    append: function() {
      var local = this.popStack();
      this.source.push("if(" + local + " || " + local + " === 0) { " + this.appendToBuffer(local) + " }");
      if (this.environment.isSimple) {
        this.source.push("else { " + this.appendToBuffer("''") + " }");
      }
    },

    // [appendEscaped]
    //
    // On stack, before: value, ...
    // On stack, after: ...
    //
    // Escape `value` and append it to the buffer
    appendEscaped: function() {
      var opcode = this.nextOpcode(), extra = "";
      this.context.aliases.escapeExpression = 'this.escapeExpression';

      if(opcode && opcode.opcode === 'appendContent') {
        extra = " + " + this.quotedString(opcode.args[0]);
        this.eat(opcode);
      }

      this.source.push(this.appendToBuffer("escapeExpression(" + this.popStack() + ")" + extra));
    },

    // [getContext]
    //
    // On stack, before: ...
    // On stack, after: ...
    // Compiler value, after: lastContext=depth
    //
    // Set the value of the `lastContext` compiler value to the depth
    getContext: function(depth) {
      if(this.lastContext !== depth) {
        this.lastContext = depth;
      }
    },

    // [lookupOnContext]
    //
    // On stack, before: ...
    // On stack, after: currentContext[name], ...
    //
    // Looks up the value of `name` on the current context and pushes
    // it onto the stack.
    lookupOnContext: function(name) {
      this.pushStack(this.nameLookup('depth' + this.lastContext, name, 'context'));
    },

    // [pushContext]
    //
    // On stack, before: ...
    // On stack, after: currentContext, ...
    //
    // Pushes the value of the current context onto the stack.
    pushContext: function() {
      this.pushStackLiteral('depth' + this.lastContext);
    },

    // [resolvePossibleLambda]
    //
    // On stack, before: value, ...
    // On stack, after: resolved value, ...
    //
    // If the `value` is a lambda, replace it on the stack by
    // the return value of the lambda
    resolvePossibleLambda: function() {
      this.context.aliases.functionType = '"function"';

      this.replaceStack(function(current) {
        return "typeof " + current + " === functionType ? " + current + "() : " + current;
      });
    },

    // [lookup]
    //
    // On stack, before: value, ...
    // On stack, after: value[name], ...
    //
    // Replace the value on the stack with the result of looking
    // up `name` on `value`
    lookup: function(name) {
      this.replaceStack(function(current) {
        return current + " == null || " + current + " === false ? " + current + " : " + this.nameLookup(current, name, 'context');
      });
    },

    // [lookupData]
    //
    // On stack, before: ...
    // On stack, after: data[id], ...
    //
    // Push the result of looking up `id` on the current data
    lookupData: function(id) {
      this.pushStack(this.nameLookup('data', id, 'data'));
    },

    // [pushStringParam]
    //
    // On stack, before: ...
    // On stack, after: string, currentContext, ...
    //
    // This opcode is designed for use in string mode, which
    // provides the string value of a parameter along with its
    // depth rather than resolving it immediately.
    pushStringParam: function(string) {
      this.pushStackLiteral('depth' + this.lastContext);
      this.pushString(string);
    },

    // [pushString]
    //
    // On stack, before: ...
    // On stack, after: quotedString(string), ...
    //
    // Push a quoted version of `string` onto the stack
    pushString: function(string) {
      this.pushStackLiteral(this.quotedString(string));
    },

    // [push]
    //
    // On stack, before: ...
    // On stack, after: expr, ...
    //
    // Push an expression onto the stack
    push: function(expr) {
      this.pushStack(expr);
    },

    // [pushLiteral]
    //
    // On stack, before: ...
    // On stack, after: value, ...
    //
    // Pushes a value onto the stack. This operation prevents
    // the compiler from creating a temporary variable to hold
    // it.
    pushLiteral: function(value) {
      this.pushStackLiteral(value);
    },

    // [pushProgram]
    //
    // On stack, before: ...
    // On stack, after: program(guid), ...
    //
    // Push a program expression onto the stack. This takes
    // a compile-time guid and converts it into a runtime-accessible
    // expression.
    pushProgram: function(guid) {
      if (guid != null) {
        this.pushStackLiteral(this.programExpression(guid));
      } else {
        this.pushStackLiteral(null);
      }
    },

    // [invokeHelper]
    //
    // On stack, before: hash, inverse, program, params..., ...
    // On stack, after: result of helper invocation
    //
    // Pops off the helper's parameters, invokes the helper,
    // and pushes the helper's return value onto the stack.
    //
    // If the helper is not found, `helperMissing` is called.
    invokeHelper: function(paramSize, name) {
      this.context.aliases.helperMissing = 'helpers.helperMissing';

      var helper = this.lastHelper = this.setupHelper(paramSize, name);
      this.register('foundHelper', helper.name);

      this.pushStack("foundHelper ? foundHelper.call(" +
        helper.callParams + ") " + ": helperMissing.call(" +
        helper.helperMissingParams + ")");
    },

    // [invokeKnownHelper]
    //
    // On stack, before: hash, inverse, program, params..., ...
    // On stack, after: result of helper invocation
    //
    // This operation is used when the helper is known to exist,
    // so a `helperMissing` fallback is not required.
    invokeKnownHelper: function(paramSize, name) {
      var helper = this.setupHelper(paramSize, name);
      this.pushStack(helper.name + ".call(" + helper.callParams + ")");
    },

    // [invokeAmbiguous]
    //
    // On stack, before: hash, inverse, program, params..., ...
    // On stack, after: result of disambiguation
    //
    // This operation is used when an expression like `{{foo}}`
    // is provided, but we don't know at compile-time whether it
    // is a helper or a path.
    //
    // This operation emits more code than the other options,
    // and can be avoided by passing the `knownHelpers` and
    // `knownHelpersOnly` flags at compile-time.
    invokeAmbiguous: function(name) {
      this.context.aliases.functionType = '"function"';

      this.pushStackLiteral('{}');
      var helper = this.setupHelper(0, name);

      var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');
      this.register('foundHelper', helperName);

      var nonHelper = this.nameLookup('depth' + this.lastContext, name, 'context');
      var nextStack = this.nextStack();

      this.source.push('if (foundHelper) { ' + nextStack + ' = foundHelper.call(' + helper.callParams + '); }');
      this.source.push('else { ' + nextStack + ' = ' + nonHelper + '; ' + nextStack + ' = typeof ' + nextStack + ' === functionType ? ' + nextStack + '() : ' + nextStack + '; }');
    },

    // [invokePartial]
    //
    // On stack, before: context, ...
    // On stack after: result of partial invocation
    //
    // This operation pops off a context, invokes a partial with that context,
    // and pushes the result of the invocation back.
    invokePartial: function(name) {
      var params = [this.nameLookup('partials', name, 'partial'), "'" + name + "'", this.popStack(), "helpers", "partials"];

      if (this.options.data) {
        params.push("data");
      }

      this.context.aliases.self = "this";
      this.pushStack("self.invokePartial(" + params.join(", ") + ");");
    },

    // [assignToHash]
    //
    // On stack, before: value, hash, ...
    // On stack, after: hash, ...
    //
    // Pops a value and hash off the stack, assigns `hash[key] = value`
    // and pushes the hash back onto the stack.
    assignToHash: function(key) {
      var value = this.popStack();
      var hash = this.topStack();

      this.source.push(hash + "['" + key + "'] = " + value + ";");
    },

    // HELPERS

    compiler: JavaScriptCompiler,

    compileChildren: function(environment, options) {
      var children = environment.children, child, compiler;

      for(var i=0, l=children.length; i<l; i++) {
        child = children[i];
        compiler = new this.compiler();

        this.context.programs.push('');     // Placeholder to prevent name conflicts for nested children
        var index = this.context.programs.length;
        child.index = index;
        child.name = 'program' + index;
        this.context.programs[index] = compiler.compile(child, options, this.context);
      }
    },

    programExpression: function(guid) {
      this.context.aliases.self = "this";

      if(guid == null) {
        return "self.noop";
      }

      var child = this.environment.children[guid],
          depths = child.depths.list, depth;

      var programParams = [child.index, child.name, "data"];

      for(var i=0, l = depths.length; i<l; i++) {
        depth = depths[i];

        if(depth === 1) { programParams.push("depth0"); }
        else { programParams.push("depth" + (depth - 1)); }
      }

      if(depths.length === 0) {
        return "self.program(" + programParams.join(", ") + ")";
      } else {
        programParams.shift();
        return "self.programWithDepth(" + programParams.join(", ") + ")";
      }
    },

    register: function(name, val) {
      this.useRegister(name);
      this.source.push(name + " = " + val + ";");
    },

    useRegister: function(name) {
      if(!this.registers[name]) {
        this.registers[name] = true;
        this.registers.list.push(name);
      }
    },

    pushStackLiteral: function(item) {
      this.compileStack.push(new Literal(item));
      return item;
    },

    pushStack: function(item) {
      this.source.push(this.incrStack() + " = " + item + ";");
      this.compileStack.push("stack" + this.stackSlot);
      return "stack" + this.stackSlot;
    },

    replaceStack: function(callback) {
      var item = callback.call(this, this.topStack());

      this.source.push(this.topStack() + " = " + item + ";");
      return "stack" + this.stackSlot;
    },

    nextStack: function(skipCompileStack) {
      var name = this.incrStack();
      this.compileStack.push("stack" + this.stackSlot);
      return name;
    },

    incrStack: function() {
      this.stackSlot++;
      if(this.stackSlot > this.stackVars.length) { this.stackVars.push("stack" + this.stackSlot); }
      return "stack" + this.stackSlot;
    },

    popStack: function() {
      var item = this.compileStack.pop();

      if (item instanceof Literal) {
        return item.value;
      } else {
        this.stackSlot--;
        return item;
      }
    },

    topStack: function() {
      var item = this.compileStack[this.compileStack.length - 1];

      if (item instanceof Literal) {
        return item.value;
      } else {
        return item;
      }
    },

    quotedString: function(str) {
      return '"' + str
        .replace(/\\/g, '\\\\')
        .replace(/"/g, '\\"')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r') + '"';
    },

    setupHelper: function(paramSize, name) {
      var params = [];
      this.setupParams(paramSize, params);
      var foundHelper = this.nameLookup('helpers', name, 'helper');

      return {
        params: params,
        name: foundHelper,
        callParams: ["depth0"].concat(params).join(", "),
        helperMissingParams: ["depth0", this.quotedString(name)].concat(params).join(", ")
      };
    },

    // the params and contexts arguments are passed in arrays
    // to fill in
    setupParams: function(paramSize, params) {
      var options = [], contexts = [], param, inverse, program;

      options.push("hash:" + this.popStack());

      inverse = this.popStack();
      program = this.popStack();

      // Avoid setting fn and inverse if neither are set. This allows
      // helpers to do a check for `if (options.fn)`
      if (program || inverse) {
        if (!program) {
          this.context.aliases.self = "this";
          program = "self.noop";
        }

        if (!inverse) {
         this.context.aliases.self = "this";
          inverse = "self.noop";
        }

        options.push("inverse:" + inverse);
        options.push("fn:" + program);
      }

      for(var i=0; i<paramSize; i++) {
        param = this.popStack();
        params.push(param);

        if(this.options.stringParams) {
          contexts.push(this.popStack());
        }
      }

      if (this.options.stringParams) {
        options.push("contexts:[" + contexts.join(",") + "]");
      }

      if(this.options.data) {
        options.push("data:data");
      }

      params.push("{" + options.join(",") + "}");
      return params.join(", ");
    }
  };

  var reservedWords = (
    "break else new var" +
    " case finally return void" +
    " catch for switch while" +
    " continue function this with" +
    " default if throw" +
    " delete in try" +
    " do instanceof typeof" +
    " abstract enum int short" +
    " boolean export interface static" +
    " byte extends long super" +
    " char final native synchronized" +
    " class float package throws" +
    " const goto private transient" +
    " debugger implements protected volatile" +
    " double import public let yield"
  ).split(" ");

  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

  for(var i=0, l=reservedWords.length; i<l; i++) {
    compilerWords[reservedWords[i]] = true;
  }

  JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {
    if(!JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]+$/.test(name)) {
      return true;
    }
    return false;
  };

})(Handlebars.Compiler, Handlebars.JavaScriptCompiler);

Handlebars.precompile = function(string, options) {
  options = options || {};

  var ast = Handlebars.parse(string);
  var environment = new Handlebars.Compiler().compile(ast, options);
  return new Handlebars.JavaScriptCompiler().compile(environment, options);
};

Handlebars.compile = function(string, options) {
  options = options || {};

  var compiled;
  function compile() {
    var ast = Handlebars.parse(string);
    var environment = new Handlebars.Compiler().compile(ast, options);
    var templateSpec = new Handlebars.JavaScriptCompiler().compile(environment, options, undefined, true);
    return Handlebars.template(templateSpec);
  }

  // Template is only compiled on first use and cached after that point.
  return function(context, options) {
    if (!compiled) {
      compiled = compile();
    }
    return compiled.call(this, context, options);
  };
};
;
// lib/handlebars/runtime.js
Handlebars.VM = {
  template: function(templateSpec) {
    // Just add water
    var container = {
      escapeExpression: Handlebars.Utils.escapeExpression,
      invokePartial: Handlebars.VM.invokePartial,
      programs: [],
      program: function(i, fn, data) {
        var programWrapper = this.programs[i];
        if(data) {
          return Handlebars.VM.program(fn, data);
        } else if(programWrapper) {
          return programWrapper;
        } else {
          programWrapper = this.programs[i] = Handlebars.VM.program(fn);
          return programWrapper;
        }
      },
      programWithDepth: Handlebars.VM.programWithDepth,
      noop: Handlebars.VM.noop
    };

    return function(context, options) {
      options = options || {};
      return templateSpec.call(container, Handlebars, context, options.helpers, options.partials, options.data);
    };
  },

  programWithDepth: function(fn, data, $depth) {
    var args = Array.prototype.slice.call(arguments, 2);

    return function(context, options) {
      options = options || {};

      return fn.apply(this, [context, options.data || data].concat(args));
    };
  },
  program: function(fn, data) {
    return function(context, options) {
      options = options || {};

      return fn(context, options.data || data);
    };
  },
  noop: function() { return ""; },
  invokePartial: function(partial, name, context, helpers, partials, data) {
    var options = { helpers: helpers, partials: partials, data: data };

    if(partial === undefined) {
      throw new Handlebars.Exception("The partial " + name + " could not be found");
    } else if(partial instanceof Function) {
      return partial(context, options);
    } else if (!Handlebars.compile) {
      throw new Handlebars.Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
    } else {
      partials[name] = Handlebars.compile(partial, {data: data !== undefined});
      return partials[name](context, options);
    }
  }
};

Handlebars.template = Handlebars.VM.template;
;



  return Handlebars;
});

/**
 * A collection of helpers for Handlebars.js
 */
define(function (require) {
  "use strict";

  var R = require('rex');
  var Handlebars = require('handlebars');

  // String
  // -----------------------------

  // Return a copy of the string with its first character capitalized and the rest lowercased.
  Handlebars.registerHelper('capitalize', function (str) {
    return capitalize(str);
  });


  // Time Compare
  // -----------------------------


  Handlebars.registerHelper('printIdentityNameFromInvitations', function (identity_id, invitations) {
    var invitation = getInvitationById(identity_id, invitations)
      , s = '';
    if (invitation) {
      s = invitation.identity.name;
    }
    return s;
  });


  // Check identity's provider is an OAuth identity.
  Handlebars.registerHelper('isOAuthIdentity', function (provider, options) {
    var context = -1 !== 'twitter facebook google flickr instagram dropbox'.indexOf(provider);
    return Handlebars.helpers['if'].call(this, context, options);
  });

  // helpers
  // -----------------------------

  // Exfee invitations Search
  function getInvitationById(id, invitations) {
    return R.find(invitations, function (v) {
      if (v.identity.id === id) {
        return true;
      }
    });
  }

  function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
  }
});

define('util', function () {
  "use strict";
  var trimLeft = /^\s+/,
      trimRight = /\s+$/,
      zh_CN = /[^0-9a-zA-Z_\u4e00-\u9fa5\ \'\.]+/g,
      NativeTrim = String.prototype.trim;

  var Util = {

    // Display Name: 0-9 a-zA-Z _ CJK字符 ' . 空格
    zh_CN: zh_CN,

    // 30个字符，并且删除中文字符
    cut30length: function (s, len) {
      //return s.replace(zh_CN, ' ').substring(0, 30);
      if (!s) {
        return '';
      }
      s = s.replace(zh_CN, ' ');
      len || (len = 30);
      while (Util.utf8length(s) > len) {
        s  = s.substring(0, s.length - 1)
      }
      return s;
    },

    // https://gist.github.com/2762686
    utf8length: function (s) {
      var len = s.length, u8len = 0, i = 0, c;
      for (; i < len; i++) {
        c = s.charCodeAt(i);
        if (c < 0x007f) { // ASCII
          u8len++;
        } else if (c <= 0x07ff) {
          u8len += 2;
        } else if (c <= 0xd7ff || 0xe000 <= c) {
          u8len += 3;
        } else if (c <= 0xdbff) { // high-surrogate code
          c = s.charCodeAt(++i);
          if (c < 0xdc00 || 0xdfff < c) {// Is trailing char low-surrogate code?
            throw "Error: Invalid UTF-16 sequence. Missing low-surrogate code.";
          }
          u8len += 4;
        } else /*if (c <= 0xdfff)*/ { // low-surrogate code
          throw "Error: Invalid UTF-16 sequence. Missing high-surrogate code.";
        }
      }
      return u8len;
    },

    // Remove whitespace
    trim: NativeTrim ?
      function (s) {
        /*jshint -W116*/
        return s == null ?
          '':
          NativeTrim.call(s);
      } :
      function (s) {
        /*jshint -W116*/
        return s == null ?
          '' :
          s.toString().replace(trimLeft, '').replace(trimRight, '');
      },

    // parse phone
    /*
    parsePhone: function () {
      var reg = /^(\+)?((?:(86)?(1(?:3\d|4[57]|5\d|8\d)\d{8}))|(?:(1)?(\d{5,15})))$/;
      return function _p(strid) { };
    },
    */

    // 解析 用户身份
    parseId: (function () {
      var facebook = /^([a-z0-9_\.]{1,})@facebook$/i,
          twitter = /^@([a-z0-9_]{1,15})$|^@?([a-z0-9_]{1,15})@twitter$/i,
          instagram = /^([a-z0-9_\.]{1,})@instagram$/i,
          dropbox = /^(.*)@dropbox$/i,
          flickr = /^(.*)@flickr$/i,
          normal = /^[a-z0-9!#$%&\'*+\\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&\'*+\\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
          enormal = /^[^@]*<[a-z0-9!#$%&\'*+\\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&\'*+\\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?>$/i,
          phone = /^(\+)?((?:(86)?(1(?:3\d|4[57]|5\d|8\d)\d{8}))|(?:(1)?(\d{5,15})))$/;

      return function p(strid) {
        var res = {}, m;
        strid = Util.trim(strid);

        if ((m = strid.match(dropbox)) && (normal.test(m[1]))) {
          res.name = m[1];
          res.external_username = m[1];
          res.provider = 'dropbox';
        }

        // flickr
        else if ((m = strid.match(flickr))) {
          res.name = m[1];
          res.external_username = m[1];
          res.provider = 'flickr';
        }

        // instagram
        else if ((m = strid.match(instagram))) {
          res.name = m[1];
          res.external_username = m[1];
          res.provider = 'instagram';
        // facebook
        } else if ((m = strid.match(facebook))) {
          res.name = m[1];
          res.external_username = m[1];
          res.provider = 'facebook';

        // twitter
        } else if ((m = strid.match(twitter))) {
          res.name = m[1] || m[2];
          res.external_username = res.name;
          res.provider = 'twitter';

        // normal
        } else if (normal.test(strid)) {
          res.name = Util.cut30length(strid.split('@')[0]);
          res.external_username = strid;
          res.provider = 'email';

        // enormal
        } else if (enormal.test(strid)) {
          var iLt = strid.indexOf('<');
              //iGt = strid.indexOf('>');
          res.name = Util.cut30length(strid.substring(0, iLt).replace(/^"|^'|"$|'$/g, ''));
          //res.external_identity = strid.substring(++iLt, iGt);
          res.external_username = res.name
          res.provider = 'email';

        } else if ((m = strid.replace(/[\s\-\(\)\_]/g, '').match(phone))) {
          var flag = m[1], zone, n;
          res.provider = 'phone';
          if (flag) {
            if (m[3] && m[4]) {
              zone = m[3];
              n = m[4];
              res.name = res.external_username = flag + zone + n;
            } else if (m[5] && m[6]) {
              zone = m[5];
              n = m[6];
              res.name = res.external_username = flag + zone + n;
            } else {
              res.name = strid;
              res.provider = null;
            }
          } else {
            flag = '+';
            if (m[4]) {
              zone = '86';
              n = m[4];
            } else {
              zone = '1';
              n = m[2];
            }
            res.name = res.external_username = flag + zone + n;
          }
        } else {
          res.name = strid;
          res.provider = null;
        }

        return res;
      }

    })(),

    tokenRegExp: /token=([a-zA-Z0-9]{32})/,

    printExtUserName: function (identity, status) {
      var username = identity.external_username,
          provider = identity.provider;

      switch (provider) {
      case 'twitter':
        username = '@' + username + '@' + provider;
        break;

      case 'facebook':
      case 'instagram':
      case 'flickr':
      case 'dropbox':
        username += '@' + provider;
        break;

      case 'phone':
        if (status) {
          if (/^\+1\d{10}$/.test(username)) {
            username = username.replace(/^(\+1)(\d{3})(\d{3})(\d{4})$/, '$1 ($2) $3-$4');
          } else if (/^\+86\d{11}$/.test(username)) {
            username = username.replace(/^(\+86)(\d{3})(\d{4})(\d{4})$/, '$1 $2 $3 $4');
          }
        }
        break;
      }

      return username;
    }

  };

  return Util;

});

/*jshint -W003*/

/**
 * Humantime.js
 * Relative/absolute time.
 *
 * Referrers:
 *  https://github.com/fnando/i18n-js
 *  https://en.wikipedia.org/wiki/ECMAScript
 *  ISO 8601 http://www.w3.org/TR/NOTE-datetime
 *  https://en.wikipedia.org/wiki/ISO_8601
 *  https://en.wikipedia.org/wiki/Unix_time
 *  http://tools.ietf.org/html/rfc3339
 *    UTC YYYY-MM-DDTHH:MM:SSZ 2012-10-01T20:30:33+0800
 */
"use strict";

// Set the placeholder format. Accepts `{{placeholder}}` and `%{placeholder}`.
var PLACEHOLDER = /(?:\{\{|%\{)(\w*?)(?:\}\}?)/gm;

var ISO8601_DATE = /^\d{4}-\d{2}-\d{2}$/
  , ISO8601_TIME = /^\d{2}:\d{2}:\d{2}$/;

var N2 = 0.2
  //, N9 = 0.9999
  , N6 = 6e4
  , D = 8.64e7;

var EN = {
    monthsShort: 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split(' ')
  , months: 'January February March April May June July August September October November December'.split(' ')
  , weekdaysShort: 'Sun Mon Tue Wed Thu Fri Sat'.split(' ')
  , weekdays: 'Sunday Monday Tuesday Wednesday Thursday Friday Saturday'.split(' ')

  , '-1': function () {
      return 'Today';
    }

  , '0': function (date) {
      var s = '', y = date.years, m = date.months;
      if (y) {
        s = '{{years}} year' + (y === 1 ? '' : 's');
      }
      if (m) {
        s += (s ? ' ' : '') + '{{months}} month' + (m === 1 ? '' : 's');
      }
      return s + ' ago';
    }

  , '1': function (date) {
      var s = '', d = date.days;
      if (1 === d) {
        s = 'Yesterday'
      } else if (2 === d) {
        s = 'Two days ago';
      } else {
        s = '{{days}} days ago'
      }
      return s;
    }

  , '2': function (date) {
      var s = '', isToday = date.isToday, h = date.hours;
      if (!isToday && h >= 12) {
        s = 'Yesterday';
      } else {
        s = '{{hours}} hours ago';
      }
      return s;
    }

  , '3': function () {
      return '1.5 hours ago';
    }

  , '4': function () {
      return 'An hour ago';
    }

  , '5': function (date, type) {
      return 'X' === type ? 'Just now' : '{{minutes}} minutes ago';
    }

  , '6': function (date, type) {
      return 'X' === type ? 'Now' : '{{minutes}} minutes ago';
    }

  , '7': function (date, type) {
      return 'X' === type ? 'Now' : 'Seconds ago';
    }

  , '8': function () {
      return 'In {{minutes}} minutes';
    }

  , '9': function () {
      return 'In one hour';
    }

  , '10': function () {
      return 'In 1.5 hours';
    }

  , '11': function (date) {
      var s = '', isToday = date.isToday, h = date.hours;
      if (!isToday && h >= 12) {
        s = 'Tomorrow';
      } else {
        s = 'In {{hours}} hours';
      }
      return s;
    }

  , '12': function (date) {
      var s = '', d = date.days, day = date.day;
      if (1 === d) {
        s = 'Tomorrow';
      } else if (2 === d) {
        s = 'In two days';
      } else {
        s = EN.weekdaysShort[day] + '. in {{days}} days';
      }
      return s;
    }

  , '13': function (date) {
      var s = '', y = date.years, m = date.months;
      if (y) {
        s = '{{years}} year' + (y === 1 ? '' : 's');
      }
      if (m) {
        s += (s ? ' ' : '') + '{{months}} month' + (m === 1 ? '' : 's');
      }
      return 'In ' + s;
    }
  };

var HumanTime = function (t, s, type, c) {
  var lang = HumanTime.locales[HumanTime.locale]
    , distanceTime = HumanTime.distanceOfTime(t, s)
    , input = HumanTime.diff(distanceTime)
    , output;

  input.type = type;

  output = HumanTime.inWords(input, lang);

  if ('function' === typeof c) {
    output = c(output.data);
  }

  return output;
};

/*
  Converts ISO8601 datetime to locale datetime.
  ES5 supprots ISO8601 datetime:
      1. var d0 = '2012-08-06T23:30:00+08:00'
      2. var d1 = '2012-08-06T23:30:00+0800'
  The moden browsers supports Date.parse(datetime), but opera-v12 not supports 1, must be 2
  */
var parseISO = HumanTime.parseISO = function (s) {
  return new Date(Date.parse(s));
};

// Normal datetime => ISO8601 datetime
// "2012-09-12 09:51:04 +0000" => "2012-09-12T09:51:04+00:00"
var toISO = HumanTime.toISO = function (s) {
  return s.replace(/\s/, 'T').replace(/\s/, '')
    .replace(/([+\-]\d\d)(?::?)(\d\d)/, '$1:$2');
};

/*
var SETTINGS = HumanTime.settings = {
  weekStartAt: 1
};
*/

HumanTime.locale = 'en';

HumanTime.locales = {
  en: EN
};

HumanTime.inWords = function (input, lang) {
  var token = lang[input.token]
    , type = input.type
    , date = input.date
    , message;

  if ('function' === typeof token) {
    message = token(date, type);
  } else {
    message = token;
  }

  return _replace(message, date);
};

HumanTime.diff = function (distanceTime) {
  var t = distanceTime.target
    //, s = distanceTime.source
    , ms = distanceTime.distance
    , m = floor(ms / N6)
    , days, months, years, hours, minutes, day
    , output = { date: {} }
    , date = output.date
    , _days = distanceTime.days;

  date.isToday = distanceTime.isToday

  // 有日期无时间
  if (t._isToday) {
    output.token = -1;
  }

  // m <= -43200
  else if (m < -43199) {
    output.token = 0
    years = floor(-m / 525949);
    months = floor(-m % 525949 / 43829 + N2);
  }

  // m <= -2880
  //else if (m < -2879) {
    //output.token = 1;
    //days = floor(m / 1440 + N9);
  //}

  // m <= -1440
  else if (m < -1439) {
    output.token = 1;
    //days = floor(-m / 1440 + N9);
    //days = floor((-m - 1) / 1440 + 1);
    days = -_days < 3 ? -_days : floor((-m + 1439) / 1440);
  }

  // m <= -108
  else if (m < -107) {
    output.token = 2;
    hours = floor(-m / 60 + N2);
  }

  // m <= -82
  else if (m < -81) {
    output.token = 3;
  }

  // m <= 60
  else if (m < -59) {
    output.token = 4;
  }

  // m <= -30
  else if (m < -29) {
    output.token = 5;
    minutes = -m;
  }

  // m <= -1
  else if (m < 0) {
    output.token = 6;
    minutes = -m;
  }

  // 0 m
  else if (0 === m) {
    output.token = 7;
  }

  // 1 m <= x <= 59 m
  else if (m < 60) {
    output.token = 8;
    minutes = m;
  }

  // 60 m <= x <= 81 m
  else if (m < 82) {
    output.token = 9;
  }

  // 82 m <= x <= 107 m
  else if (m < 108) {
    output.token = 10;
  }

  // 108 m <= x <= 719 m
  //else if (m < 720) {
    //output.token = 11;
  //}

  // 720 m <= x <= 1439 m
  else if (m < 1440) {
    output.token = 11;
    hours = floor(m / 60 + N2);
  }

  // 1440 m <= x <= 2879 m
  //else if (m < 2880) {
    //output.token = 12;
  //}

  // 2880 m <= x <= 43199 m
  else if (m < 43200) {
    output.token = 12;
    days = _days < 3 ? _days : floor((m + 1439) / 1440);
    day = t.getDay();
  }

  // x >= 43200
  else {
    output.token = 13;
    years = floor(m / 525949);
    months = floor(m % 525949 / 43829 + N2);

    if (12 === months) {
      months = 0;
      years++;
    }
  }

  if (years) { date.years = years; }

  if (months) { date.months = months; }

  if (days) { date.days = days; }

  if (hours) { date.hours = hours; }

  if (minutes) { date.minutes = minutes; }

  if ('undefined' !== typeof day) { date.day = day; }

  return output;
};

HumanTime.distanceOfTime = function (t, s) {
  if (!t) {
    t = new Date();
  } else if ('number' === typeof t) {
    t = new Date(t);
  } else if ('string' === typeof t) {
    t = parseISO(toISO(t));
  }

  if (!s) {
    s = new Date();
  } else if ('number' === typeof s) {
    s = new Date(s);
  } else if ('string' === typeof s) {
    s = parseISO(toISO(s));
  }

  // 有日期无时间，日期不相同
  if (t._reTime) {
    s.setHours(0);
    s.setMinutes(0);
    s.setSeconds(0);
    s.setMilliseconds(0);
  }

  var ty = t.getFullYear(),
      tm = t.getMonth(),
      td = t.getDate(),
      sy = s.getFullYear(),
      sm = s.getMonth(),
      sd = s.getDate();

  return {
      // target datetime
      target: t
      // source datetime
    , source: s
      // millseconds
    , distance: +t - +s

    , days: (+new Date(ty, tm, td) - +new Date(sy, sm, sd)) / D

    , isToday: (ty === sy)
        && (tm === sm)
        && (td === sd)
    };
};

// converts the eftime to the locale Date
HumanTime.toLocaleDate = function (eft) {
  var opf = eft.outputformat
    , now = new Date()
    , today = now.getFullYear() + '-' + lead0(now.getMonth() + 1) + '-' + lead0(now.getDate())
    , isToday = false
    , reTime = false
    , d
    , de
    , ds;
  if (opf) {
    d = now;
    ds = today;
    isToday = true;
  }
  else {
    var b = eft.begin_at
      , bd = b.date
      , bt = b.time
      , btz = b.timezone
      , s = '';

    if (bd) {
      s = formatDate(bd);
      if (bt) {
        s += 'T' + formatTime(bt);
      } else {
        reTime = true;
        isToday = s === today;
      }
    } else {
      s = today;
      if (bt) {
        s += 'T' + formatTime(bt);
      }
    }

    if (bd && bt && btz) {
      s += 'Z';
    }

    d = parseISO(s);
    if (reTime) {
      d.setHours(0);
      d.setMinutes(0);
      d.setSeconds(0);
      d.setMilliseconds(0);
    }
    de = ds = d.getFullYear() + '-' + lead0(d.getMonth() + 1) + '-' + lead0(d.getDate());
    ds += bt ? ' ' + lead0(d.getHours()) + ':' + lead0(d.getMinutes()) + ':' + lead0(d.getSeconds()) : '';
  }

  d._isToday = isToday;
  d._reTime = reTime;

  return {
    date: d
  , text: ds
  };
};


var FUNS = {
    date: function (y, m, d, day) {
      var lang = HumanTime.locales[HumanTime.locale];
      return lang.weekdaysShort[day] + ', ' + lang.monthsShort[m] + ' ' + d;
    }

  , time: function (h, m) {
      var _h = h > 12 ? h - 12 : h;
      var s = _h + ':' + lead0(m);
      s += h >= 12 ? 'PM' : 'AM';
      return s;
    }
  };

// EFTime display
HumanTime.printEFTime = function (eft, type, funs) {
  var opt = eft.outputformat,
      ba = eft.begin_at,
      isX = ('X' === type),
      output = { title: '', content: '' },
      now = new Date(),
      origin, t, d, tz, ctz;

  if (opt) {
    origin = eft.origin
      .replace(/^['"‘’“”“”‚„]+/, '')
      .replace(/['"‘’“”“”‚„]+$/, '');

    output.title = origin;
    if (!isX) {
      output.content = origin;
      if (ba.date) {
        eft.outputformat = 0;
        t = HumanTime.toLocaleDate(eft);
        output.content = HumanTime(t.date, now);
        eft.outputformat = 1;
      }
    }
  }
  else {
    if (!funs) {
      funs = FUNS;
    }

    if (ba) {
      if (ba.date || ba.time) {
        t = HumanTime.toLocaleDate(eft);
        d = t.date;

        if (ba.date) {
          output.title = HumanTime(t.date, now, 'X');
          output.content = ba.time_word
            + (ba.time_word && ba.time ? ' ' : '') + (ba.time ? funs.time(d.getHours(), d.getMinutes()) : '') + (ba.time || ba.time_word ? (ba.time ? ' ' : ', ') : '')
            + funs.date(d.getFullYear(), d.getMonth(), d.getDate(), d.getDay())
            + (ba.date_word ? ' ' : '')
            + ba.date_word;
        }
        else if (ba.time) {
          output.content = output.title = ba.time_word + (ba.time_word ? ' ' : '')
              + funs.time(d.getHours(), d.getMinutes())
            + (ba.date_word ? ', ' : '')
            + ba.date_word;
        }

        if (d.getFullYear() !== now.getFullYear()) {
          output.content +=  ' ' + d.getFullYear();
        }
      } else if (ba.date_word || ba.time_word) {
        output.content = output.title = ba.time_word + (ba.time_word ? ', ' : '') + ba.date_word;
      }

      if (ba.timezone) {
        tz = ba.timezone.replace(/^([+\-]\d\d:\d\d)[\w\W]*$/, '$1');
        ctz = getTimezone(now);
        if (tz !== ctz) {
          var abbr = getTimezoneAbbreviation(now);
          output.content += ' (' + ctz + (abbr && (' ' + abbr)) + ')';
        }
      }
    }
  }

  return output;
};

HumanTime.printTime = function (date, funs) {
  if (!date) { date = new Date(); }
  if (!funs) { funs = FUNS; }
  var now = new Date(), output = '';
  output += funs.date(date.getFullYear(), date.getMonth(), date.getDate(), date.getDay())
          + ' ' + funs.time(date.getHours(), date.getMinutes())
  if (date.getFullYear() !== now.getFullYear()) {
    output +=  ' ' + date.getFullYear();
  }

  return output;
};

// get locale timezone
var getTimezone = HumanTime.getTimezone = function (date) {
  var offset, h, m, a;
  if (!date) { date = new Date(); }
  offset = date.getTimezoneOffset();
  a = offset <= 0 ? '+' : '-';
  offset = Math.abs(offset);
  h = floor(offset / 60);
  m = offset - h * 60;
  return a + lead0(h) + ':' + lead0(m);
};

// get timezone abbreviation
var getTimezoneAbbreviation = function (date) {
  var abbr;
  if (!date) { date = new Date(); }
  // http://pubs.opengroup.org/onlinepubs/007908799/xsh/strftime.html
  // http://yuilibrary.com/yui/docs/api/files/date_js_date-format.js.html#l124
  // abbreviation
  abbr = date.toString().replace(/^.*:\d\d( GMT[+-]\d+)? \(?([A-Za-z ]+)\)?\d*$/, "$2").replace(/[a-z ]/g, "");
  return 3 === abbr.length ? abbr : '';
};

HumanTime.createEFTime = function () {
  return {
    begin_at: {
      date_word: '',
      date: '',
      time_word: '',
      time: '',
      timezone: '',
      id: 0,
      type: 'EFTime'
    },
    origin: '',
    outputformat: 1,
    id: 0,
    type: 'CrossTime'
  };
};

  // 3 -> '003'
var lead0 = HumanTime.lead0 = function (n, p) {
    n = '' + n;
    if (!p) { p = 2; }
    while (n.length < p) {
      n = '0' + n;
    }
    return n;
  }

, formatDate = HumanTime.formatDate = function (d) {
    var s;
    if (ISO8601_DATE.test(d)) {
      s = d;
    } else {
      s = d.split('-');
      s[1] = lead0(s[1]);
      s[2] = lead0(s[2]);
      s = s.join('-');
    }
    return s;
  }

, formatTime = HumanTime.formatTime = function (t) {
    var s;
    if (ISO8601_TIME.test(t)) {
      s = t;
    } else {
      s = t.split(':');
      s[0] = lead0(s[0]);
      s[1] = lead0(s[1]);
      s[2] = lead0(s[2]);
      s = s.join(':');
    }
    return s;
  }

, _replace = function (mess, data) {
    var ms = mess.match(PLACEHOLDER)
      , i = 0
      , regex
      , name
      , value
      , placeholder;

    if (ms) {
      for (; placeholder = ms[i]; ++i) {
        name = placeholder.replace(PLACEHOLDER, '$1');
        value = data[name];
        regex = new RegExp(placeholder.replace(/\{/gm, '\\{').replace(/\}/gm, '\\}'));
        mess = mess.replace(regex, value);
      }
    }
    return mess;
  }

, floor = function (n) {
    return n - n % 1;
  };

if (typeof define === 'function') {
  define('humantime', function () {
    return HumanTime;
  });
}

define('api', function (require) {
  "use strict";

  // import $.ajax
  var $ = require('jquery'),
      Deferred = $.Deferred,
      ajax = $.ajax,
      param = $.param,
      _ENV_ = window._ENV_;

  // urls of API
  // 区分大小写
  var urls = {

    // base url
    base_url: _ENV_.api_url,


    // Users
    signin: '/Users/signin',

    getRegistrationFlag: '/Users/getRegistrationFlag',


    // -------------- Must Use Token ---------------------- //
    getUser: '/Users/:user_id',

    signout: '/Users/signout/:user_id', // @todo

    updateUser: '/Users/update',

    setPassword: '/Users/:user_id/setPassword',

    crosses: '/Users/:user_id/crosses',

    crosslist: '/Users/:user_id/crosslist',

    addIdentity: '/Users/addIdentity',

    deleteIdentity: '/Users/deleteIdentity',

    setDefaultIdentity: '/Users/setDefaultIdentity',

    mergeIdentities: '/Users/mergeIdentities',

    // Identity
    getIdentityById: '/Identities/:identity_id',

    complete: '/Identities/complete',

    getIdentity: '/Identities/get',

    updateIdentity: '/Identities/:identity_id/update',


    // Cross
    getCross: '/Crosses/:cross_id',

    gather: '/Crosses/gather',

    editCross: '/Crosses/:cross_id/edit',


    // Exfee
    rsvp: '/Exfee/:exfee_id/rsvp',

    editExfee: '/Exfee/:exfee_id/edit',


    // Conversation
    conversation: '/Conversation/:exfee_id',

    addConversation: '/Conversation/:exfee_id/add',


    // Verify
    // 登陆前
    verifyIdentity: '/Users/verifyIdentity',

    // 登陆后
    verifyUserIdentity: '/Users/verifyUserIdentity',

    forgotPassword: '/Users/forgotPassword',

    avatarUpdate: '/Avatar/update',

    // Cross Token
    getCrossByInvitationToken: '/Crosses/getCrossByInvitationToken',

    // Resolve Token
    resolveToken: '/Users/resolveToken',

    // Reset Password - `user token`
    resetPassword: '/Users/resetPassword',

    // SetupUserByInvitationToken - `cross token`
    setupUserByInvitationToken: '/Users/setupUserByInvitationToken',

    // Opening a private invitation X.
    getInvitationByToken: '/Crosses/:cross_id/getInvitationByToken',

    // cross time
    recognize: '/time/recognize',

    // sort identities
    sortIdentities: '/Users/:user_id/sortIdentities',


    // PhotoX {
    // NOTE: photox_id = cross_id

    // Get PhotoX
    photox_getPhotoX: '/photox/:photox_id',

    // Get albums & photos
    photox_borwseSource: '/photox/browseSource',

    // Get photo
    photox_getPhoto: '/photox/GetPhoto',

    // Add
    photox_add: '/photox/:photox_id/Add',

    // Get likes
    photox_getLikes: '/photox/:photox_id/GetLikes',

    // Like
    photox_like: '/photox/Like',

    // Add
    photox_del: '/photox/:photox_id/Delete'

    // PhotoX }

  };

  var Api = {

    // request token
    _token: null,

    setToken: function (token) {
      this._token = token;
    },

    getToken: function () {
      return this._token;
    },

    /**
     *
     * Usage:
     *
     *    Api.request('/Users/:user_id/crosslist?token=xxx'
     *      , {
     *        // url params
     *        params {
     *          more: true
     *        },
     *        // url resources
     *        resources: {
     *          user_id: 233
     *        },
     *        type: 'POST',
     *        data: {}
     *      }
     *      , function done() {}
     *      , function fail() {}
     *    );
     *
     */
    request: function (channel, options, done, fail) {
      var url = urls[channel]
        , k
        , params = options.params
        , resources = options.resources;

      if (!url) { return; }

      //if (ignore.split(' ').indexOf(channel) === -1) {

        //if (!Api._token) { return; }

      if (!params) {
        params = {};
      }

        //params.token = Api._token;
      //}

      if (params) {
        if (Api._token && !params.token) {
          params.token = Api._token;
        }
        params = param(params);
        url += params ? '?' + params : '';
      }

      if (resources) {
        for (k in resources) {
          url = url.replace(':' + k, encodeURIComponent(resources[k]));
        }
      }

      options.url = urls.base_url + url;

      delete options.params;
      delete options.resources;

      return _ajax(options, done, fail);
    }
  }

  // helper

  function _extend(r, s) {
    var k;
    for (k in s) {
      if (s.hasOwnProperty(k)) {
        r[k] = s[k];
      }
    }
    return r;
  }

  // See jQuery#ajax's settings
  // http://api.jquery.com/jQuery.ajax/
  var defaultOptions = {
    type: 'GET',
    dataType: 'JSON',
    //timeout: 4698,
    timeout: 10000,
    cache: false,
    // CORS: Cross Origin Resource Share
    xhrFields: { withCredentials: true }
  };

  function _ajax(options, done, fail) {
    var o = {}, dfd, promise, jqXHR;

    _extend(o, defaultOptions);

    _extend(o, options);

    dfd = Deferred();
    promise = dfd.promise();

    jqXHR = ajax(o)
      .done(function (data, statusText, jqXHR) {
        var code = data && data.meta && data.meta.code;
        if (200 === code) {
          dfd.resolve(data.response, statusText, jqXHR);
        } else {
          dfd.reject(data, code, statusText, jqXHR);
        }
      })
      .fail(function (data, statusText, jqXHR) {
          var code = data && data.meta && data.meta.code;
          dfd.reject(data, code, statusText, jqXHR);
        });

    promise.jqXHR = jqXHR;
    promise.abort = function (statusText) {
      if (jqXHR) {
        jqXHR.abort(statusText);
        jqXHR = dfd = promise = void 0;
      }
    };
    promise
      .done(done)
      .fail(fail)
      .always(function () { jqXHR = dfd = promise = void 0; });

    return promise;
  }

  return Api;

});

define('widget', function (require) {
  "use strict";

  // Widget
  // ------
  // UI 组件的基类，主要负责 View 层的管理

  var $ = require('jquery'),
      Base = require('base');

  var Widget = Base.extend({

    options: {
      template: '<div />',

      // 事件代理 格式：
      //  {
      //    'click .button': 'save',
      //    'click .open': function (e) { ... }
      //  }
      events: null
    },

    // 初始化
    initialize: function (options) {
      this.cid = guid();
      this.initOptions(options);
      this.parseElement();

      this.delegateEvents();
      this.init();
      Widget.caches[this.cid] = this;
    },

    initOptions: function (params) {
      this.setOptions(params);

      //delete params.options;

      setAttrOptions(this, params);
    },

    // 获取元素
    parseElement: function () {
      var element = this.element,
          template = this.options.template;

      if (element) {
        this.element = element instanceof $ ? element : $(element);
      } else if (template) {
        this.element = $(template);
      }

      if (!this.element) {
        throw 'element is invalid';
      }

      this.element.attr('data-widget-id', this.cid);
    },

    // 外部接口，方便子类初始化
    init: function () {},

    // 外部接口，将 widget 渲染到页面上
    render: function () {
      return this;
    },

    delegateEvents: function (events) {
      events || (events = getValue(this.options, 'events'));
      if (!events) { return; }
      this.undelegateEvents();

      var key, method, match, eventName, selector;
      for (key in events) {
        method = events[key] || this[key];

        if (!method) { throw 'Method "' + events[key] + '" does not exist'; }

        match = key.match(delegateEventSplitter);
        eventName = match[1];
        selector = match[2] || null;

        eventName += '.delegateEvents' + this.cid;
        this.element.on(eventName, selector, proxy(method, this)); // $.proxy
      }
    },

    undelegateEvents: function () {
      this.element.off('.delegateEvents' + this.cid);
    },

    // 在当前 widget 内寻找节点
    $: function (selector) {
      return this.element.find(selector);
    },

    focus: function () {
      this.element.focus();
    },

    _destory: function () {
      delete Widget.caches[this.cid];
      this.undelegateEvents();
      Widget.superclass.destory.call(this);
    }
  });

  Widget.caches = {};

  // Helpers
  // ------

  // 事件代理参数中，'event selector' 的分隔符
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  var uuid = 0;

  function guid() {
    return 'widget-' + uuid++;
  }

  function isFunction(f) {
    return typeof f === 'function';
  }

  function getValue(o, prop) {
    var f = o[prop];
    if (o && f)  {
      return isFunction(f) ? o[prop]() : f;
    }
  }

  function setAttrOptions(r, s) {
    var k;
    for (k in s) {
      if (k !== 'options') { r[k] = s[k]; }
    }
  }

  function proxy(f, c) {
    if (!f) { return; }
    return function cb(e) {
      return f.call(c, e);
    };
  }


  return Widget;

});

/*jsint -*/

define('dialog', function (require) {
  'use strict';

  /**
   *
   * Dependence:
   *  - jQuery
   *  - Widget
   *
   * Thanks to:
   *  - https://github.com/twitter/bootstrap/blob/master/js/bootstrap-modal.js
   *  - https://github.com/defunkt/facebox/blob/master/src/facebox.js
   *  - https://github.com/makeusabrew/bootbox/blob/master/bootbox.js
   */

  var $ = require('jquery');
  var Widget = require('widget');

  var $BODY = $(document.body);
  var $TMP = $('#app-tmp');

  /*
   * HTML
   *
   *    div.modal
   *      > div.modal-header
   *        > button.close
   *        > h3
   *      > div.modal-main
   *        > div.modal-body
   *        > div.modal-footer
   */

  var Dialog = Widget.extend({

    options: {

      // keyboard
      keyboard: true

      // 开/关 遮罩
    , backdrop: false

      // 弹出窗口基础结构
    , template: '<div class="modal" tabindex="-1"><div class="modal-header"><button class="close" data-dismiss="dialog">×</button><h3></h3></div><div class="modal-main"><div class="modal-body"></div><div class="modal-footer"></div></div></div>'

      // 父节点，插入方式 appendTo
    , parentNode: $TMP

    // source target node
    , srcNode: ''

      //
    , viewData: null

    // 生命周期，1: 每次都要重建，0: 只需一次创建，无删除动作
    , lifecycle: true

    },

    init: function () {},

    render: function () {
      var options = this.options;
      var data;

      this.parentNode = options.parentNode;
      this.srcNode = options.srcNode;
      delete options.parentNode;
      delete options.srcNode;

      if ((data = options.viewData)) {
        var title = data.title
          , body = data.body
          , footer = data.footer
          , others = data.others
          , cls = data.cls;
        if (cls) { this.element.addClass(cls); }
        if (title) { this.element.find('h3').eq(0).html(title); }
        if (body) { this.element.find('div.modal-body').html(body); }
        if (footer) { this.element.find('div.modal-footer').html(footer); }
        if (others) { this.element.find('div.modal-main').append(others); }
      }

      this.element.appendTo(this.parentNode);

      this.element.on('click.dismiss.dialog', '[data-dismiss="dialog"]', $.proxy(this.hide, this));

      this.element.on('destory.widget', $.proxy(this.destory, this));

      this.sync();

      return this;
    },

    sync: function () {

      this.emit('sync');

      return this;
    },

    show: function (data) {
      // 临时
      $TMP.find('.modal').addClass('hide');

      this.emit('showBefore', data);

      this.element.removeClass('hide');

      this.isShown = true;
      escapeFn.call(this);
      backdropFn.call(this);

      this.element.addClass('in');

      // after
      this.emit('showAfter', data);

      return this;
    },

    hide: function (e) {
      // before
      this.emit('hideBefore', e);

      this.element.addClass('hide');

      this.isShown = false;
      escapeFn.call(this);
      backdropFn.call(this);

      this.element.removeClass('in');

      // if (this.options.lifecycle) {}
      // after
      this.emit('hideAfter', e);

      if (e && 'stopPropagation' in e) {
        e.stopPropagation();
        e.preventDefault();
      }
      return this;
    },

    offSrcNode: function () {
      var srcNode = this.srcNode;
      if (srcNode) {
        srcNode.data('dialog', null);
        // <div data-destory="true" />
        if (srcNode.data('destory')) {
          srcNode.remove();
        }
      }
    },

    destory: function () {
      var $e = this.element;
      if (this.srcNode) {
        var dataType = this.srcNode.data('dialog-type');
        this.offSrcNode();

        // 删除所有 dialog 引用
        $BODY
          .find('[data-dialog-type="' + dataType + '"]')
          .not($e)
          .removeData('dialog');
      }

      this._destory();
      $e.remove();
    }

  });

  // Helper
  // ------

  var backdropNode = '<div id="js-modal-backdrop" class="modal-backdrop" />';
  function backdropFn() {
    // 遮罩层结构
    if (this.isShown && this.options.backdrop) {
      this.$backdrop = $(backdropNode).appendTo(this.parentNode);

      this.$backdrop.click($.proxy(this.hide, this));

      this.$backdrop.addClass('in');
    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in');
      removeBackdrop.call(this);
    }
  }

  function removeBackdrop() {
    this.$backdrop.remove();
    this.$backdrop = null;
  }

  function escapeFn() {
    var that = this;
    if (this.isShown && this.options.keyboard) {
      $BODY.on('keyup.dismiss.modal', function (e) {
        if (e.which === 27) {
          e.stopPropagation();
          e.preventDefault();
          if (that) { that.hide(); }
          return false;
        }
      });
    } else if (!this.isShown) {
      $BODY.off('keyup.dismiss.modal');
    }
  }

  return Dialog;
});

define('typeahead', function (require) {
  'use strict';

  /**
   * Typeahead
   *  - popmenu
   *  - autocomplete
   *
   * Dependence:
   *  - jQuery
   *  - Widget
   *
   * Thanks to:
   *  - https://github.com/twitter/bootstrap/blob/master/js/bootstrap-typeahead.js
   */

  var $ = require('jquery');
  var Widget = require('widget');

  var $TMP = $('#app-tmp');

  var Typeahead = Widget.extend({

    options: {
      source: [],
      template: '<div class="popmenu hide"></div>',

      // input target
      target: null,

      parentNode: $TMP,

      viewData: {
        menu: '<ul class="typeahead"></ul>',
        item: '<li></li>'
      }

    },

    isShown: false,

    init: function () {
      this.parentNode = this.options.parentNode;
      this.source = this.options.source;
      this.element.appendTo(this.parentNode);
      this.listen();
    },

    listen: function () {
      this.target = this.target || this.options.target;
      this.target
        .on('blur.typeahead', proxy(this.blur, this))
        .on('keypress.typeahead', proxy(this.keypress, this))
        .on('keyup.typeahead', proxy(this.keyup, this))
        /*
        .on('drop', function (e) {
          var notecard = e.originalEvent.dataTransfer.getData("text/plain");
          console.log(notecard);
          //e.preventDefault();
          //console.log(1);
        })
        */
        .on('focus.typeahead', proxy(this.focus, this));

      if ($.browser.webkit | $.browser.msie | $.browser.mozilla) {
        this.target.on('keydown.typeahead', proxy(this.keypress, this));
      }

      this.element
        .on('click.typeahead', proxy(this.click, this))
        .on('mouseenter.typeahead', 'li', proxy(this.mouseenter, this));
    },

    select: function () {
      var active = this.$('.active'),
          val = active.data('value');
      this.target
        .val(this.updater(val))
        .change();

      this.emit('select', val);
      return this.hide();
    },

    updater: function (item) {
      return item;
    },

    itemRender: function (item) {
      return $(this.options.viewData.item).data('value', item).html(item);
    },

    render: function (items) {
      var that = this;
      items = $(items).map(function (i, item) {
        return that.itemRender(item, i)[0];
      });

      //items.first().addClass('active');
      var $ul = $(this.options.viewData.menu).html(items);
      this.element.html($ul);
      return this;
    },

    show: function () {
      var pos = $.extend({}, this.target.offset(), {
        height: this.target.outerHeight()
      });

      this.element.css({
        top: pos.top + pos.height,
        left: pos.left
      });

      this.element.removeClass('hide');
      this.isShown = true;
      return this;
    },

    hide: function () {
      this.element.addClass('hide');
      this.isShown = false;
      return this;
    },

    lookup: function () {
      this.query = $.trim(this.target.val());

      if (!this.query) {
        this.emit('nothing');
        return this.isShown ? this.hide() : this;
      }

      this.emit('search', this.query);
    },

    next: function () {
      var active = this.element.find('.active')
        , next = active.next();

      if (!next.length) {
        next = this.element.find('li').first();
      }

      active.removeClass('active');
      next.addClass('active');
    },

    prev: function () {
      var active = this.element.find('.active')
        , prev = active.prev();

      if (!prev.length) {
        prev = this.element.find('li').last();
      }

      active.removeClass('active');
      prev.addClass('active');
    },

    focus: function () {},

    keyup: function (e, keyCode) {
      keyCode = e.keyCode;
      switch (keyCode) {
      case 40: // down arrow
      case 38: // up arrow
        break;

      case 9: //tab
      case 13: //enter
        if (!this.isShown) { return; }
        this.select();
        break;

      case 27: // escape
        if (!this.isShown) { return; }
        this.hide();
        break;

      default:
        this.lookup();
      }

      e.stopPropagation();
      e.preventDefault();
    },

    keypress: function (e, keyCode) {
      if (!this.isShown) { return; }

      keyCode = e.keyCode;
      switch (keyCode) {
      //case 9: // tab
      case 13: // nete
      case 27: // escape
        e.preventDefault();
        break;

      case 38: // up arrow
        if (e.type !== 'keydown') { return; }
        e.preventDefault();
        this.prev();
        break;

      case 40: //down break
        if (e.type !== 'keydown') { return; }
        e.preventDefault();
        this.next();
        break;
      }

      e.stopPropagation();
    },

    blur: function () {
      var that = this;
      setTimeout(function () {that.hide();}, 150);
    },

    click: function (e) {
      e.stopPropagation();
      e.preventDefault();
      this.select();
    },

    mouseenter: function (e) {
      this.element.find('.active').removeClass('active');
      $(e.currentTarget).addClass('active');
    }

  });

  // simple proxy function, $.proxy
  function proxy(f, c) {
    if (!f) { return; }
    return function cb(e) {
      return f.call(c, e);
    };
  }

  return Typeahead;
});


define('panel', function(require) {
  "use strict";

  var $ = require('jquery'),
      Widget = require('widget'),
      proxy = $.proxy;

  /*
   * HTML
   *
   *    div.panel tabindex="-1" role="panel"
   *      > div.panel-header
   *      > div.panel-body
   *      > div.panel-footer
   */

  var Panel = Widget.extend({

      options: {

          // keyboard
        keyboard: true,

          // 开/关 模态窗口
        backdrop: false,

        template: '<div class="panel" tabindex="-1" role="panel"><div class="panel-header"></div><div class="panel-body"></div><div class="panel-footer"></div></div>',

        parentNode: null,

        srcNode: null,

        events: null
      },

      init: function () {
        this.render();
      },

      render: function () {
        var options = this.options;
        this.parentNode = options.parentNode;
        this.srcNode = options.srcNode;
        delete options.parentNode;
        delete options.srcNode;

        this.on('escape', proxy(this.hide, this));

        this.on('showBefore', proxy(this.showBefore, this));
        this.on('showAfter', proxy(this.showAfter, this));

        this.element.on('destory.widget', proxy(this.destory, this));

        return this;
      },

      escapable: function () {
        var self = this;
        $(document).on('keydown.panel', function (e) {
          if (27 !== e.which) {
            return;
          }
          self.emit('escape');
        });
      },

      show: function () {


        this.emit('showBefore');

        this.escapable();

        this.element.appendTo(this.parentNode);

        this.emit('showAfter');

        return this;
      },

      hide: function (ms) {
        var self = this;
        $(document).off('keydown.panel');

        // prevent thrashing
        self.hiding = true;

        // duration
        if (ms) {
          setTimeout(function () {
            self.hide();
          }, ms);
        }

        // hide / remove
        self.element.addClass('hide');
        if (self._effect) {
          setTimeout(function () {
            self.destory();
          }, 500);
        }
        else {
          self.destory();
        }

        return this;
      },

      effect: function (type) {
        this._effect = type;
        this.element.addClass(type);
        return this;
      },

      _destory: function () {
        this.undelegateEvents();
        Widget.superclass.destory.call(this);
      }
    });

  return Panel;
});

/*jshint -W116*/

define('xidentity', function (require) {
  'use strict';

  var $ = require('jquery');
  var Util = require('util');
  var Api = require('api');
  var Typeahead = require('typeahead');
  var Handlebars = require('handlebars');

  return Typeahead.extend({

    itemRender: function (item) {
      var template = Handlebars.compile(this.options.viewData.item);
      return $(template(item));
    },

    matcher: function (item) {
      var eid = item.external_id;
      return ~eid.toLowerCase().indexOf(this.query.toLowerCase());
    },

    focus: function () {
      var v = this.query = Util.trim(this.target.val());
      if (v) {
        //this.lookup();
        this.emit('search', v);
      } else {
        this.emit('nothing', v);
      }
    },

    select: function () {
      var active = this.$('.active'),
          val = active.data('value');

      if (!val) return false;

      this.target
        .val(this.updater(val))
        .change();

      this.emit('select', val);
      this.selecting = false;
      if (1 === this.element.find('li').length) {
        this.hide();
      }
    },

    mouseenter: function (e) {
      this.selecting = true;
      e.stopPropagation();
      e.preventDefault();
      this.$('.active').removeClass('active');
      $(e.currentTarget).addClass('active');
      this.select();
      return false;
    },

    tab: function () {
      return this.hide();
    },

    keypress: function (e, keyCode) {
      if (!this.isShown) return;

      keyCode = e.keyCode;
      switch (keyCode) {
      case 9: // tab
        //e.preventDefault();
        this.tab();
        break;
      //case 13: // enter
      //case 27: // escape
        //e.preventDefault();
        //break;

      case 38: // up arrow
        if (e.type !== 'keydown') break;
        e.preventDefault();
        this.selecting = true;
        this.prev();
        this.select();
        break;

      case 40: //down break
        if (e.type !== 'keydown') break;
        e.preventDefault();
        this.selecting = true;
        this.next()
        this.select();
        break;
      }

      e.stopPropagation();
    },

    options: {

      // ajax settings
      url: null,
      useCache: false,
      delay: 200,
      extraParams: {},
      autoClearResults: false,
      dataType: "JSON",
      minLength: 1,

      viewData: {

        item: ''
          + '<li data-value="{{external_id}}">'
            + '<i class="icon16-identity-{{provider}}"></i>'
            + '<span class="pull-left">{{external_id}}</span>'
          + '</li>'
      },

      onSelect: function (val) {
        this.emit('search', val);
      },

      // 清楚数据缓存
      onClearCache: function () {
        delete this.cache;
      },

      onSearch: function (q) {
        var that = this
          , options = that.options
          , res
          , items;

        that.cache || (that.cache = {});

        // `selecting`: up-down or mousemove
        if (!that.selecting && that.source && that.source.length) {
          items = $.grep(that.source, function (item) {
            return that.matcher(item);
          });

          if (0 === items.length) {
            that.isShown ? that.hide() : that;
          } else if (1 < items.length || q !== items[0].external_id) {
            that.render(items.slice(0)).show();
          }
        }

        if (that.timer) {
          clearTimeout(that.timer);
          // ajax loading
          that.target.next().addClass('hide');
        }

        if ((res = Util.parseId(q)).provider) {
          var identity = {
            provider: res.provider,
            external_username: res.external_username
          };

          that.timer = setTimeout(function () {
            clearTimeout(that.timer);
            search(q);
          }, options.delay);

          // falg: SIGN_IN SIGIN_UP VERIFY SET_PASSWORD
          var ajax = function (e) {
            that.ajaxDefer && that.ajaxDefer.readyState < 4 && that.ajaxDefer.abort();
            that.emit('autocomplete:beforesend', identity);
            if (options.useCache && that.cache[e]) that.emit('autocomplete:finish', that.cache[e]);
            else {
              that.ajaxDefer = Api.request('getRegistrationFlag'
                , {
                  data: identity,
                  beforesend: function () {
                    // ajax loading
                    that.target.next().removeClass('hide');
                  },
                  complete: function () {
                    // ajax loading
                    that.target.next().addClass('hide');
                  }
                }
                , function (data) {
                  if (e === that.target.val()) {
                    options.useCache && (that.cache[e] = data);
                    data.identity || (data.identity = identity);
                    that.emit('autocomplete:finish', data);
                  }
                }
              );
            }
          }

          var search = function (a) {
            if (a.length >= that.options.minLength) {
              ajax(a);
              that.searchValue = a;
            } else {
              that.emit('autocomplete:clear');
            }
          }

        } else {
          that.emit('autocomplete:finish', null);
        }
      }

    }

  });

});

/*jshint -W116*/

define('xdialog', function (require, exports) {
  "use strict";
  var $ = require('jquery'),
    R = require('rex'),
    Bus = require('bus'),
    Api = require('api'),
    Util = require('util'),
    Store = require('store'),
    Handlebars = require('handlebars'),
    Dialog = require('dialog'),
    dialogs = {};

  exports.dialogs = dialogs;

  // TODO: js html 分离
  dialogs.identification = {
    options: {

      errors: {
        'failed': 'Password incorrect.',
        'no_password': 'Password incorrect.',
        'no_external_id': 'Set up this new identity.'
      },

      onCheckUser: function () {
        var lastIdentity = Store.get('lastIdentity')
          , last_external_username = Store.get('last_external_username');
        if (lastIdentity) {
          this.availability = true;

          this.$('#identity').val(last_external_username);
          this.$('.x-signin').removeClass('disabled loading');
          this.$('.user-identity')
            .removeClass('hide')
            .find('img')
            .attr('src', lastIdentity.avatar_filename)
            .next()
            .attr('class', 'provider icon16-identity-' + lastIdentity.provider);

          this.$('.xbtn-forgotpwd').data('source', [lastIdentity]);

          this.switchTab('d01');
        }

        this.$('.help-subject').toggleClass('icon14-question', !this.availability);
      },

      onShowBefore: function (e) {
        var source = $(e.currentTarget).data('source');
        if (source) {
          this.$('#identity').val(source);
        } else {
          // 读取本地存储 user infos
          this.emit('checkUser');
        }
      },

      onShowAfter: function () {
        if (this.switchTabType === 'd00'
            || this.switchTabType === 'd01'
            || this.switchTabType === 'd02') {
          this.$('#identity').focusend();
        }
      },

      onHideAfter: function () {
        this.$('.modal-body').eq(0).css('opacity', 1);
        this.switchTabType = 'd00';

        // abort ajax
        if (this._oauth_) {
          this._oauth_.abort();
          this._oauth_ = null;
        }
        this.destory();

        // TODO: 删除 `popmenu` 元素，暂时先放着
        $('.popmenu').remove();
      },

      events: {
        // bind `enter` key for submit
        'keypress .modal-main': function (e) {
          var t = this.switchTabType
            , kc = e.keyCode;

          // enter
          if (this.availability && (t === 'd01' || t === 'd02') && kc === 13) {
            this.$('.x-signin').click();
          }
        },

        'click .oauth > a': function (e) {
          e.stopPropagation();
          e.preventDefault();
          var that = this;
          var $e = $(e.currentTarget)
            , oauthType = $e.data('oauth');

          that.$('.authentication')
            .find('.oauth-provider')
            .text(oauthType);

          that._oauth_ = $.ajax({
            url: '/OAuth/Authenticate?provider=' + oauthType,
            type: 'POST',
            dataType: 'JSON',
            data: {
              refere: window.location.href
            },
            beforeSend: function () {
              that.$('.modal-body').eq(0).css('opacity', 0);
              that.switchTab('d05');

              that.$('.authentication')
                .find('img')
                .removeClass('hide');

              that.$('.authentication')
                .find('.redirecting')
                .removeClass('hide');

              that.$('.authentication')
                .find('.xalert-fail')
                .addClass('hide');

              that.$('.xbtn-oauth')
                .addClass('hide');
            },
            success: function (data) {
              var code = data.meta.code;
              if (code === 200) {
                window.location.href = data.response.redirect;
              } else {
                that.$('.authentication')
                  .find('img')
                .addClass('hide');

                that.$('.authentication')
                  .find('.redirecting')
                  .addClass('hide');

                that.$('.authentication')
                  .find('.xalert-fail')
                  .removeClass('hide');

                that.$('.xbtn-oauth')
                  .removeClass('hide');
              }
            }
          });
        },
        'click .xbtn-oauth': function () {
          this.$('.modal-body').eq(0).css('opacity', 1);
          this.switchTab('d00');
          return false;
        },
        'click .xbtn-verify': function (e) {
          var that = this;
          var $e = $(e.currentTarget);
          if ($e.hasClass('xbtn-success')) {
            that.$('.verify-after').addClass('hide');
            $e.removeClass('xbtn-success').text('Verify');
            that.hide();
            return false;
          }
          var provider = that._identity.provider;
          var external_id = that._identity.external_id;
          Api.request('verifyIdentity'
            , {
              type: 'POST',
              data: {
                provider: provider,
                external_username: external_id
              }
            }
            , function (data) {
              that.$('.verify-before').addClass('hide');
              if (data.action === 'VERIFYING') {
                that.$('.verify-after').removeClass('hide');
                $e.addClass('xbtn-success').text('Done');
              /*
              } else if (data.action === 'REDIRECT') {
                //$e.addClass('verify-error').removeClass('hide');
              */
              } else {
                $e.addClass('verify-error').removeClass('hide');
              }
            }
          );
        },
        'blur #identity': function (e) {
          var val = Util.trim($(e.currentTarget).val());
          var $identity = this.$('[for="identity"]');
          var $text = $identity.find('span');
          if (val.length && !Util.parseId(val).provider) {
            $identity.addClass('label-error');
            $text.text('Invalid identity.');
          } else {
            $identity.removeClass('label-error');
            $text.text('');
          }
        },
        'blur #name': function (e) {
          var val = Util.trim($(e.currentTarget).val());
          var $name = this.$('[for="name"]');
          var $text = $name.find('span');
          if (!val) {
            $name.addClass('label-error');
            $text.text('');
          } else if (Util.utf8length(val) > 30) {
            $text.text('Too long.');
            $name.addClass('label-error');
          } else if (Util.zh_CN.test(val)) {
            $name.addClass('label-error');
            $text.text('Invalid character.');
          } else {
            $name.removeClass('label-error');
            $text.text('');
          }
        },
        'blur #password': function (e) {
          var val = Util.trim($(e.currentTarget).val());
          var $pass = this.$('[for="password"]');
          var $text = $pass.find('span');
          if (!val) {
            $pass.addClass('label-error');
            $text.text('Password incorrect.');
          } else {
            $pass.removeClass('label-error');
            $text.text('');
          }
        },
        'click .help-subject': function (e) {
          var $e = $(e.currentTarget)
            , s;

          if ($e.hasClass('icon14-question')) {
            s = 'Identity is your online representative, such as email, <span class="strike">mobile no.</span>, and your account username on other websites like Twitter, Facebook, etc.';
            $e.parent().find('.xalert-error:eq(0)').html(s).removeClass('hide');
          } else {
            $e.toggleClass('icon14-question icon14-clear');

            this.resetInputs();

            this.$('.user-identity').addClass('hide');

            // 清楚user 缓存
            Store.remove('lastIdentity');
            Store.remove('last_external_username');
            Store.remove('authorization');
            Store.remove('user');
            Store.remove('identities');

            // cleanup `xidentity` source data
            // TODO: 后期移调
            this.$('[data-typeahead-type="identity"]').data('typeahead').source = null;

            this.switchTab('d00');
          }

        },
        'click #password-eye': function (e) {
          var $e = $(e.currentTarget);
          var $input = $e.prev();
          $input.prop('type', function (i, val) {
            return val === 'password' ? 'text' : 'password';
          });
          $e.toggleClass('icon16-pass-hide icon16-pass-show');
        },
        'click .xbtn-forgotpwd': function (e) {
          e.preventDefault();
          this.element.addClass('hide');
          $('#js-modal-backdrop').addClass('hide');
          //this.hide();
          //this.switchTab('d04');
        },
        'click .xbtn-setup': function (e) {
          e.preventDefault();
          this.$('.modal-body').eq(0).css('opacity', 0.05);
          this.switchTab('d03');
        },
        'click .xbtn-isee': function (e) {
          e.preventDefault();
          this.$('.modal-body').eq(0).css('opacity', 1);
          this.$('#identity').val('');
          this.switchTab('d02');
        },
        'click .xbtn-startover': function (e) {
          e.preventDefault();
          this.$('#identity').val('');
          //this.emit('checkUser');
          this.resetInputs()
          this.switchTab('d00', true);
        },
        'click .x-signin': function (e) {
          var xsignin = $(e.currentTarget);
          if (xsignin.hasClass('disabled')) {
            // signin disabled
            return;
          }

          var that = this;
          var t = this.switchTabType;

          var od = this.getFormData(t);

          that.$('#password').trigger('blur');
          if (t === 'd02') {
            that.$('#name').trigger('blur');
          }

          if (!od.password || (t === 'd02' && !od.name)) {
            return;
          }

          if (t === 'd01' || t === 'd02') {

            Api.request('signin'
              , {
                type: 'POST',
                data: {
                  external_username: od.external_username,
                  provider: od.provider,
                  password: od.password,
                  name: od.name || '',
                  auto_signin: !!od.auto_signin
                },
                beforeSend: function () {
                  xsignin.addClass('disabled loading');
                },
                complete: function () {
                  xsignin.removeClass('disabled loading');
                }
              }
              , function (data) {
                // 清除浏览身份
                // TODO
                delete App.request.session.browsing_authorization;
                delete App.request.session.browsing_user;

                Store.set('authorization', data);
                // 最后登陆的 external_username
                Store.set('last_external_username', Util.printExtUserName(od));

                that.hide();
                if (t === 'd01' || t === 'd02') {
                  Bus.emit('app:user:signin', data.token, data.user_id, false, true);
                } else {
                  var d = new Dialog(dialogs.welcome);
                  d.render();
                  d.show({
                    identity: {
                      name: od.name,
                      provider: od.provider
                    }
                  });
                }
              }
              , function (data) {
                var meta = data && data.meta
                  , errorType = meta && meta.errorType || ''
                  , errorDetail = meta && meta.errorDetail || '';
                if (errorType === 'no_password' || errorType === 'failed') {
                  that.$('[for="password"]')
                    .addClass('label-error')
                    .find('span').text(errorDetail || that.options.errors[errorType]);
                } else if (errorType === 'no_external_id') {
                  that.$('#name')
                    .nextAll('.xalert-info')
                    .removeClass('hide');
                }
              }
            );
          }
        }
      },

      backdrop: true,

      viewData: {
        // class
        cls: 'modal-id',

        //title: 'Identification',
        title: 'Start',

        body: ''
          + '<div class="shadow title">Welcome to <span class="x-sign">EXFE</span></div>'
            + '<div class="clearfix">'
              + '<div class="pull-left authorize">Authenticate with:</div>'
              + '<div class="pull-left oauth">'
                + '<a href="#" class="oauth-twitter" data-oauth="twitter">twitter</a>'
                + '<a href="#" class="oauth-facebook" data-oauth="facebook">facebook</a>'
              + '</div>'
            + '</div>'
            + '<div class="orspliter">or</div>'
            + '<form class="modal-form">'
              + '<fieldset>'
                + '<legend>Use your online identity:</legend>'

                  + '<div class="clearfix control-group">'
                    + '<label class="control-label" for="identity">Identity: <span class="xalert-message"></span></label>'
                    + '<div class="pull-right user-identity hide">'
                      + '<div class="avatar">'
                        + '<img src="" alt="" width="40" height="40" />'
                        + '<i class="provider"></i>'
                      + '</div>'
                    + '</div>'
                    + '<div class="controls">'
                      + '<input type="text" class="input-large identity" id="identity" autocomplete="off" data-widget="typeahead" data-typeahead-type="identity" placeholder="Enter your email or phone" />'
                      + '<i class="help-subject"></i>'
                      + '<i class="help-inline small-loading hide"></i>'
                      + '<div class="xalert xalert-error hide" style="margin-top: 5px;"></div>'

                      + '<div class="xalert xalert-error authenticate hide" style="margin-top: 5px;">'
                        + '<span class="xalert-fail">Please directly authenticate identity above.</span><br />To enable password sign-in for this identity, set an <span class="x-sign">EXFE</span> password first in your profile page.'
                      + '</div>'

                    + '</div>'
                  + '</div>'

                  + '<div class="form-title d d02 hide">Welcome! Please set up your new account.<span class="pull-right form-title-bd"></span></div>'
                  + '<div class="control-group d d02 hide">'
                    + '<label class="control-label" for="name">Display name: <span></span></label>'
                    + '<div class="controls">'
                      + '<input type="text" class="input-large" id="name" autocomplete="off" placeholder="Desired recognizable name" />'
                    + '</div>'
                  + '</div>'

                  + '<div class="control-group d d01 d02 hide">'
                    + '<label class="control-label" for="password">Password: <span></span></label>'
                    + '<div class="controls">'
                      + '<input type="password" class="input-large" id="password" autocomplete="off" />'
                      + '<i class="help-inline icon16-pass-hide pointer" id="password-eye"></i>'
                    + '</div>'
                  + '</div>'

                  + '<div class="control-group d d01 hide">'
                    + '<div class="control-label">'
                      + '<label class="checkbox pointer">'
                        + '<input type="checkbox" id="auto-signin" value="1" checked />'
                        + 'Sign in automatically'
                      + '</label>'
                    + '</div>'
                  + '</div>'

                  + '<div class="control-group phone-tip hide">'
                    + '<div class="xalert">'
                      + 'Please include country code prefix, e.g.: +1 555 450 0303'
                    + '</div>'
                  + '</div>'


                  + '<div class="verify-before d d04 hide">'
                    + '<span class="xalert-fail">This identity requires verification before using.</span><br />'
                    + 'Confirm sending verification to your mailbox?'
                  + '</div>'

                  + '<div class="verify-after hide">'
                    + 'Verification sent, it should arrive in minutes. Please check your mailbox and follow the instruction.'
                  + '</div>'

                  + '<div class="verify-error hide">'
                    + '<span class="xalert-fail">Requested too much, hold on awhile.</span><br />'
                    + 'Receive no verification email? It might be mistakenly filtered as spam, please check and un-spam. Alternatively, use ‘Manual Verification’.'
                  + '</div>'

              + '</fieldset>'
            + '</form>',

        footer: ''
          + '<button class="xbtn-white d d01 xbtn-forgotpwd hide" data-dialog-from="identification" data-widget="dialog" data-dialog-type="forgotpassword">Forgot Password...</button>'
          + '<button class="xbtn-white d d02 d04 xbtn-startover hide">Start Over</button>'
          + '<button class="pull-right d d04 xbtn-blue xbtn-verify hide">Verify</button>'
          + '<a href="#" class="pull-right xbtn-setup d d00 hide">Looking for sign-up?</a>'
          + '<button class="pull-right xbtn-blue d d01 d02 x-signin disabled hide">Start</button>'
          //+ '<button class="pull-right xbtn-blue d d04 xbtn-success hide">Done</button>'
          + '<button class="pull-right xbtn-white d d03 xbtn-isee hide">I See</button>'
          + '<button class="pull-right xbtn-white d hide">OK</button>'
          + '<button class="pull-right xbtn-white d xbtn-oauth hide">Back</button>',

        others: ''
          + '<div class="isee d d03 hide">'
            + '<div class="modal-body">'
              + '<div class="shadow title">“Sign-Up-Free”</div>'
              + '<p>Tired of signing up all around? Just authorize through your existing accounts from other websites, such as Twitter, <span class="strike">Facebook, Google, etc.</span> (soon to support)</p>'
              + '<p>We hate spam, will NEVER disappoint your trust.</p>'
              + '<p>Alternatively, traditional registration process with email and password is also available.</p>'
            + '</div>'
          + '</div>'
          + '<div class="authentication d d05 hide">'
            + '<div class="modal-body">'
              + '<div class="shadow title">Authentication</div>'
              //+ '<div class="center shadow title">through Twitter</div>'
              + '<div class="content">'
                + '<img class="hide" src="/static/img/loading.gif" width="32" height="32" />'
                + '<p class="redirecting hide">Redirecting to <span class="oauth-provider"></span>…</p>'
                + '<p class="xalert-fail hide">Failed to connect with <span class="oauth-provider"></span> server.</p>'
              + '</div>'
            + '</div>'
          + '</div>'
      }

    }

  };

  dialogs.sandbox = {

    options: {

      onHideAfter: function () {
        this.destory();
      },

      backdrop: false,

      viewData: {
        // class
        cls: 'mblack modal-sandbox',

        title: 'Rome',

        body: ''
          + '<div class="shadow title">“Rome wasn\'t built in a day.”</div>'
          + '<p><span class="x-sign">EXFE</span> [’ɛksfi] is still in <span class="pilot">pilot</span> period (with <span class="sandbox">Rome</span> tag). We’re building up blocks, consequently something buggy or awkward may happen. Our apologies for any trouble you may encounter. Any feedback, please email <span class="feedback">feedback@exfe.com</span>. Much appreciated.</p>'
      }
    }
  };

  dialogs.welcome = {

    options: {
      events: {
        'click .xbtn-go': function () {
          var that = this;

          if (this._provider === 'email') {
            if (/^\/![a-zA-z0-9]+$/.test(window.location.pathname)) {
              window.location = window.location.pathname;
              return;
            }
          }
          else if (this.$('#follow').prop('checked') && this._token) {
            $.ajax({
              url: '/OAuth/followExfe?token=' + this._token,
              type: 'POST',
              data: {
                //token: this._token,
                identity_id: this._identity_id
              },
              success: function () {
                Store.remove('oauth');
              }
            });
          }

          that.hide();
        },

        'click .why': function () {
          this.$('.answer').toggleClass('hidden');
        }
      },

      onShowBefore: function (data) {
        var identity = data.identity
          , title = this.$('.title').eq(0);

        this._provider = identity.provider;
        this._identity_id = identity.id;
        this._token = data.token;
        this._following = data.following;

        title.text('Hi, ' + identity.name + '.');
        if (identity.provider === 'email') {
          this.$('.provider-email').removeClass('hide');
        } else if (identity.provider === 'twitter') {
          this.$('.provider-other').removeClass('hide');
          this.$('#follow').prop('checked', this._following);
        }
      },

      onHideAfter: function () {
        this.destory();
      },

      backdrop: false,

      viewData: {
        // class
        cls: 'mblack modal-large modal-wc',

        title: 'Welcome',

        body: ''
          + '<div class="shadow title"></div>'
          + '<div class="center shadow title" style="margin-bottom: 0;">Thanks for using <span class="x-sign">EXFE</span>.</div>'
          + '<p class="center">A utility for gathering with friends.</p>'
          + '<div class="modal-content">'
            + '<p>We save you from calling up every one RSVP, losing in endless emails and messages off the point.</p>'
            + '<p><span class="x">·X·</span> (cross) is a gathering of people, for any purpose. When you get an idea to call up friends to do something together, just <span class="oblique">Gather a <span class="x">·X·</span></span>.</p>'
            + '<p><span class="x-sign">EXFE</span> your friends.</p>'
            + '<p class="provider-email hide" style="color: #191919;">*A welcome email has been sent to your mailbox. Please check to verify your address.*</p>'
            + '<div class="provider-other hide">'
              + '&nbsp;&nbsp;<span class="underline why">why?</span>'
              + '<label class="pull-left checkbox pointer">'
                + '<input type="checkbox" id="follow" value="1" checked />'
                + 'Follow @<span class="x-sign">EXFE</span> on Twitter.'
              + '</label>'
              + '<p class="pull-left answer hidden">So we could send you invitation PRIVATELY through Direct Message. We hate spam, will NEVER disappoint your trust.</p>'
            + '</div>'
          + '</div>',

        footer: ''
          + '<button class="pull-right xbtn-white xbtn-go">GO</button>'
      }
    }
  };


  dialogs.forgotpassword = {

    updateIdentity: function (identity) {
      var provider = identity.provider;
      var $identity = this.$('.context-identity');
      this.$('.tab').addClass('hide');
      if (provider === 'email') {
        this.$('.tab1').removeClass('hide');
        this.$('.xbtn-send').data('identity', identity);
      }
      else {
        this.$('.tab2').removeClass('hide');
        this.$('.authenticate').data('identity', identity);
      }
      $identity.find('.avatar img').attr('src', identity.avatar_filename);
      $identity.find('.provider').attr('class', 'provider icon16-identity-' + identity.provider);
      $identity.find('.identity').text(identity.eun);
    },

    options: {
      onHideAfter: function (e) {
        if (this.befer) {
          this.befer.abort();
          this.befer = null;
        }
        // jquery.Event
        // TODO: 临时处理 , 首页 登录窗口
        if (e) {
          var dialog_from = this.dialog_from;
          if (dialog_from) {
            $('[data-dialog-type="' + dialog_from + '"]').data('dialog').hide();
          }
        }

        this.destory();
      },

      events: {
        'click .authenticate': function (e) {
          var that = this;
          var $e = $(e.currentTarget);
          var i = $e.data('identity');
          if (i) {
            that.befer = Api.request('forgotPassword'
              , {
                type: 'POST',
                data: {
                  provider: i.provider,
                  external_username: i.external_username
                },
                beforeSend: function () {
                  that.$('.send-before').removeClass('hide');
                  that.$('.send-after').addClass('hide');
                  $e.addClass('disabled');
                }
              }
              , function (data) {
                // 后台暂时没有 limit 限制
                if (data.action === 'REDIRECT') {
                  window.location.href = data.url;
                }
              }
              //, function (data) {}
            );
          }
          //that._oauth_ = $.ajax({
          //  url: '/OAuth/Authenticate?provider=',
          //  type: 'POST',
          //  dataType: 'JSON',
          //  data: {
          //    refere: window.location.href
          //  }
          //})
          //  .done(function (data) {
          //    var code = data.meta.code;
          //    if (code === 200) {
          //      window.location.href = data.response.redirect;
          //    }
          //  }
          //);
        },

        'click .caret-outer': function (e) {
          this.$('.dropdown-toggle').addClass('open');
          e.stopPropagation();
        },

        'hover .dropdown-menu > li': function (e) {
          var t = e.type,
              $e = $(e.currentTarget);

          $e[(t === 'mouseenter' ? 'add' : 'remove') + 'Class']('active');
        },

        'click .dropdown-menu > li': function (e) {
          var ids = this.$('.dropdown-menu').data('identities')
            , index = $(e.currentTarget).data('index');

          this.updateIdentity(ids[index]);
          // TODO: 优化
          //this.$('.dropdown-toggle').removeClass('open');
        },

        'click .xbtn-cancel': function () {
          var dialog_from = this.dialog_from;
          this.hide();
          if (dialog_from) {
            $('[data-dialog-type="' + dialog_from + '"]').data('dialog').element.removeClass('hide');
            $('#js-modal-backdrop').removeClass('hide');
            //$('[data-dialog-type="' + dialog_from + '"]').trigger('click.dialog.data-api');
            // TODO: 先简单处理，后面是否要保存 target 元素
          }
        },

        'click .xbtn-done': function (e) {
          this.hide(e);
          return;
        },

        'click .xbtn-send': function (e) {
          var that = this;
          var $e = $(e.currentTarget);
          if ($e.hasClass('disabled')) {
            return;
          }
          var i = $e.data('identity');
          if (i) {
            that.befer = Api.request('forgotPassword'
              , {
                type: 'POST',
                data: {
                  provider: i.provider,
                  external_username: i.external_username
                },
                beforeSend: function () {
                  that.$('.send-before').removeClass('hide');
                  that.$('.send-after').addClass('hide');
                  $e.addClass('disabled');
                },
                complete: function () {
                  $e.removeClass('disabled');
                }
              }
              , function (data) {
                // 后台暂时没有 limit 限制
                if (data.action === 'VERIFYING') {
                  that.$('.identity').next().removeClass('hide');
                  $e.addClass('hide');
                  that.$('.xbtn-done').removeClass('hide');
                  that.$('.send-before').addClass('hide');
                  that.$('.send-after').removeClass('hide');
                }
              }
              //, function (data) {}
            );
          }
        }
      },

      onShowBefore: function (e) {
        var that = this,
            ids = $(e.currentTarget).data('source'),
            l, first, eun;
        if (ids && (l = ids.length)) {
          first = ids[0];
          eun = first.external_username;
          if (first.provider === 'twitter') {
            eun = '@' + first.external_username;
          }
          first.eun = eun;
          if (1 < l) {
            that.$('.context-identity').addClass('switcher');
            var s = '';
            for (var i = 0; i < l; i++) {
              eun = ids[i].external_username;
              s += '<li data-index="' + i + '"><i class="pull-right icon16-identity-' + ids[i].provider + '"></i>';
              if (ids[i].provider === 'twitter') {
                eun = '@' + ids[i].external_username;
              }
              ids[i].eun = eun;
              s += '<span>' + eun + '</span>'
              s += '</li>';
            }
            that.$('.dropdown-menu').html(s).data('identities', ids);
          }

          this.updateIdentity(first);
        }
      },

      backdrop: false,

      viewData: {

        cls: 'mblack modal-fp',

        title: 'Forgot Password',

        body: ''
          + '<div class="shadow title">Forgot Password</div>'
          + '<div>You can reset your <span class="x-sign">EXFE</span> password through identity:</div>'
          + '<div class="context-identity">'
            + '<div class="pull-right avatar">'
              + '<img src="" alt="" width="40" height="40" />'
              + '<i class="provider"></i>'
            + '</div>'
            + '<div class="clearfix dropdown-toggle" data-toggle="dropdown">'
              + '<div class="pull-left box identity"></div>'
              + '<ul class="dropdown-menu"></ul>'
              + '<div class="pull-left caret-outer hide"><b class="caret"></b></div>'
            + '</div>'
          + '</div>'
          + '<div class="alert-label">'
            + '<div class="send-before tab tab1 hide">Confirm sending reset token to your mailbox?</div>'
            + '<div class="send-after tab hide">Verification sent, it should arrive in minutes. Please check your mailbox and follow the instruction.</div>'
            + '<div class="xalert-error tab hide">'
              + '<p>Requested too much, hold on awhile.</p>'
              + '<p>Receive no verification email? It might be mistakenly filtered as spam, please check and un-spam. Alternatively, use ‘Manual Verification’.</p>'
            + '</div>'

            + '<div class="authenticate-before tab tab2 hide">You will be directed to Twitter website to authenticate identity above, you can reset password then.</div>'
          + '</div>',

        footer: ''
          + '<button class="pull-right xbtn-white xbtn-done hide">Done</button>'
          + '<button class="pull-right xbtn-blue xbtn-send tab tab1 hide">Send</button>'
          + '<button class="pull-right xbtn-blue authenticate tab tab2 hide">Authenticate</button>'
          + '<a class="pull-right xbtn-cancel">Cancel</a>'

      }
    }

  }

  dialogs.changepassword = {

    options: {

      onHideAfter: function () {
        if (this.befer) {
          this.befer.abort();
          this.befer = null;
        }
        this.destory();
      },

      events: {
        'click .xbtn-resetpwd': function (e) {
          var user = Store.get('user');
          var identities = user.identities;
          var is = R.filter(identities, function (v) {
            if (v.status === 'CONNECTED') {
              return true;
            }
          });
          if (is.length === 1) {
            e.stopPropagation();
            this.hide();
            var d = new Dialog(dialogs.forgotpassword);
            d.dialog_from = 'changepassword';
            d.render();
            $(e.currentTarget).data('identity-id', is[0].id);
            d.show(e);
          }
        },
        'click .password-eye': function (e) {
          var $e = $(e.currentTarget);
          var $input = $e.prev();
          $input.prop('type', function (i, val) {
            return val === 'password' ? 'text' : 'password';
          });
          $e.toggleClass('icon16-pass-hide icon16-pass-show');
        },
        'click .xbtn-forgotpwd': function (e) {
          var user = Store.get('user')
            , identities = user.identities
            , ids = [];

          R.each(identities, function (v) {
            if (v.status === 'CONNECTED') {
              ids.push(v);
            }
          });
          $(e.currentTarget).data('source', ids);
        },
        'click .xbtn-success': function (e) {
          var that = this;
          var cppwd = that.$('#cppwd').val();
          var cpnpwd = that.$('#cp-npwd').val();

          // note: 暂时先用 alert
          if (!cppwd || !cpnpwd) {
            if (!cppwd) {
              alert('Please input current password.');
            } else {
              alert('Please input new password.');
            }
            return;
          }

          e.preventDefault();

          var $e = $(e.currentTarget),
              authorization = Store.get('authorization'),
              user_id = authorization.user_id,
              token = authorization.token;

          //function _setPassword(token, user_id, cppwd, cpnpwd, that, $e) {
          that.befer = Api.request('setPassword',
            {
              type: 'POST',
              params: { token: token },
              resources: { user_id: user_id },
              data: {
                current_password: cppwd,
                new_password: cpnpwd
              },
              beforeSend: function () {
                $e && $e.addClass('disabled loading');
              },
              complete: function () {
                $e && $e.removeClass('disabled loading');
              }
            }
            , function (data) {
              Store.set('authorization', data);
              that && that.destory();
            }
            , function (data) {
              var meta = data && data.meta;
              if (meta) {
                if (meta.code === 403) {
                  var errorType = data.meta.errorType;
                  if (errorType === 'invalid_current_password') {
                    alert('Invalid current password.');
                  }
                }
                else if (meta.code === 401
                    && meta.errorType === 'authenticate_timeout') {

                  that && that.destory();

                  //var $d = $('<div data-widget="dialog" data-dialog-type="authentication" data-destory="true" class="hide"></div>');
                  //$('#app-tmp').append($d);
                  //$d.trigger('click.dialog.data-api', {callback: function () { setPassword(token, user_id, cppwd, cpnpwd); }});
                }
              }
            }
          );
          //}

          //_setPassword(token, user_id, cpnpwd, that, $e);
        }
      },

      onShowBefore: function () {
        var user = Store.get('user');
        this.$('.avatar > img').attr('src', user.avatar_filename);
        this.$('.username').text(user.name);
      },

      backdrop: false,

      viewData: {

        cls: 'modal-cp mblack modal-large',

        title: 'Change Password',

        body: ''
          + '<div class="shadow title">Change Password</div>'
          + '<form class="modal-form">'
            + '<fieldset>'
              + '<legend>Enter your current <span class="x-sign">EXFE</span> password, and set new one. All your identities share the same password for sign-in and account management.</legend>'

              + '<div class="clearfix context-user">'
                + '<div class="pull-left avatar">'
                  + '<img src="" width="40" height="40" />'
                + '</div>'
                + '<div class="pull-left username"></div>'
              + '</div>'

              + '<div class="control-group">'
                + '<label class="control-label" for="cppwd">Password:</label>'
                + '<div class="controls">'
                  + '<input class="input-large" id="cppwd" placeholder="Current password" type="password" autocomplete="off" />'
                  + '<i class="help-inline password-eye icon16-pass-hide pointer"></i>'
                + '</div>'
              + '</div>'

              + '<div class="control-group">'
                + '<label class="control-label" for="cp-npwd">New Password:</label>'
                + '<div class="controls">'
                  + '<input class="input-large" id="cp-npwd" placeholder="Set new EXFE password" type="password" autocomplete="off" />'
                  + '<i class="help-inline password-eye icon16-pass-hide pointer"></i>'
                + '</div>'
              + '</div>'

            + '</fieldset>'
          + '</form>',

        footer: ''
          + '<button class="xbtn-white xbtn-forgotpwd" data-dialog-from="changepassword" data-widget="dialog" data-dialog-type="forgotpassword">Forgot Password...</button>'
          + '<button class="pull-right xbtn-blue xbtn-success">Change</button>'
          + '<a class="pull-right xbtn-discard" data-dismiss="dialog">Discard</a>'

      }

    }

  };

  dialogs.addidentity = {
    options: {

      errors: {
        'failed': 'Password incorrect.',
        'no_password': 'Password incorrect.',
        'no_external_id': 'Set up this new identity.'
      },

      backdrop: false,

      events: {
        'click #password-eye': function (e) {
          var $e = $(e.currentTarget);
          var $input = $e.prev();
          $input.prop('type', function (i, val) {
            return val === 'password' ? 'text' : 'password';
          });
          $e.toggleClass('icon16-pass-hide icon16-pass-show');
        },
        'click .xbtn-forgotpwd': function (e) {
          var $btn = $(e.currentTarget)
            , disabled = $btn.hasClass('disabled');

          if (disabled) {
            e.stopPropagation();
            return false;
          }
        },
        'click .xbtn-startover': function () {
          this.$('.d1, d2, d3').addClass('hide');
          this.$('.d0').removeClass('hide');
          this.$('#identity').val('').focus();
        },
        'click .xbtn-add': function (e) {
          e.preventDefault();
          var that = this
          var flag = that.registration_flag;
          var od = that._identity
          if (!od) {
            return false;
          }

          var provider = od.provider
            , external_username = od.external_username || ''
            , user = Store.get('user');

          // 如果该身份已经添加过，则不再重复添加
          if (R.find(user.identities, function (v) {
                if (v.provider === provider && v.external_username === external_username) { return true; }
              })) {
            that.destory();
            return;
          }

          if (flag === 'SIGN_IN') {
            var password = $.trim(that.$('#password').val());
            var successe = false;
            var btoken = '';
            var defer = Api.request('signin'
              , {
                type: 'POST',
                data: {
                  external_username: od.external_username,
                  provider: od.provider,
                  password: password,
                  name: od.name || '',
                  auto_signin:  false
                }
              }
              , function (data) {
                  successe = true;
                  btoken = data.token;
                  that.$('[for="password"]')
                    .removeClass('label-error')
                    .find('span').text('');
                  that.$('#name')
                    .nextAll('.xalert-info')
                    .addClass('hide');
                }
              , function (data) {
                var errorType = data.meta.errorType,
                    errorDetail = data.meta.errorDetail;
                if (errorType === 'no_password' || errorType === 'failed') {
                  that.$('[for="password"]')
                    .addClass('label-error')
                    .find('span').text(errorDetail || that.options.errors[errorType]);
                } else if (errorType === 'no_external_id') {
                  that.$('#name')
                    .nextAll('.xalert-info')
                    .removeClass('hide');
                }
              }
            );
            defer.done(function (){
              if (successe) {
                var authorization = Store.get('authorization')
                  , token = authorization.token
                  , id = od.id;
                that.defer = Api.request('mergeIdentities',
                  {
                    type: 'POST',
                    params: { token: token },
                    data: {
                      browsing_identity_token: btoken,
                      identity_ids: '[' + id + ']'
                    }
                  },
                  function (data) {
                    var identity = data.status[id];
                    if (identity) {
                      var user = Store.get('user'),
                          identities = user.identities,
                          s, h;
                      identities.push(identity);
                      Store.set('user', user);
                      s = Handlebars.compile($('#jst-identity-item').html());
                      h = s(identity);
                      $('.identity-list').append(h);
                      that && that.destory();
                    }
                  }
                );
              }
            });
            that.defer = defer;
          }
          else if (flag === 'SIGN_UP') {
            var addIdentity = function (external_username, provider, that) {
              var authorization = Store.get('authorization')
                , token = authorization.token;
              var defer = Api.request('addIdentity',
                {
                  type: 'POST',
                  params: { token: token },
                  data: {
                    external_username: external_username,
                    provider: provider
                  }
                },
                function (data) {
                  var identity = data.identity
                    , user = Store.get('user')
                    , identities = user.identities;
                  identities.push(identity);
                  Store.set('user', user);
                  var s = Handlebars.compile($('#jst-identity-item').html());
                  var h = s(data.identity);
                  $('.identity-list').append(h);
                  that && that.destory();
                },
                function (data) {
                  var meta = data && data.meta;
                  if (meta
                      && meta.code === 401
                      && meta.errorType === 'authenticate_timeout') {

                    that && that.destory();
                    var $d = $('<div data-widget="dialog" data-dialog-type="authentication" data-destory="true" class="hide"></div>');
                    $('#app-tmp').append($d);
                    var e = $.Event('click.dialog.data-api');
                    e._data = {callback: function () { addIdentity(external_username, provider)}};
                    $d.trigger(e);
                  }
                }
              );
              that && (that.defer = defer);
            }
            addIdentity(external_username, provider, that);
          }
          else if (flag === 'AUTHENTICATE') {
            that.$('.oauth > a[data-oauth="' + od.provider + '"]').trigger('click');
          }
        },
        'click .xbtn-verify': function (e) {
          e.preventDefault();
          var that = this,
              od = that._identity;

          var $e = $(e.currentTarget);
          if ($e.hasClass('xbtn-success')) {
            that.$('.verify-after').addClass('hide');
            that.hide();
            return false;
          }
          if (!od) {
            return false;
          }

          var provider = od.provider,
              external_username = od.external_username || '',
              user = Store.get('user');

          // 如果该身份已经添加过，则不再重复添加
          if (R.find(user.identities, function (v) {
                if (v.provider === provider && v.external_username === external_username) { return true; }
              })) {
            that.destory();
            return;
          }

          function addIdentity(external_username, provider, that) {
            var authorization = Store.get('authorization')
              , token = authorization.token;
            var defer = Api.request('addIdentity',
              {
                type: 'POST',
                params: { token: token },
                data: {
                  external_username: external_username,
                  provider: provider
                }
              },
              function (data) {
                var identity = data.identity
                  , user = Store.get('user')
                  , identities = user.identities;
                identities.push(identity);
                Store.set('user', user);
                var s = Handlebars.compile($('#jst-identity-item').html());
                var h = s(data.identity);
                $('.identity-list').append(h);
                that && that.$('.verify-before').addClass('hide');
                that && that.$('.verify-after').removeClass('hide');
                that && that.$('.xbtn-verify').addClass('hide');
                that && that.$('.xbtn-done').removeClass('hide');
              },
              function (data) {
                if (that) {
                  that.$('.verify-before').removeClass('hide');
                  that.$('.verify-after').addClass('hide');
                  that.$('.xbtn-verify').removeClass('hide');
                  that.$('.xbtn-done').addClass('hide');
                }
                var meta = data && data.meta;
                if (meta
                    && meta.code === 401
                    && meta.errorType === 'authenticate_timeout') {

                  that && that.destory();
                  var $d = $('<div data-widget="dialog" data-dialog-type="authentication" data-destory="true" class="hide"></div>');
                  $('#app-tmp').append($d);
                  var e = $.Event('click.dialog.data-api');
                  e._data = {callback: function () { addIdentity(external_username, provider)}};
                  $d.trigger(e);
                }
              }
            );
            that && (that.defer = defer);
          }
          addIdentity(external_username, provider, that);
        },
        'click .xbtn-done': function () {
          this.hide();
        },
        'click .oauth > a': function (e) {
          e.preventDefault();
          var external_username = ''
            , provider = $(e.currentTarget).data('oauth')
            , that = this;

          that.$('.authentication')
            .find('.oauth-provider')
            .text(provider);

          function addIdentity(external_username, provider, that) {
            var authorization = Store.get('authorization')
              , token = authorization.token;
            var defer = Api.request('addIdentity',
              {
                type: 'POST',
                params: { token: token },
                data: {
                  refere: window.location.href,
                  external_username: external_username,
                  provider: provider
                },
                beforeSend: function () {
                  that.$('.modal-body').eq(0).css('opacity', 0);
                  that.switchTab('d05');
                  that.$('.authentication')
                    .find('img')
                    .removeClass('hide');

                  that.$('.authentication')
                    .find('.redirecting')
                    .removeClass('hide');

                  that.$('.authentication')
                    .find('.xalert-fail')
                    .addClass('hide');
                }
              },
              function (data) {
                window.location.href = data.url;
                that && that.destory();
              },
              function (data) {
                var meta = data && data.meta;
                if (meta
                    && meta.code === 401
                    && meta.errorType === 'authenticate_timeout') {

                  that && that.destory();
                  var $d = $('<div data-widget="dialog" data-dialog-type="authentication" data-destory="true" class="hide"></div>');
                  $('#app-tmp').append($d);
                  var e = $.Event('click.dialog.data-api');
                  e._data = {callback: function () { addIdentity(external_username, provider)}};
                  $d.trigger(e);
                }
              }
            );
            that && (that.defer = defer);
          }
          addIdentity(external_username, provider, that);
          return false;
        }
      },

      onShowBefore: function () {
        this.element.removeClass('hide');
        this.$('#identity').focusend();
      },

      onHideAfter: function () {
        if (this.befer) {
          this.befer.abort();
          this.befer = null;
        }
        this.destory();
      },

      viewData: {
        // class
        cls: 'mblack modal-id modal-ai',

        title: 'Add Identity',

        body: ''
            + '<div class="shadow title">Add Identity</div>'
            + '<div class="clearfix">'
              + '<div class="pull-left authorize">Authenticate with:</div>'
              + '<div class="pull-left oauth">'
                + '<a href="#" class="oauth-twitter" data-oauth="twitter">twitter</a>'
                + '<a href="#" class="oauth-facebook" data-oauth="facebook">facebook</a>'
                + '<a href="#" class="oauth-dropbox hide" data-oauth="dropbox">dropbox</a>'
                + '<a href="#" class="oauth-flickr hide" data-oauth="flickr">flickr</a>'
                + '<a href="#" class="oauth-instagram hide" data-oauth="instagram">instagram</a>'
              + '</div>'
            + '</div>'
            + '<div class="orspliter">or</div>'
            + '<form class="modal-form">'
              + '<fieldset>'
                + '<legend>Use your online identity:</legend>'

                  + '<div class="clearfix control-group">'
                    + '<label class="control-label" for="identity">Identity: <span class="xalert-message"></span></label>'
                    + '<div class="pull-right user-identity hide">'
                      + '<div class="avatar">'
                        + '<img src="" alt="" width="40" height="40" />'
                        + '<i class="provider"></i>'
                      + '</div>'
                    + '</div>'
                    + '<div class="controls">'
                      + '<input type="text" class="input-large identity" id="identity" autocomplete="off" data-widget="typeahead" data-typeahead-type="identity" placeholder="Enter your email or phone" />'
                      + '<i class="help-subject"></i>'
                      + '<i class="help-inline small-loading hide"></i>'
                      + '<div class="xalert xalert-error hide" style="margin-top: 5px;"></div>'

                      + '<div class="xalert xalert-error authenticate hide" style="margin-top: 5px;">'
                        + '<span class="xalert-fail">Please directly authenticate identity above.</span><br />To enable password sign-in for this identity, set an <span class="x-sign">EXFE</span> password first in your profile page.'
                      + '</div>'

                    + '</div>'
                  + '</div>'

                  + '<div class="control-group d d0">'
                    + '<label class="control-label" for="password">Password: <span></span></label>'
                    + '<div class="controls">'
                      + '<input type="password" class="input-large" id="password" autocomplete="off" placeholder="Identity\'s EXFE password" />'
                      + '<i class="help-inline icon16-pass-hide pointer" id="password-eye"></i>'
                    + '</div>'
                  + '</div>'

                  + '<div class="control-group phone-tip hide">'
                    + '<div class="xalert">'
                      + 'Please include country code prefix, e.g.: +1 555 450 0303'
                    + '</div>'
                  + '</div>'

                  + '<div class="verify-before d d1 hide">'
                    + '<span class="xalert-fail">This identity requires verification before using.</span><br />'
                    + 'Confirm sending verification to your mailbox?'
                  + '</div>'

                  + '<div class="verify-after d2 hide">'
                    + 'Verification sent, it should arrive in minutes. Please check your mailbox and follow the instruction.'
                  + '</div>'

              + '</fieldset>'
            + '</form>',

        footer: ''
          + '<button class="xbtn-white xbtn-startover d d1 hide">Start Over</button>'
          + '<button class="xbtn-white xbtn-forgotpwd d d0 disabled" data-dialog-from="addidentity" data-widget="dialog" data-dialog-type="forgotpassword">Forgot Password...</button>'
          + '<button class="pull-right xbtn-blue xbtn-add d d0">Add</button>'
          + '<button class="pull-right xbtn-blue xbtn-verify d d1 hide">Verify</button>'
          + '<button class="pull-right xbtn-white xbtn-done d d2 hide">Done</button>',

        others: ''
          + '<div class="authentication d d05 hide">'
            + '<div class="modal-body">'
              + '<div class="shadow title">Authentication</div>'
              //+ '<div class="center shadow title">through Twitter</div>'
              + '<div class="content">'
                + '<img class="hide" src="/static/img/loading.gif" width="32" height="32" />'
                + '<p class="redirecting hide">Redirecting to <span class="oauth-provider"></span>…</p>'
                + '<p class="xalert-fail hide">Failed to connect with <span class="oauth-provider"></span> server.</p>'
              + '</div>'
            + '</div>'
          + '</div>'
      }

    },

    switchTab: function (t) {
      this.$('.d')
        .not('.hide')
        .addClass('hide')
        .end()
        .filter('.' + t)
        .removeClass('hide');

      this.switchTabType = t;
    },

    availability: false,

    init: function () {
      var that = this;
      that.registration_flag = '';
      Bus.off('widget-dialog-identification-auto');
      Bus.on('widget-dialog-identification-auto', function (data) {
        if (data) {
          if (data.identity && data.identity.avatar_filename) {
            that._identity = data.identity;
            that.$('.user-identity').removeClass('hide')
              .find('img').attr('src', data.identity.avatar_filename)
              .next().attr('class', 'provider icon16-identity-' + data.identity.provider);
          } else {
            that.$('.user-identity').addClass('hide');
            that._identity = null;
          }

          if (data.identity.provider === 'phone') {
            that.$('.phone-tip').toggleClass('hide', /\+/.test(that.$('#identity').val()));
          }

          var registration_flag = data.registration_flag;
          that.registration_flag = registration_flag || '';
          // SIGN_IN
          if (registration_flag === 'SIGN_IN') {
            that.$('.d1, .d2, .d3').addClass('hide');
            that.$('.d0').removeClass('hide');
            that.$('.xbtn-forgotpwd').removeClass('disabled').data('source', [that._identity]);
          }
          // SIGN_UP 新身份
          else if (registration_flag === 'SIGN_UP') {
            that._identity = Util.parseId(that.$('#identity').val());
            that.$('.d0, .d1, .d3').addClass('hide');
            that.$('.xbtn-add').removeClass('hide');
          }
          // AUTHENTICATE
          else if (registration_flag === 'AUTHENTICATE') {
            that._identity = Util.parseId(that.$('#identity').val());
            that.$('.d1, .d2').addClass('hide');
            that.$('.d0, .d3').removeClass('hide');
            that.$('label[for="password"]').parent().addClass('hide');
          }
          // VERIFY
          else if (registration_flag === 'VERIFY') {
            that.$('.d0, .d2, .d3').addClass('hide');
            that.$('.d1').removeClass('hide');
          }

          that.$('.xbtn-success').removeClass('disabled');
        } else {
          that.$('.xbtn-success').addClass('disabled');
          that.$('.phone-tip').addClass('hide');
          that.$('.xbtn-forgotpwd').addClass('disabled').data('source', null);
        }


      });
      Bus.off('widget-dialog-identification-nothing');
      Bus.on('widget-dialog-identification-nothing', function () {
        that.$('.control-group.d').removeClass('hide');
        that.$('.phone-tip').addClass('hide');
      });
    }
  };

  dialogs.addIdentityAfterSignIn = {

    options: {

      events: {
        'click .xbtn-cancel': function () {
          this.destory();
        },
        'click .xbtn-add': function () {
          var that = this
            , authorization = Store.get('authorization')
            , token = authorization.token
            , external_username = this._identity.external_username
            , provider = this._identity.provider;
          Api.request('addIdentity',
            {
              type: 'POST',
              params: { token: token },
              data: {
                external_username: external_username,
                provider: provider
              }
            },
            function (data) {
              var identity = data.identity
                , user = Store.get('user')
                , identities = user.identities;
              identities.push(identity);
              Store.set('user', user);
              that.destory();
              window.location.href = '/';
            },
            function (data) {
              var meta = data && data.meta;
              if (meta
                  && meta.code === 401
                  && meta.errorType === 'authenticate_timeout') {

                that.destory();
                var $d = $('<div data-widget="dialog" data-dialog-type="authentication" data-destory="true" class="hide"></div>');
                $('#app-tmp').append($d);
                $d.trigger('click.dialog.data-api');
              }
            }
          );
        }
      },

      backdrop: false,
      viewData: {
        cls: 'mblack modal-aifsi',
        title: 'Set Up Account',
        body: ''
            + '<div class="shadow title">Add Identity</div>'
            + '<div class="clearfix context-user">'
              + '<div class="pull-left avatar">'
                + '<img width="40" height="40" alt="" src="" />'
              + '</div>'
              + '<div class="pull-left username"></div>'
            + '</div>'
            + '<div>Please authorize identity underneath through Twitter to add into your account above.</div>'
            + '<div class="context-identity">'
              + '<div class="pull-right avatar">'
                + '<img width="40" height="40" alt="" src="" />'
                + '<i class="provider"></i>'
              + '</div>'
              + '<div class="clearfix">'
                + '<div class="pull-left box identity"></div>'
              + '</div>'
            + '</div>',

        footer: ''
          + '<button class="pull-right xbtn-blue xbtn-add">Add</button>'
          + '<a class="pull-right xbtn-cancel">Cancel</a>'
      },

      onShowBefore: function (e) {
        var data = $(e.currentTarget).data('source')
          , identity = data.identity
          , user = Store.get('user');
        this._identity = identity;
        this.$('.context-user')
          .find('img').attr('src', user.avatar_filename)
          .parent()
          .next().text(user.name);
        this.$('.context-identity')
          .find('img').attr('src', identity.avatar_filename)
          .next().addClass('icon16-identity-' + identity.provider);
        this.$('.identity').text(Util.printExtUserName(identity));
        if (identity.provider !== 'email') {
          this.$('.xbtn-done').text('Authorize');
        }
      }

    }

  };


  // merge identity
  dialogs.mergeidentity = {

    options: {
      onHideAfter: function () {
        this.destory();
      },

      events: {
        'click .xbtn-donot': function () {
          this.hide();
        },
        'click .xbtn-merge': function () {
          var that = this
            , $ids = this.$('.merge-list').find('input:checked')
            , ids = [];
          if ($ids.length) {
            for (var i = 0, l = $ids.length; i < l; ++i) {
              ids.push($ids.eq(i).parents('li').data('identity-id'));
            }
            Api.request('mergeIdentities'
              , {
                type: 'POST',
                //params: { token: token },
                params: { token: this.browsing_token },
                data: {
                  //browsing_identity_token: this.browsing_token,
                  identity_ids: '[' + ids.toString() + ']'
                }
              }
              , function () {
                  that.hide();
                  window.location.href = '/';
                }
            );
            return;
          }
          this.hide();
        }
      },

      backdrop: false,

      viewData: {

        //class
        cls: 'mblack modal-mi',

        title: 'Merge Identity',

        body: ''
          + '<div class="shadow title">Merge Identity</div>'
          + '<div>You just successfully merged identity underneath:</div>'
          + '<div class="context-identity">'
            + '<div class="pull-right avatar">'
              + '<img width="40" height="40" alt="" src="" />'
              + '<i class="provider"></i>'
            + '</div>'
            + '<div class="clearfix">'
              + '<div class="pull-left box identity"></div>'
            + '</div>'
          + '</div>'
          + '<div class="clearfix merge-container">'
            + '<div class="alert-label">Following identities might also belong to you. Merge them into your current account to avoid switching identities back and forth.</div>'
            + '<div class="merge-list">'
              + '<ul class="unstyled">'
              + '</ul>'
            + '</div>'
          + '</div>',

        footer: ''
          + '<button class="pull-right xbtn-blue xbtn-merge" style="margin-left: 10px;">Merge</button>'
          + '<button class="pull-right xbtn-white xbtn-donot">Do NOT</button>'

      },

      onShowBefore: function (e) {
        var data = $(e.currentTarget).data('source')
          , merged_identity = data.merged_identity
          , browsing_token = data.browsing_token
          , mergeable_user = data.mergeable_user
          , identities = mergeable_user.identities
          , li = '<li class="clearfix" data-identity-id="{{id}}">'
                + '<label for="identity-{{i}}">'
                  + '<input class="pull-left" id="identity-{{i}}" name="identity-{{i}}" type="checkbox" />'
                  + '<div class="pull-left box identity">{{external_username}}</div>'
                  + '<div class="pull-right avatar">'
                    + '<img width="40" height="40" alt="" src="{{avatar_filename}}" />'
                    + '<i class="provider icon16-identity-{{provider}}"></i>'
                  + '</div>'
                + '</label>'
              + '</li>'
          , $ul = this.$('.merge-list ul');
        this.$('.context-identity')
          .find('img').attr('src', merged_identity.avatar_filename);
        this.$('.context-identity')
          .find('.identity').text(Util.printExtUserName(merged_identity));
        this.browsing_token = browsing_token;
        for (var i = 0, l = identities.length; i < l; ++i) {
          $ul.append(
            $(li
              .replace('{{id}}', identities[i].id)
              .replace(/\{\{i\}\}/g, i)
              .replace('{{external_username}}', Util.printExtUserName(identities[i]))
              .replace('{{avatar_filename}}', identities[i].avatar_filename)
              .replace('{{provider}}', identities[i].provider)
             ));
        }
      }

    }

  };


  // emial Verification
  dialogs.verification_email = {

    options: {

      onHideAfter: function () {
        if (this.befer) {
          this.befer.abort();
          this.befer = null;
        }
        this.destory();
      },

      events: {
        'click .xbtn-verify': function (e) {
          var $e = $(e.currentTarget);
          if ($e.hasClass('disabled') || $e.hasClass('success')) {
            if ($e.hasClass('success')) {
              this.hide();
            }
            return;
          }
          var that = this;
          var identity_id = $e.data('identity_id');
          var authorization = Store.get('authorization');
          var token = authorization.token;
          this.befer = Api.request('verifyUserIdentity'
            , {
              type: 'POST',
              params: { token: token },
              data: { identity_id: identity_id },
              beforeSend: function () {
                $e.addClass('disabled');
              },
              complete: function () {
                $e.removeClass('disabled');
              }
            }
            , function (data) {
              that.$('.verify-before').addClass('hide');
              if (data.action === 'VERIFYING') {
                that.$('.verify-after').removeClass('hide');
                $e.text('Done').addClass('success');
              } else {
                that.$('.xalert-error').removeClass('hide');
              }
            }
          );
        },

        'click .xbtn-cancel': function () {
          var dialog_from = this.dialog_from;
          this.hide();
          if (dialog_from) {
            $('[data-dialog-type="' + dialog_from + '"]').trigger('click.dialog.data-api');
            // TODO: 先简单处理，后面是否要保存 target 元素
            $('#identity').focusend();
          }
        }

      },

      backdrop: false,

      viewData: {

        //class
        cls: 'mblack modal-ve',

        title: 'Verification',

        body: ''
          + '<div class="shadow title">Identity Verification</div>'
          + '<div>Identity to verify:</div>'
          + '<div class="pull-right user-identity">'
            + '<img class="avatar" src="" alt="" width="40" height="40">'
            + '<i class="provider icon16-identity-email"></i>'
          + '</div>'
          + '<div class="box identity"></div>'
          + '<p class="verify-before">Confirm sending verification to your mailbox?</p>'
          + '<p class="verify-after hide">Verification sent, it should arrive in minutes. Please check your mailbox and follow the instruction.</p>'
          + '<div class="xalert-error hide"><span class="xalert-fail">Requested too much, hold on awhile.</span><br />Receive no verification email? It might be mistakenly filtered as spam, please check and un-spam. Alternatively, use ‘Manual Verification’.</div>',

        footer: ''
          //+ '<button class="xbtn-white">Manual Verification</button>'
          + '<button class="pull-right xbtn-blue xbtn-verify">Verify</button>'
          + '<a class="pull-right xbtn-cancel">Cancel</a>'

      },

      onShowBefore: function (e) {
        var $e = $(e.currentTarget);
        var identity_id = $e.data('identity-id') || $e.parents('li').data('identity-id');
        var user = Store.get('user');
        var identity = R.filter(user.identities, function (v) {
          if (v.id === identity_id) {
            return true;
          }
        })[0];
        this.$('.xbtn-verify').data('identity_id', identity.id);
        this.$('.identity').text(identity.external_id);
        this.$('.avatar').attr('src', identity.avatar_filename);
      }

    }

  };

  // oauth Verification
  dialogs.verification_oauth = {

    options: {

      events: {

        'click .xbtn-verify': function (e) {
          var $e = $(e.currentTarget);
          var that = this;
          if ($e.hasClass('disabled') || $e.hasClass('success')) {
            if ($e.hasClass('success')) {
              this.hide();
            }
            return;
          }
          var identity_id = $e.data('identity_id');
          var authorization = Store.get('authorization');
          var token = authorization.token;

          this.befer = Api.request('verifyUserIdentity'
            , {
              type: 'POST',
              params: { token: token },
              data: { identity_id: identity_id },
              beforeSend: function () {
                $e.addClass('disabled');
              },
              complete: function () {
                $e.removeClass('disabled');
              }
            }
            , function (data) {
                window.location.href = data.url;
              }
            , function (data) {
                var code = data && data.meta && data.meta.code;
                if (code === 400) {
                  that.hide();
                }
              }
          );
          e.preventDefault();
          return false;
        },

        'click .xbtn-cancel': function () {
          this.hide();
        }

      },

      backdrop: false,

      viewData: {

        //class
        cls: 'mblack modal-ve',

        title: 'Verification',

        body: ''
          + '<div class="shadow title">Identity Verification</div>'
          + '<div>Identity to verify:</div>'
          + '<div class="pull-right user-identity">'
            + '<img class="avatar" src="" alt="" width="40" height="40">'
            + '<i class="provider"></i>'
          + '</div>'
          + '<div class="box identity"></div>'
          + '<p class="xalert-twitter hide">You will be directed to Twitter website to authenticate. Don’t forget to follow @<span class="x-sign">EXFE</span> so we could send you invitation PRIVATELY through Direct Message.</p>'
          + '<p>We hate spam, will NEVER disappoint your trust.</p>',

        footer: ''
          + '<button class="pull-right xbtn-blue xbtn-verify">Verify</button>'
          + '<a class="pull-right xbtn-cancel">Cancel</a>'

      },

      onHideAfter: function () {
        if (this.befer) {
          this.befer.abort();
          this.befer = null;
        }
        this.destory();
      },

      onShowBefore: function (e) {
        var $e = $(e.currentTarget);
        var identity_id = $e.parents('li').data('identity-id');
        var user = Store.get('user');
        var identity = R.find(user.identities, function (v) {
          if (v.id === identity_id) {
            return true;
          }
        });
        this.$('.xbtn-verify').data('identity_id', identity.id);
        this.$('.identity').text(Util.printExtUserName(identity));
        this.$('.avatar').attr('src', identity.avatar_filename);
        this.$('i.provider').addClass('icon16-identity-' + identity.provider);
        this.$('.xalert-' + identity.provider).removeClass('hide');
      }
    }

  };

  dialogs.verification_phone = {

    options: {

      events: {
      },

      backdrop: false,

      viewData: {

        cls: 'mblack modal-ve',

        title: 'Verification',

        body: ''
          + '<div class="shadow title">Identity Verification</div>'
          + '<div>Identity to verify:</div>'
          + ''

      }

    }

  };

  dialogs.setpassword = {

    options: {

      onHideAfter: function () {
        this.befer && this.befer.abort() && (this.befer = null);
        this.destory();
      },

      events: {
        'click .password-eye': function (e) {
          var $e = $(e.currentTarget);
          var $input = $e.prev();
          $input.prop('type', function (i, val) {
            return val === 'password' ? 'text' : 'password';
          });
          $e.toggleClass('icon16-pass-hide icon16-pass-show');
        },
        'click .xbtn-success': function (e) {
          var that = this;
          var stpwd = that.$('#stpwd').val();
          var xbtn = that.srcNode;

          // note: 暂时先用 alert
          if (!stpwd) {
            if (!stpwd) {
              alert('Please set EXFE password.');
            }
            return;
          }

          e.preventDefault();

          var $e = $(e.currentTarget)
            , user = this._user
            , token = this._token
            , signed = this.signed;
          if (this._setup) {
            var _setPassword = function (signed, token, user, stpwd, xbtn, that) {
              var befer = Api.request('setPassword'
                , {
                  type: 'POST',
                  params: { token: token },
                  resources: { user_id: user.id },
                  data: { new_password: stpwd },
                  beforeSend: function () {
                    $e.addClass('disabled loading');
                  },
                  complete: function () {
                    $e.removeClass('disabled loading');
                  }
                }
                , function (data) {
                  Store.set('authorization', data);
                  Bus.on('app:user:signin', data.token, data.user_id, true);
                  xbtn && xbtn
                    .data('dialog', null)
                    .data('dialog-type', 'changepassword')
                    .find('span').text('Change Password...');
                  $('.set-up').remove();
                  that && that.hide();
                }
                , function (data) {
                  that && that.hide();
                  var meta = data.meta;
                  if (meta.code === 403) {
                    var errorType = meta.errorType;
                    if (errorType === 'invalid_current_password') {
                      alert('Invalid current password.');
                    }
                  }
                  else if (meta.code === 401
                      && meta.errorType === 'authenticate_timeout') {

                    if (signed) {
                      var $d = $('<div data-widget="dialog" data-dialog-type="authentication" data-destory="true" class="hide"></div>');
                      $('#app-tmp').append($d);
                      var authorization = Store.get('authorization');
                      token = authorization.token;
                      $d.trigger('click.dialog.data-api', {callback: function () { _setPassword(signed, token, user, stpwd); }});
                    }
                  }
                }
              );
              that && (that.befer = befer);
            }
            _setPassword(signed, token, user, stpwd, xbtn, that);
          }
          else {
            var _resetPassword = function (signed, token, user, stpwd, that) {
              var befer = Api.request('resetPassword',
                {
                  type: 'POST',
                  data: {
                    token: token,
                    name: user.name,
                    password: stpwd
                  }
                },
                function (data) {
                  Store.set('authorization', data.authorization);
                  that && that.hide();
                  window.location.href = '/';
                }
                , function (data) {
                    that && that.hide();
                    var meta = data.meta;
                    if (meta
                        && meta.code === 401
                        && meta.errorType === 'authenticate_timeout') {

                      var $d = $('<div data-widget="dialog" data-dialog-type="authentication" data-destory="true" class="hide"></div>');
                      $('#app-tmp').append($d);
                      var authorization = Store.get('authorization');
                      token = authorization.token;
                      $d.trigger('click.dialog.data-api', {callback: function () { _resetPassword(signed, token, user, stpwd); }});
                    }
                  }
              );
              that && (that.befer = befer);
            }
            _resetPassword(signed, token, user, stpwd, that);
          }
        }
      },

      backdrop: false,

      viewData: {

        // class
        cls: 'mblack modal-sp',

        title: 'Set Password',

        body: ''
          + '<div class="shadow title">Set Password</div>'
          + '<form class="modal-form">'
            + '<fieldset>'
              + '<legend>Please set <span class="x-sign">EXFE</span> password of your account.<br />All your identities share the same password for sign-in and account management.</legend>'

              + '<div class="clearfix context-user">'
                + '<div class="pull-left avatar">'
                  + '<img width="40" height="40" alt="" src="" />'
                + '</div>'
                + '<div class="pull-left username"></div>'
              + '</div>'

              + '<div class="control-group">'
                + '<label class="control-label" for="stpwd">Password:</label>'
                + '<div class="controls">'
                  + '<input class="input-large" id="stpwd" placeholder="Set EXFE password" type="password" autocomplete="off" />'
                  + '<i class="help-inline password-eye icon16-pass-hide pointer"></i>'
                + '</div>'
              + '</div>'

            + '</fieldset>'
          + '</form>',

        footer: ''
          + '<button class="pull-right xbtn-blue xbtn-success">Done</button>'

      },

      onShowBefore: function (e) {
        var data = $(e.currentTarget).data('source');
        var token = $(e.currentTarget).data('token');
        this.signed = false;
        this._setup = false;
        if (data) {
          this._user = data.user;
          this._token = token || data.token;
          this._setup = data.setup;
        }
        else {
          this.signed = true;
          this._user = Store.get('user');
          this._token = token || Store.get('authorization').token;
          this._setup = !this._user.password;
        }
        this.$('.avatar img').attr('src', this._user.avatar_filename);
        this.$('.username').text(this._user.name);
      }

    }

  };


  // Set Up Account
  // --------------------------------------------------------------------------
  dialogs.setup_email = {

    options: {

      onHideAfter: function () {
        this.destory();
      },

      events: {

        'blur #name': function (e) {
          var val = Util.trim($(e.currentTarget).val());
          var $name = this.$('[for="name"]');
          var $text = $name.find('span');
          if (!val) {
            $name.addClass('label-error');
            $text.text('');
          } else if (Util.utf8length(val) > 30) {
            $text.text('Too long.');
            $name.addClass('label-error');
          } else if (Util.zh_CN.test(val)) {
            $name.addClass('label-error');
            $text.text('Invalid character.');
          } else {
            $name.removeClass('label-error');
            $text.text('');
          }
        },

        'blur #password': function (e) {
          var val = Util.trim($(e.currentTarget).val());
          var $pass = this.$('[for="password"]');
          var $text = $pass.find('span');
          if (!val) {
            $pass.addClass('label-error');
            $text.text('Password incorrect.');
          } else {
            $pass.removeClass('label-error');
            $text.text('');
          }
        },

        'click #password-eye': function (e) {
          var $e = $(e.currentTarget);
          var $input = $e.prev();
          $input.prop('type', function (i, val) {
            return val === 'password' ? 'text' : 'password';
          });
          $e.toggleClass('icon16-pass-hide icon16-pass-show');
        },

        'click .xbtn-success': function () {
          var that = this;
          var isUserToken = this._tokenType === 'user';

          var page = this._page;

          var api_url = isUserToken ? 'resetPassword' : 'setupUserByInvitationToken';
          var reqData = {};

          reqData.name = $.trim(this.$('#name').blur().val());
          reqData.password = this.$('#password').blur().val();

          if (isUserToken) {
            reqData.token = this._originToken;
          }
          else {
            reqData.invitation_token = this._originToken;
          }

          if (this.$('[for="name"]').hasClass('label-error')
              && this.$('[for="password"]').hasClass('label-error')) {
            return;
          }

          var authorization;

          Api.request(api_url,
            {
              type: 'POST',
              data: reqData
            },
            function (data) {

              if (page === 'resolve') {
                authorization = Store.get('authorization');
                if (!authorization) {
                  Store.set('authorization', data.authorization);
                  Store.set('user', that._browsing_user);
                  window.location.href = '/';
                } else {
                  $('#app-user-menu').find('.set-up').remove();
                  var $bi = $('#app-browsing-identity');
                  var settings = $bi.data('settings');
                  settings.setup = false;
                  settings.originToken = data.authorization.token;
                  $bi.data('settings', settings).trigger('click.data-api');
                }
              }
              else {
                authorization = data.authorization
                Bus.emit('app:user:signin:after', function () {
                  window.location.href = '/';
                });
                Bus.emit('app:user:signin', authorization.token, authorization.user_id);
              }
              that.hide();
            }
          );

        }

      },

      backdrop: false,

      viewData: {

        // class
        cls: 'mblack modal-su',

        title: 'Set Up Account',

        body: ''
          + '<div class="shadow title">Welcome to <span class="x-sign">EXFE</span></div>'
          + '<form class="modal-form">'
            + '<fieldset>'
              + '<legend>For easier further use, please set up account of your identity underneath. Otherwise, <span class="underline">sign in</span> your existing account to merge with this identity.</legend>'

                + '<div class="clearfix control-group">'
                  + '<div class="pull-right user-identity">'
                    + '<img class="avatar" src="" alt="" width="40" height="40" />'
                    + '<i class="provider"></i>'
                  + '</div>'
                  + '<div class="identity box"></div>'
                + '</div>'

                + '<div class="control-group">'
                  + '<label class="control-label" for="name">Display name: <span></span></label>'
                  + '<div class="controls">'
                    + '<input type="text" class="input-large" id="name" autocomplete="off" placeholder="Your recognizable name" />'
                  + '</div>'
                + '</div>'

                + '<div class="control-group">'
                  + '<label class="control-label" for="password">Password: <span></span></label>'
                  + '<div class="controls">'
                    + '<input type="password" class="input-large" id="password" autocomplete="off" placeholder="Set EXFE password" />'
                    + '<i class="help-inline icon16-pass-hide pointer" id="password-eye"></i>'
                  + '</div>'
                + '</div>'

            + '</fieldset>'
          + '</form>',

        footer: ''
          ////+ '<button class="xbtn-white xbtn-sitm" data-widget="dialog" data-dialog-type="identification" data-dialog-tab="d00">Sign In to Merge…</button>'
          + '<button class="pull-right xbtn-blue xbtn-success">Done</button>'
          + '<a class="pull-right xbtn-discard" data-dismiss="dialog">Cancel</a>'
      },

      onShowBefore: function (e) {
        var data = $(e.currentTarget).data('source');
        if (!data) return;
        var identity = data.identity;
        this._browsing_user = data.browsing_user;
        this._tokenType = data.tokenType;
        this._originToken = data.originToken;
        this._forward = data.forward || '/';
        this._page = data.page;
        this.$('#name').val(data.user_name || '');
        this.$('.identity').text(Util.printExtUserName(identity));
        this.$('.avatar')
          .attr('src', identity.avatar_filename)
          .next().addClass('icon16-identity-' + identity.provider);
        this.$('.xbtn-siea').data('source', Util.printExtUserName(identity));
      }

    }

  };


  // Set Up Twitter
  dialogs.setup_twitter = {

    options: {

      onHideAfter: function () {
        // abort ajax
        if (this._oauth_) {
          this._oauth_.abort();
	        this._oauth_ = null;
        }
        this.destory();
      },

      events: {
        'click .authorize': function () {
          this._oauth_ = $.ajax({
            url: '/OAuth/Authenticate?provider=twitter',
            type: 'POST',
            dataType: 'JSON',
            success: function (data) {
              var code = data.meta.code;
              if (code === 200) {
                window.location.href = data.response.redirect;
              }
            }
          });
        }
      },

      backdrop: false,

      viewData: {

        // class
        cls: 'mblack modal-su',

        title: 'Set Up Account',

        body: ''
          + '<div class="shadow title">Welcome to <span class="x-sign">EXFE</span></div>'
          + '<form class="modal-form">'
            + '<fieldset>'
              + '<legend>You’re browsing as identity underneath, please authorize through Twitter to set up your <span class="x-sign">EXFE</span> account.</legend>'

                + '<div class="clearfix control-group">'
                  + '<div class="pull-right user-identity">'
                    + '<img class="avatar" src="" alt="" width="40" height="40" />'
                    + '<i class="provider"></i>'
                  + '</div>'
                  + '<div class="box identity"></div>'
                + '</div>'

                + '<div class="clearfix">'
                  + '<button class="pull-right xbtn-blue authorize">Authorize</button>'
                  + '<a class="pull-right underline pointer cancel" data-dismiss="dialog">Cancel</a>'
                + '</div>'

                ////+ '<div class="spliterline"></div>'

                ////+ '<div>Otherwise, sign in your existing <span class="x-sign">EXFE</span> account to merge with this identity.</div>'

            + '</fieldset>'
          + '</form>',

        footer: ''
          ////+ '<button class="pull-right xbtn-white xbtn-siea" data-widget="dialog" data-dialog-type="identification" data-dialog-tab="d00">Sign In and Add…</button>'
      },

      onShowBefore: function (e) {
        var data = $(e.currentTarget).data('source');
        if (!data) return;
        var identity = data.identity;
        this._tokenType = data.tokenType;
        this._originToken = data.originToken;
        this.$('.identity').text(Util.printExtUserName(identity));
        this.$('.avatar')
          .attr('src', identity.avatar_filename)
          .next().addClass('icon16-identity-' + identity.provider);
        this.$('.xbtn-siea').data('source', Util.printExtUserName(identity));
      }

    }

  };


  // Browsing Identity
  // --------------------------------------------------------------------------
  dialogs.browsing_identity = {

    options: {

      onHideAfter: function () {
        this.destory();
      },

      events: {

        'click .xbtn-go': function () {
          window.location.href = '/';
        },

        'click .xbtn-merge': function () {
          var that = this,
              authorization = Store.get('authorization'),
              token = authorization.token,
              browsing_token = this._token,
              identity = this._identity,
              postData = { browsing_identity_token: browsing_token, identity_ids: '[' + identity.id + ']' };
          Api.request('mergeIdentities'
            , {
              type: 'POST',
              params: { token: token },
              data: postData
            }
            , function (data) {
                that.hide();
                // TODO: 隐藏 merge
                data.mergeable_user = null;
                if (data.mergeable_user) {
                  var d = $('<div id="js-dialog-merge" data-destory="true" data-widget="dialog" data-dialog-type="mergeidentity">');
                  var user = Store.get('user');
                  d.data('source', {
                    merged_identity: R.find(user.identities, function (v) {
                      if (v.id === identity.id) { return true; }
                    }),
                    browsing_token: browsing_token,
                    mergeable_user: data.mergeable_user
                  });
                  d.appendTo($('#app-tmp'));
                  d.trigger('click.dialog.data-api');
                  $('.modal-mi').css('top', 230);
                }
                else {
                  window.location.href = '/';
                }
              }
          );
        }

      },

      backdrop: false,

      viewData: {

        // class
        cls: 'mblack modal-bi',

        title: 'Browsing Identity',

        body: ''
          + '<div class="shadow title">Browsing Identity</div>'
          + '<div class="user hide">'
            + '<div>You’re currently signed in account underneath, you can continue with this account.</div>'
            + '<div class="clearfix context-user">'
              + '<div class="pull-left avatar">'
                + '<img width="40" height="40" alt="" src="" />'
              + '</div>'
              + '<div class="pull-left username"></div>'
            + '</div>'
            + '<div class="clearfix">'
              + '<button class="pull-right xbtn-white xbtn-go">Go</button>'
              + '<a class="pull-right xbtn-cancel" data-dismiss="dialog">Cancel</a>'
            + '</div>'
            + '<div class="spliterline"></div>'
          + '</div>'
          + '<div class="browsing-tips"><span class="tip-0 hide">Otherwise, you’re</span><span class="tip-1 hide">You’re</span> currently browsing this page as identity underneath, please choose an option to continue.</div>'
          + '<div class="context-identity">'
            + '<div class="pull-right avatar">'
              + '<img width="40" height="40" alt="" src="" />'
              + '<i class="provider"></i>'
            + '</div>'
            + '<div class="clearfix">'
              + '<div class="pull-left box identity"></div>'
            + '</div>'
          + '</div>',

        footer: ''
          ////+ '<button class="pull-right xbtn-blue xbtn-merge hide">Merge into account above</button>'
          + '<button class="xbtn-white xbtn-sias hide" data-widget="dialog" data-dialog-type="identification" data-dialog-tab="d00">Sign In and Switch</button>'
          + '<button class="xbtn-white xbtn-sui hide" data-widget="dialog" data-dialog-type="setup_email">Set Up Identity</button>'

      },

      onShowBefore: function (e) {
        var settings = $(e.currentTarget).data('settings');
        if (!settings) { return; }
        var user = settings.normal
          , browsing_user = settings.browsing
          , setup = settings.setup
          , action = settings.action;

        this._token = settings.originToken;
        this._user = user;
        this._browsing_user = browsing_user;
        this._setup = setup;
        this._action = action;
        this._tokenType = settings.tokenType;

        if (this._user) {
          this.$('.user')
            .removeClass('hide')
            .find('img')
            .attr('src', user.avatar_filename)
            .parent()
            .next().text(user.name || user.nickname);
          this.$('.xbtn-merge').removeClass('hide');
          this.$('.browsing-tips').find('.tip-0').removeClass('hide');
        }
        else {
          this.$('.xbtn-sias, .xbtn-sui').addClass('pull-right');
          this.$('.browsing-tips').find('.tip-1').removeClass('hide');
        }

        this.$('browsing-tips').find('span').eq(this._user ? 0 : 1).removeClass('hide')

        // browsing default identity
        var bdidentity = browsing_user.identities[0];
        this._identity = bdidentity;
        var beun = Util.printExtUserName(bdidentity);

        this.$('.context-identity')
          .find('img')
          .attr('src', bdidentity.avatar_filename)
          .next().addClass('icon16-identity-' + bdidentity.provider)
        this.$('.context-identity')
          .find('.identity').text(beun);

        //if (!this._setup) { // test
        if (this._setup) {
          this.$('.xbtn-sui')
            .removeClass('hide')
            .attr('data-dialog-type', 'setup_' + bdidentity.provider)
            .data('source', {
              identity: bdidentity,
              originToken: settings.originToken,
              tokenType: settings.tokenType
            }
          );
        }
        else {
          this.$('.xbtn-sias')
            .removeClass('hide')
            .data('source', beun);
        }
      }

    }

  };


  // Read-only Browsing
  dialogs.read_only = {

    options: {

      onHideAfter: function () {
        this.destory();
      },

      backdrop: false,

      viewData: {

        // class
        cls: 'mblack modal-ro',

        title: 'Read-only Browsing',

        body: ''
          + '<div class="shadow title">Read-only Browsing</div>'
          + '<div>You’re browsing this page in read-only mode as <span></span> underneath. To change anything on this page, please <span class="underline">sign in</span> first.</div>'
          + '<div class="clearfix context-user hide">'
            + '<div class="pull-left avatar">'
              + '<img src="" alt="" width="40" height="40" />'
            + '</div>'
            + '<div class="pull-left username"></div>'
          + '</div>'

          + '<div class="context-identity hide">'
            + '<div class="pull-right avatar">'
              + '<img src="" alt="" width="40" height="40" />'
              + '<i class="provider"></i>'
            + '</div>'
            + '<div class="pull-left box identity"></div>'
          + '</div>',

        footer: ''
          + '<button class="pull-right xbtn-blue" data-widget="dialog" data-dialog-type="identification" data-dialog-tab="d00">Sign In...</button>'
          + '<a class="pull-right xbtn-discard" data-dismiss="dialog">Cancel</a>'
      },

      onShowBefore: function (e) {
        var settings = $(e.currentTarget).data('settings')
        if (!settings) { return; }
        var isBrowsing = settings.isBrowsing
        var beun = Util.printExtUserName(settings.identities[0]);
        this.$('legend span').eq(0).text(isBrowsing ? 'identity' : 'user');
        this.$('.xbtn-blue').data('source', beun);
        if (isBrowsing) {
          var bi = this.$('.context-identity').removeClass('hide');
          bi.find('.identity').text(beun);
          bi.find('.avatar img').attr('src', settings.identities[0].avatar_filename);
          bi.find('.provider').addClass('icon16-identity-' + settings.identities[0].provider)
        } else {
          var u = this.$('.context-user').removeClass('hide')
          u.find('.username').text(settings.name);
          u.find('.avatar img').attr('src', settings.avatar_filename);
        }
      }

    }

  };


  // revoked identity
  dialogs.revoked = {

    options: {

      onHideAfter: function () {
        this.destory();
      },

      backdrop: false,

      viewData: {

        // class
        cls: 'mblack modal-re',

        title: 'Revoked Identity',

        body: ''
          + '<div class="shadow title">Revoked Identity</div>'

      }

    }

  };


  dialogs.authentication = {

    updateIdentity: function (identity) {
      var $identity = this.$('.context-identity');
      $identity.find('.avatar img').attr('src', identity.avatar_filename);
      $identity.find('.provider').attr('class', 'provider icon16-identity-' + identity.provider);
      $identity.find('.identity').text(identity.eun);
      this._identity = identity;
    },

    options: {

      viewData: {

        cls: 'mblack modal-au',

        title: 'Authentication',

        body: ''
          + '<div class="shadow title">Authorization</div>'
          + '<div class="d0 hide">'
            + '<div class="detials">You’re about to change your account details, for security concerns, please authenticate your account.</div>'
            + '<div class="clearfix context-user">'
              + '<div class="pull-left avatar">'
                + '<img src="" alt="" width="40" height="40" />'
              + '</div>'
              + '<div class="pull-left username"></div>'
            + '</div>'
            + '<div class="modal-form">'
              + '<div class="control-group">'
                + '<label class="control-label" for="password">Password: <span></span></label>'
                + '<div class="controls">'
                  + '<input type="password" class="input-large" id="password" autocomplete="off" placeholder="Your EXFE password" />'
                  + '<i class="help-inline icon16-pass-hide pointer" id="password-eye"></i>'
                + '</div>'
              + '</div>'
            + '</div>'
          + '</div>'

          + '<div class="d1 hide">'
            + '<div class="detials">You’re about to change your account details. For security concern, please re-authenticate your identity and set your <span class="x-sign">EXFE</span> password first.</div>'
            + '<div class="context-identity">'
              + '<div class="pull-right avatar">'
                + '<img src="" alt="" width="40" height="40" />'
                + '<i class="provider"></i>'
              + '</div>'
              + '<div class="clearfix dropdown-toggle" data-toggle="dropdown">'
                + '<div class="pull-left box identity"></div>'
                + '<ul class="dropdown-menu"></ul>'
                + '<div class="pull-left caret-outer hide"><b class="caret"></b></div>'
              + '</div>'
            + '</div>'
            + '<div class="why">Why I have to do this?</div>'
            + '<div class="answer">Sorry for the inconvenience. Sometimes, we have to compromise on experience for your account security. Re-authentication is to avoid modification by others who can possibly access your computer.</div>'
          + '</div>',

        footer: ''
          + '<button class="pull-left xbtn xbtn-white xbtn-forgotpwd d0 hide" data-dialog-from="authentication" data-widget="dialog" data-dialog-type="forgotpassword">Forgot Password...</button>'
          + '<button class="pull-right xbtn xbtn-blue xbtn-auth d1 hide">Authenticate</button>'
          + '<button class="pull-right xbtn xbtn-blue xbtn-done d0 hide">Done</button>'
          + '<a class="pull-right xbtn-discard d0 hide" data-dismiss="dialog">Cancel</a>'

      },

      events: {
        /*
        'click .why': function (e) {
          var that = this;
          that.$('.answer').removeClass('hide');
        },
        */
        'click .xbtn-done': function () {
          var that = this
            , user = Store.get('user')
            , default_identity = user.identities[0]
            , external_username = default_identity.external_username
            , provider = default_identity.provider
            , password = Util.trim(that.$('#password').val());

          // 重新鉴权
          Api.request('signin',
            {
              type: 'POST',
              data: {
                external_username: external_username,
                provider: provider,
                password: password,
                name: '',
                auto_signin: true
              }
            },
            function (data) {
              Store.set('authorization', data);
              var cb = that.callback;
              that.destory();
              cb();
            }
          );
        },

        'click .xbtn-auth': function (e) {
          var that = this;
          var $e = $(e.currentTarget);
          if ($e.hasClass('xbtn-success')) {
            that.$('.verify-after').addClass('hide');
            $e.removeClass('xbtn-success').text('Verify');
            that.hide();
            return false;
          }
          var provider = that._identity.provider;
          var external_username = that._identity.external_username;
          that.befer = Api.request('verifyIdentity'
            , {
              type: 'POST',
              data: {
                provider: provider,
                external_username: external_username
              }
            }
            , function (data) {
              if (data.action === 'REDIRECT') {
                window.location.href = data.url;
              }
            }
          );
        },

        'click .caret-outer': function (e) {
          this.$('.dropdown-toggle').addClass('open');
          e.stopPropagation();
        },

        'hover .dropdown-menu > li': function (e) {
          var t = e.type,
              $e = $(e.currentTarget);

          $e[(t === 'mouseenter' ? 'add' : 'remove') + 'Class']('active');
        },

        'click .dropdown-menu > li': function (e) {
          var ids = this.$('.dropdown-menu').data('identities')
            , index = $(e.currentTarget).data('index');

          this.updateIdentity(ids[index]);
          // TODO: 优化
          //this.$('.dropdown-toggle').removeClass('open');
        }
      },

      onHideAfter: function () {
        if (this.befer) {
          this.befer.abort();
          this.befer = null;
        }
        this.destory();
      },

      onShowBefore: function (e) {
        var that = this
          , user = Store.get('user')
          , hasPassword = user.password;
        that.$('.d' + (hasPassword ? 0 : 1)).removeClass('hide');

        if (e && e._data) {
          that.callback = e._data.callback;
        }

        if (that.callback) {
          that.callback = function () {};
        }

        if (hasPassword) {
          that.$('.modal-body .d0')
            .find('.avatar img').attr('src', user.avatar_filename)
            .parent()
            .next().text(user.name);
          that.$('.xbtn-forgotpwd').data('source', user.identities);
        }
        else {
          var ids = user.identities
            , l
            , first;
          if (ids && (l = ids.length)) {
            first = ids[0];
            first.eun = Util.printExtUserName(first);
            if (1 < l) {
              that.$('.context-identity').addClass('switcher');
              var s = '';
              for (var i = 0; i < l; i++) {
                s += '<li data-index="' + i + '"><i class="pull-right icon16-identity-' + ids[i].provider + '"></i>';
                ids[i].eun = Util.printExtUserName(ids[i]);
                s += '<span>' + ids[i].eun + '</span>'
                s += '</li>';
              }
              that.$('.dropdown-menu').html(s).data('identities', ids);
            }

            that.updateIdentity(first);
          }
        }
      }

    }

  }


  // unsubscribe Cross
  dialogs.unsubscribe = {

    options: {

      onHideAfter: function () {
        this.destory();
      },

      events: {
        'click .xbtn-done': function (e) {
          e.preventDefault();
          this.hide();
        }
      },

      backdrop: false,

      viewData: {

        // class
        cls: 'mblack modal-unsubscribe',

        title: 'Unsubscribe Email',

        body: ''
          + '<div class="shadow title">Unsubscribe update email</div>'
          + '<p>You just unsubscribe update email of <span class="x">·X·</span> “<span class="x-title"></span>”.</p>',

        footer: ''
          + '<button class="pull-right xbtn-white xbtn-done">Done</button>'
      },

      onShowBefore: function (e) {
        var source = $(e.currentTarget).data('source');
        this.$('.x-title').text(source.title);
      }

    }

  };


  // Identification 弹出窗口类
  var Identification = Dialog.extend({

    // 用户有效身份标志位，默认 false
    availability: false,

    init: function () {
      var that = this;

      // TODO: 后期优化掉
      Bus.off('widget-dialog-identification-auto');
      Bus.on('widget-dialog-identification-auto', function (data) {
        var $identityLabel = that.$('[for="identity"]'),
            $identityLabelSpan = $identityLabel.find('span');
        var $passwordLabel = that.$('[for="password"]'),
            $passwordLabelSpan = $passwordLabel.find('span');

        that.availability = false;
        that.identityFlag = null;

        var t;

        if (that.switchTabType === 'd24') {
          t = 'd01';
        }

        that.$('.xalert-error').addClass('hide');
        that.$('.help-subject')
          .removeClass('icon14-question')
          .addClass('icon14-clear');

        if (data) {
          // test
          $identityLabel.removeClass('label-error');
          $identityLabelSpan.text('');

          if (data.identity && data.identity.avatar_filename) {
            that._identity = data.identity;
            that.$('.user-identity').removeClass('hide')
              .find('img').attr('src', data.identity.avatar_filename)
              .next().attr('class', 'provider icon16-identity-' + data.identity.provider);
          } else {
            that._identity = null;
            that.$('.user-identity').addClass('hide');
          }

          if (data.identity.provider === 'phone') {
            that.$('.phone-tip').toggleClass('hide', /\+/.test(that.$('#identity').val()));
          }

          that.identityFlag = data.registration_flag;
          // SIGN_IN
          if (data.registration_flag === 'SIGN_IN') {
            t = 'd01';
            that.$('.xbtn-forgotpwd').removeClass('hide');
            $passwordLabel.removeClass('label-error');
            $passwordLabelSpan.text('');
          }
          // SIGN_UP 新身份
          else if (data.registration_flag === 'SIGN_UP') {
            t = 'd02';
            $passwordLabel.removeClass('label-error');
            $passwordLabelSpan.text('');
          }
          // AUTHENTICATE
          else if (data.registration_flag === 'AUTHENTICATE') {
            t = 'd00';
            that.$('.help-subject')
              .removeClass('icon14-question')
              .addClass('icon14-clear');
            that.$('.authenticate').removeClass('hide');
          }
          // VERIFY
          else if (data.registration_flag === 'VERIFY') {
            t = 'd04';
          }
          that.availability = true;
        } else {
          that.$('.phone-tip').addClass('hide');
          that.$('.help-subject')
            .removeClass('icon14-clear')
            .addClass('icon14-question');
          //$identityLabel.addClass('label-error')
          //$identityLabelSpan.text('Invalid identity.');
        }

        if (t && (that.switchTabType !== t)) {
          that.switchTab(t);
        }
        that.$('.x-signin')[(that.availability ? 'remove' : 'add') + 'Class']('disabled');
        that.$('.xbtn-forgotpwd').data('source', data ? [data.identity] : data);
      });

      // TODO: 后期优化掉
      Bus.off('widget-dialog-identification-nothing');
      Bus.on('widget-dialog-identification-nothing', function () {
        that.$('.authenticate').addClass('hide');
        that.$('.user-identity').addClass('hide');
        that.$('[for="identity"]').removeClass('label-error')
          .find('span').text('');
        that.$('.xbtn-forgotpwd').addClass('hide').data('source', null);
        that.availability = false;
        //if (that.switchTabType !== 'd02') that.switchTab('d01');
        that.$('.x-signin')[(that.availability ? 'remove' : 'add') + 'Class']('disabled');
      });
    },

    resetInputs: function () {
      this.$('input').val('');
      this.$('.label-error').removeClass('label-error').find('span').text('');
      this.$('.icon16-pass-show').toggleClass('icon16-pass-show icon16-pass-hide').prev().prop('type', 'password');
      this.$('#identity').focusend();
    },

    setPasswordPlaceHolder: function (t) {
      // new user
      if (t === 'd02') {
        this.$('#password')
          .attr('placeholder', 'Set your EXFE Password');
      } else if (t === 'd01') {
        this.$('#password')
          .attr('placeholder', 'Your EXFE Password');
      }
    },

    getFormData: function (t) {
      var val = Util.trim(this.$('#identity').val());
      var identity = Util.parseId(val);
      if (t === 'd01' || t === 'd02') {
        identity.password = this.$('#password').val();
      }
      if (t === 'd01') {
        identity.auto_signin = this.$('#auto-signin').prop('checked');
      }
      if (t === 'd02') {
        identity.name = Util.trim(this.$('#name').val());
      }
      return identity;
    },

    switchTab: function (t) {
      this.$('.d')
        .not('.hide')
        .addClass('hide')
        .end()
        .filter('.' + t)
        .removeClass('hide');

      this.$('.x-signin')[(this.availability ? 'remove' : 'add') + 'Class']('disabled');

      this.switchTabType = t;

      if (this.isShown
          && (this.switchTabType === 'd00' || this.switchTabType === 'd01' || this.switchTabType === 'd02')) {
        var $identity = this.$('#identity');
        $identity.focusend();
      }

      this.setPasswordPlaceHolder(t);
    }

  });

  exports.Identification = Identification;

});

/*jshint -W015*/

/**
 * Exfe's DatePanel Widget.
 * 日期控件
 */
define('datepanel', function (require/*, exports, module*/) {
  "use strict";

  var $ = require('jquery')
    , isIE = $.browser.msie
    , HT = require('humantime')
    , locale = HT.locales[HT.locale]
    , months = locale.months
    , monthsShort = locale.monthsShort
    , createET = HT.createEFTime
    , toDate = HT.toLocaleDate
    , lead0 = HT.lead0
    , Util = require('util')
    , trim = Util.trim
    , Api = require('api')
    , R = require('rex');

  /**
   * DatePanel
   */
  var DatePanel = require('panel').extend({

      options: {
          template: ''
            + '<div class="panel date-panel" tabindex="-1" data-widget="panel" id="date-panel" editarea="date-panel">'
              + '<div class="panel-body">'
                + '<div class="pull-left date-container">'
                  + '<div class="date-input">'
                    + '<input type="text" name="date-string" id="date-string" autocomplete="off" />'
                    + '<i class="pointer icon-enter-blue place-submit"></i>'
                  + '</div>'
                  + '<div class="date-calendar" tabindex="-1">'
                    + '<ul class="unstyled clearfix" id="date-head"><li>Sun</li><li>Mon</li><li>Tue</li><li>Wed</li><li>Thu</li><li>Fri</li><li>Sat</li></ul>'
                    + '<div class="year"></div>'
                    + '<div class="full-month"></div>'
                    + '<div class="table-wrapper">'
                      + '<table class="table" id="date-table"><tbody></tbody></table>'
                    + '</div>'
                  + '</div>'
                + '</div>'

                + '<div class="pull-right date-timeline hide">'
                   //+ ' <div class="gathering">Gathering day</div> '
                   + ' <div class="fuzzy-time hide">'
                   + '   <ul class="unstyled time-cates">'
                   + '     <li data-cate="all-day">All-day</li>'
                   + '     <li class="hide" data-time="00:01" data-cate="late-night">Late-night</li>'
                   + '     <li class="hide" data-time="05:00" data-cate="dawn">Dawn</li>'
                   + '     <li class="hide" data-time="07:00" data-cate="breakfast">Breakfast</li>'
                   + '     <li class="hide" data-time="08:30" data-cate="morning">Morning</li>'
                   + '     <li class="hide" data-time="10:00" data-cate="brunch">Brunch</li>'
                   + '     <li class="hide" data-time="11:30" data-cate="lunch">Lunch</li>'
                   + '     <li class="hide" data-time="13:00" data-cate="noon">Noon</li>'
                   + '     <li class="hide" data-time="14:30" data-cate="afternoon">Afternoon</li>'
                   + '     <li class="hide" data-time="16:00" data-cate="tea-break">Tea-break</li>'
                   + '     <li class="hide" data-time="17:30" data-cate="off-work">Off-work</li>'
                   + '     <li class="hide" data-time="19:00" data-cate="dinner">Dinner</li>'
                   + '     <li class="hide" data-time="20:30" data-cate="evening">Evening</li>'
                   + '     <li class="hide" data-time="22:00" data-cate="night">Night</li>'
                   + '     <li class="hide" data-time="24:00" data-cate="late-night">Late-night</li>'
                   + '   </ul>'
                   + ' </div>'
                   + ' <div class="times-wrapper">'
                   + '   <div class="times"></div>'
                   + ' </div>'
                + '</div>'
              + '</div>'
            + '</div>'

        , parentNode: null

        , srcNode: null

        // eftime object
        , eftime: null
      }

    , init: function () {
        var options = this.options;

        this.render();

        // saved origin eftime.
        this.originEftime = options.eftime;

        // referrer Cross.time.
        this.eftime = Cross.time;

        this.dateObj = toDate(this.eftime);
        delete options.eftime;

        // get locale timezone.
        this.timezone = getTimezone();

        this.dateInput = new DateInput(this, '#date-string');
        this.calendarTable = new CalendarTable(this, '.date-calendar');
        this.timeline = new Timeline(this, '.date-timeline');

        this.listen();
      }

    , initComponents: function () {
        var eftime = this.eftime
          , date = this.dateObj.date;
        this.calendarTable.refresh(date);
        if (0 === this.originEftime.outputformat) {
          this.calendarTable.addCursorStyle();
          this.calendarTable.select();
        }
        this.timeline.refresh(this.eftime);
        this.timeline.select(this.eftime);
        this.dateInput.change(eftime.origin || date.text);
        this.dateInput.$element.focusend();

        if (this.eftime.begin_at.time) {
          this.showTL();
        }
      }

    , listen: function () {
        this.element.on('click.datepanel', '.place-submit', proxy(this.save, this));
        this.element.on('keydown.datepanel', proxy(this.keydown, this));
        // save
        this.on('save', this.save);
        // tab move to calendarTable
        this.on('tmt-ct', this.tmtCT);
        // tab move to dateInput
        this.on('tmt-di', this.tmtDI);
        // refresh from dateInput
        this.on('rf-di', this.rfDI);
        // refresh from timeline
        this.on('rf-tl', this.rfTL);
        // refresh from calendarTable
        this.on('rf-ct', this.rfCT);

        this.on('show-tl', this.showTL);
      }

    , save: function (s) {
        if (s) {
          this.eftime.origin = s;
        }
        $('body').trigger('click');
      }

    , revert: function () {
        $.extend(true, this.eftime, this.originEftime);
      }

    , tmtCT: function () {
        var $e = this.calendarTable.$element;
        setTimeout(function () { $e.focus(); }, 0);
      }

    , tmtDI: function () {
        var $e = this.dateInput.$element;
        setTimeout(function () { $e.focus(); }, 0);
      }

    , rfDI: function (eft) {
        $.extend(true, this.eftime, eft);
        this.dateObj = toDate(eft);
        this.calendarTable.refresh(this.dateObj.date);
        if (0 === this.eftime.outputformat) {
          this.calendarTable.addCursorStyle();
          this.calendarTable.select(true);
        }
        this.timeline.select(eft);
      }

      //            time, time_word
    , rfTL: function (t, tw) {
        var eftime = this.eftime
          , date = this.dateObj.date
          , s = '' , ts;
        eftime.begin_at.time = '';
        if (t) {
          ts = t.split(':');
          date.setHours(ts[0] || 0);
          date.setMinutes(ts[1] || 0);
          date.setSeconds(ts[2] || 0);
          eftime.begin_at.time = lead0(date.getUTCHours())
            + ':' + lead0(date.getMinutes())
            + ':' + lead0(date.getSeconds());
        }
        eftime.begin_at.time_word = tw;
        s = t || tw;
        if (eftime.outputformat) {
          eftime.outputformat = 0;
          eftime.origin = s;
        }
        else {
          if (eftime.begin_at.date) {
            s = dateFormat(date) + ' ' + s;
          }
          eftime.origin = s;
        }
        this.dateInput.change(eftime.origin);
      }

    , rfCT: function (ds) {
        var ef = this.eftime
          , date = this.dateObj.date
          , dsUTC = ''
          , dsArray = ds.split('-');
        date.setFullYear(dsArray[0]);
        date.setMonth(dsArray[1] - 1);
        date.setDate(dsArray[2]);
        dsUTC = date.getUTCFullYear() + '-' + lead0(date.getUTCMonth() + 1) + '-' + lead0(date.getUTCDate());
        ef.begin_at.date = dsUTC;
        if (ef.outputformat) {
          ef.outputformat = 0;
          ef.origin = ds;
        }
        else {
          var t = '';
          if (ef.begin_at.time) {
            t = lead0(date.getHours()) + ':' + lead0(date.getMinutes());
          }
          else {
            t = ef.begin_at.time_word;
            ef.begin_at.date = ds;
          }
          if (t) {
            t = ds + ' ' + t;
          } else {
            t = ds;
          }
          ef.origin = t;
        }
        this.dateInput.change(ef.origin);
      }

    , showTL: function () {
        this.timeline.show(this.eftime);
      }

    , keydown: function (e) {
        var self = this
            , altKey = e.altKey
            , ctrlKey = e.ctrlKey
            , shiftKey = e.shiftKey
            , metaKey = e.metaKey
            , kc = e.keyCode;
          // escape
          if (27 === kc) {
            self.revert();
            self.emit('save');
          }
          else if (13 === kc && (!(altKey | shiftKey) & (ctrlKey | metaKey))) {
            self.emit && self.emit('save');
          }
      }

    , showAfter: function () {
        var srcNode = this.srcNode;
        if (srcNode) {
          var offset = srcNode.offset()
            , element = this.element
            , width = element.outerWidth()
            , height = srcNode.outerHeight();
          element.css({
              left: offset.left - width + 175 - 15
            , top: offset.top + height + 7
          });
        }
        this.initComponents();
      }

    , destory: function () {
        this.element.off();
        this.element.remove();
        this._destory();
      }

  });


  /**
   * DateInput
   */
  var DateInput = function (component, selector) {
    this.component = component;
    this.$container = component.element;
    this.tz = component.timezone;
    this.selector = selector;
    this.$element = component.$(selector);

    this.listen();
  };

  DateInput.prototype = {

      listen: function () {
        var $container = this.$container
          , selector = this.selector;

        $container
          // blur focus
          .on('keydown.datepanel', selector, proxy(this.keydown, this))
          .on('keypress.datepanel', selector, proxy(this.keypress, this))
          .on('keyup.datepanel', selector, proxy(this.keyup, this));
      }

    , keyHandler: function (e) {
        var component = this.component
          , kc = e.keyCode;

        switch (kc) {
        case 9: // tab
          e.preventDefault();
          // ct: calendarTable
          component.emit('tmt-ct');
          break;
        case 13:
          e.preventDefault();
          component.emit('save', trim(this.$element.val()));
          break;
        case 40: // down
          // if the cursor in the last, tab to PlacesList
          var v = this.$element.val()
            , l = v.length
            , ele = this.$element[0]
            , end = selectionEnd(ele);
          if (l === end) {
            e.preventDefault();
            // ct: calendarTable
            component.emit('tmt-ct');
          }
          break;
        }
      }

    , keydown: function (e) {
        this.suppressKeyPressRepeat = !!~R.indexOf([9, 13, 40], e.keyCode);
        this.keyHandler(e);
      }

    , keypress: function (e) {
        if (this.suppressKeyPressRepeat) {
          // return false, /* Firefox 会禁用按键；webkit 则不会。wtf? */
          return;
        }
        this.keyHandler(e);
      }

    , keyup: function (e) {
        e.stopPropagation();
        e.preventDefault();
        switch (e.keyCode) {
        case  9: // tab
        case 13: // enter
        case 16: // shift
        case 17: // ctrl
        case 18: // alt
        case 27: // escape
        case 37: // left
        case 38: // up
        case 39: // right
        case 40: // down
          break;
        default:
          this.lookup();
        }
      }

    , lookup: function (/* e */) {
        var self = this
          , component = self.component
          , s = trim(self.$element.val());

        if (self.befer) {
          self.befer.abort();
          self.befer = void 0;
        }

        if ('' === s) {
          component.emit('rf-di', createET());
          return;
        }

        self.befer = Api.request('recognize'
          , {
                type: 'POST'
              , data: {
                    time_string: s
                  , timezone: self.tz
                }
            }
          , function (data) {
              // sometimes `datepanel` is closed.
              if (component) {
                component.emit('rf-di', data.cross_time);
              }
            }
        );
      }

    , change: function (s) {
        this.$element.val(s);
      }
  };


  /**
   * CalendarTable
   */
  var CalendarTable = function (component, selector) {
    this.component = component;
    this.$container = component.element;
    this.selector = selector;
    this.$element = component.$(selector);
    this.today = new Date();
    this.todayString = dateFormat(this.today);

    // ViewPort
    // coords: [0, 0]
    this.cx = 0;
    this.cy = 0;
    // rows
    this.vpr = 3;
    // height of the row
    this.vph = 44;
    this.len = 0;

    // Elements
    this.divTmp = '<div class="tw"><span class="m hide">{{m}}</span><span class="d">{{d}}</span></div>';
    this.$y = this.$element.find('.year');
    this.$m = this.$element.find('.full-month');
    this.$tw = this.$element.find('.table-wrapper');
    this.$tb = this.$tw.find('tbody');

    this.inited = true;
    this.enable = false;
    this.listen();
  };

  CalendarTable.prototype = {

      init: function (date) {
        var r = this.vpr
          , h = this.vph
          , y = date.getFullYear()
          , m = date.getMonth()
          , d = date.getDate()
          , dt = date.getDay();

        date = new Date(y, m, d - dt - 21);

        this.startDate = dateFormat(date);
        this.genNext(date);
        this.genNext(date);
        this.genNext(date);
        this.endDate = dateFormat(date);
        this.cx = dt;
        this.cy = r;
        this.scrollTop(r * h);
        this.$trs = this.$tb.find('tr');
        if (this.inited) {
          this.st = this.$tw.prop('scrollHeight') - this.$tw.outerHeight();
          this.inited = false;
        }
      }

    , refresh: function (date) {
        this.$trs = this.$cursor = null;
        //this.selectedDate = '';
        this.len = 0;
        this.$tb.empty();
        this.init(date);
      }

    , getSelectedDate: function () {
        return this.selectedDate || this.todayString;
      }

    , listen: function () {
        var $container = this.$container
          , selector = this.selector

        $container
          .on('blur.datepanel', selector, proxy(this.blur, this))
          .on('focus.datepanel', selector, proxy(this.focus, this))
          .on('keydown.datepanel', selector, proxy(this.keydown, this))
          .on('keypress.datepanel', selector, proxy(this.keypress, this))
          .on('keyup.datepanel', selector, proxy(this.keyup, this))
          .on('click.datepanel', selector + ' td', proxy(this.clickDate, this))
          .on('mouseenter.datepanel', selector + ' td', proxy(this.mouseenterDate, this))

        this.$tw.on('scroll.datepanel', proxy(this.scroll, this));
      }

    , scroll: function (e) {
        if (this.enable) { true; }
        e.stopPropagation();
        e.preventDefault();
        var $tw = this.$tw
          , t = $tw.scrollTop()
          , b = false
          , $y = this.$y
          , $m = this.$m;

        if (0 === t || this.st === t) {
          this.enable = true;
          this[0 === t ? 'mpageUp' : 'mpageDown']();
          this.$tw.scrollTop(this.vph * this.vpr);
          b = true;
        }
        this.updateYearMonth();
        $y.toggleClass('hide', b);
        $m.toggleClass('hide', b);
      }

    , updateYearMonth: function () {
        if (this.$cursor) {
          var d = datefun(this.$cursor.data('date'));
          this.$y.text(d.getFullYear());
          this.$m.text(months[d.getMonth()]);
        }
      }

    , delCursorStyle: function () {
        if (this.$cursor) { this.$cursor.removeClass('hover'); }
      }

    , addCursorStyle: function () {
        this.$cursor = this.$trs
          .eq(this.cy)
          .find('td')
          .eq(this.cx)
          .addClass('hover');
      }

    , blur: function () { this.delCursorStyle(); }

    , focus: function () { this.addCursorStyle(); }

    , scrollTop: function (s) { this.$tw.scrollTop(s); }

    , keyHandler: function (e) {
        var self = this
          , component = this.component
          , kc = e.keyCode;
        switch (kc) {
        case 9: // tab
          e.preventDefault();
          component.emit('tmt-di');
          break;
        case 37: // left
          e.preventDefault();
          self.move('left');
          break;
        case 38: // top
          e.preventDefault();
          self.move('top');
          break;
        case 39: // right
          e.preventDefault();
          self.move('right');
          break;
        case 40: // down
          e.preventDefault();
          self.move('down');
          break;
        case 33: // page up:    mac fn + ↑
          e.preventDefault();
          self.move('pageUp');
          break;
        case 34: // page down:  mac fn + ↓
          e.preventDefault();
          self.move('pageDown');
          break;
        case 13: // enter
          e.preventDefault();
          break;
        case 32: // spacing
          e.preventDefault();
          self.spacing();
          break;
        case 68: // d
          e.preventDefault();
          self.refresh(datefun(self.getSelectedDate()));
          break;
        case 84: // t
          e.preventDefault();
          self.refresh(self.today);
          break;
        case 35: // end:        mac fn + →
        case 36: // home:       mac fn + ←
          break;
        }
      }

    , keydown: function (e) {
        this.suppressKeyPressRepeat = !!~R.indexOf([9, 13, 32, 33, 34, 35, 36, 37, 38, 39, 40, 68, 84], e.keyCode);
        this.keyHandler(e);
      }

    , keypress: function (e) {
        if (this.suppressKeyPressRepeat) {
          return false;
        }
        this.keyHandler(e);
      }

    , keyup: function (e) {
        e.stopPropagation();
        e.preventDefault();
      }

    , clickDate: function (e) {
        e.preventDefault();
        this.spacing();
        this.component.emit('show-tl');
      }

    , spacing: function () {
        if (this.selectedDate) {
          this.$tb.find('td[data-date="' + this.selectedDate + '"]')
            .removeClass('selected');
        }
        this.select();
      }

    , select: function (enable) {
        if (this.selectedDate) {
          this.$trs.find('td.selected').removeClass('selected');
        }
        var date = this.selectedDate = this.$cursor.data('date');
        this.$cursor.addClass('selected');
        this.updateYearMonth();
        if (!enable) {
          this.component.emit('rf-ct', date);
        }
      }

    , mouseenterDate: function (e) {
        e.preventDefault();
        this.delCursorStyle();
        var $td = $(e.currentTarget)
          , $tr = $td.parent();
        this.cx = $td.index();
        this.cy = $tr.index();
        this.addCursorStyle();
      }

    , move: function (type) {
        this.enable = true;
        this.delCursorStyle();
        this['m' + type]();
        this.addCursorStyle();
        this.enable = false;
      }

      // move to left
    , mleft: function () {
        if (0 === this.cx--) {
          this.cx = 6;
          this.mtop();
        }
      }

      // move to top
    , mtop: function () {
        if (0 === this.cy--) {
          this.delTail3();

          var d = datefun(this.startDate, -21);
          this.startDate = dateFormat(d);
          this.genPrev(d);
          this.$trs = this.$tb.find('tr');
          this.cy = 2;
          this.$tw.scrollTop(this.vph * this.cy);
        }
        var t = this.$tw.scrollTop();
        t = Math.round(t / this.vph) * this.vph;
        if (this.cy * this.vph < t) {
          this.$tw.scrollTop(t -= this.vph);
        }
      }

      // move to right
    , mright: function () {
        if (6 === this.cx++) {
          this.cx = 0;
          this.mdown();
        }
      }

      // move to down
    , mdown: function () {
        if (this.len === ++this.cy) {
          this.delHead3();

          var d = datefun(this.endDate, 0);
          this.genNext(d);
          this.endDate = dateFormat(d);
          this.$trs = this.$tb.find('tr');
          this.cy = 7; // this.len - 2
          this.$tw.scrollTop(this.vph * 5);
        }
        var t = this.$tw.scrollTop();
        t = Math.round(t / this.vph) * this.vph;
        if (this.cy * this.vph > t + this.vph * (this.vpr - 1)) {
          this.$tw.scrollTop(t += this.vph);
        }
      }

    , mpageUp: function () {
        this.delTail3();

        var d = datefun(this.startDate, -21);
        this.startDate = dateFormat(d);
        this.genPrev(d);
        this.$trs = this.$tb.find('tr');
      }

    , mpageDown: function () {
        this.delHead3();

        var d = datefun(this.endDate, 0);
        this.genNext(d);
        this.$trs = this.$tb.find('tr');
        this.endDate = dateFormat(d);
      }

      //                    start date
    , generateHTML: function (startDate) {
        var r = this.vpr
          , ts = this.todayString
          , sd = this.selectedDate
          , divTmp = this.divTmp
          , tb = ''
          , i = 0
          , day;

        this.len += r;

        for (; i < r; ++i) {
          var j = 0, tr = '<tr>', td = ''
            , fs, isToday, isSelected, cls;

          for (; j < 7; ++j) {
            cls = '';
            fs = dateFormat(startDate);

            isToday = fs === ts;
            isSelected = fs === sd;

            if (isToday) { cls = 'today' }
            if (isSelected) { cls += (cls.length ? ' ' : '') + 'selected'; }

            td += '<td data-date="' + fs + '"' + (cls.length ? ' class="' + cls + '"' : '') + '>';
            day = startDate.getDate();
            td += divTmp
                    .replace('{{m}}', monthsShort[startDate.getMonth()])
                    .replace('{{d}}', isToday ? 'Today': day);
            td += '</td>';
            startDate.setDate(day + 1);
          }

          tr += td + '</tr>';
          tb += tr;
        }
        return tb;
      }

    , genPrev: function (date) {
        this.$tb.prepend(this.generateHTML(date));
      }

    , genNext: function (date) {
        this.$tb.append(this.generateHTML(date));
      }

      // delete head 3 tr
    , delHead3: function () {
        this.startDate = this.$trs.eq(0).find('td').eq(0).data('date');
        this.$trs.eq(0).remove();
        this.$trs.eq(1).remove();
        this.$trs.eq(2).remove();
        this.len -= 3;
      }

      // delete tail 3 tr
    , delTail3: function () {
        this.endDate = this.$trs.eq(this.len - 3).find('td').eq(0).data('date');
        this.$trs.eq(--this.len).remove();
        this.$trs.eq(--this.len).remove();
        this.$trs.eq(--this.len).remove();
      }
    };


  /**
   * Timeline
   */
  var Timeline = function (component, selector) {
    this.component = component;
    this.$container = component.element;
    this.selector = selector;
    this.$element = component.$(selector);

    // Elements
    this.divTmp = '<div class="time-item{{class}}" data-time="{{dt}}"><time>{{t}}</time></div>';
    this.$tw = this.$element.find('.times-wrapper');
    this.$tc = this.$element.find('.times');
    this.$ft = this.$element.find('.fuzzy-time');
    this.$ts = this.$ft.find('.time-cates > li[data-time]');
    this.ts = R.map(this.$ts, function (e) {
      return $(e).data('time');
    });

    // mouse point(x, y)
    this.x = 0;
    this.y = 0;
    this.px = 0;
    this.py = 0;
    // lables length
    this.l = 9;
    // head
    this.hh = 7;
    // tail
    this.th = 7;

    // hour, minutes
    this.dh = 0;
    this.dm = 0;

    // true: on scroll, not trigger after functions
    this.status = false;
    // $cursor show/hide
    this.isHide = true;

    this.listen();
  };

  Timeline.prototype = {

      show: function (eft) {
        this.$element.removeClass('hide');
        this.select(eft);
      }

      //              eftime
    , select: function (eft) {
        this.enable = true;
        this.removeSelected();
        if (eft
            && 0 === eft.outputformat
            && eft.begin_at.time) {
          var d = toDate(eft).date
            , h = d.getHours()
            , m = d.getMinutes()
            , n = Math.round(h / 15) * 15
            , t;

          d.setMinutes(n);
          this.selectedTime = lead0(h) + ':' + lead0(m);
          this.$selected = this.$tc
            .find('[data-time="' + this.selectedTime + '"]').eq(0);

          if (0 === this.$selected.length) {
            this.$selected = this.createNormalItem(h, m, Math.floor((h + m / 60) * this.h * (60 / 15)));
          }
          this.$selected.removeClass('time-hover');
          this.$selected.addClass('selected')

          t = parseInt(this.$selected.css('top'), 10);

          // moved to middle position
          this.$tw.scrollTop(Math.max(0, t - this.vph / 2));
        } else {
          this.$tw.scrollTop(180);
        }
        this.enable = false;
      }

    , refresh: function (eft) {
        this.generateHTML();
        // real-height
        var c = this.$element.clone().attr('id', '__tmp__').css({visibility: 'hidden', display: 'block', position: 'absolute'});
        this.$element.parent().append(c);
        //this.rh = this.$tw.prop('scrollHeight');
        this.rh = c.find('.times-wrapper').prop('scrollHeight');
        // item height
        this.h = Math.floor((this.rh - this.hh - this.th) / (this.l - 1) / 12);
        // time / height
        this.a = Math.round(60 / 4 / this.h);
        var offset = c.offset();
        this.ox = offset.left;
        this.oy = offset.top;
        this.st = c.scrollTop();
        // ViewPort Height
        this.vph = c.innerHeight();
        c.remove();
        this.select(eft);
      }

    , listen: function () {
        var $container = this.$container
          , selector = this.selector;
        $container
          .on('mouseleave.datepanel', selector, proxy(this.mouseleave, this))
          .on('mouseenter.datepanel', selector + ' .times-wrapper', proxy(this.meTW, this))
          .on('mousemove.datepanel', selector + ' .times-wrapper', proxy(this.mousemove, this))
          .on('mouseleave.datepanel', selector + ' .times-wrapper', proxy(this.mlTW, this))
          .on('click.datepanel', selector + ' .times-wrapper', proxy(this.clickTW, this))
          .on('click.datepanel', selector + ' .time-cates li[data-cate]', proxy(this.clickCT, this))

        this.$tw.on('scroll.datepanel', proxy(this.scrollTop, this));
      }

    , scrollTop: function (e) {
        if (this.isHide) { this.$cursor.removeClass('hide'); this.isHide = false; }
        if (this.enable) { return; }
        e.pageX = this.px;
        e.pageY = this.py;
        this.st = this.$tw.scrollTop();
        this.mousemove(e);
      }

    , removeSelected: function () {
        if (this.$selected) {
          this.selectedTime = '';
          this.$selected.removeClass('selected');
          delete this.$selected;
        }
      }

    , mouseleave: function (e) {
        e.stopPropagation();
        e.preventDefault();
        this.$ft.addClass('hide');
      }

    , mousemove: function (e) {
        e.stopPropagation();
        e.preventDefault();
        var y = this.y;
        this.px = e.pageX;
        this.py = e.pageY;
        this.x = this.px - this.ox;
        this.y = this.py - this.oy + this.st - this.hh;
        // steps 3hours & 60 / 15
        this.y = Math.max(0, Math.min(this.y, (this.l - 1) * this.h * 3 * 4));

        if (y === this.y) { return; }
        this.hoverItem();

        this.showFuzzyTime(e.pageY);
      }

    , clickCT: function (e) {
        e.preventDefault();
        this.removeSelected();
        this.component.emit('rf-tl', '', $(e.currentTarget).text());
      }

    , showFuzzyTime: function (y) {
        var n = 0
          , ts = this.ts
          , t
          , d0 = new Date(2012, 12, 21, this.dh, this.dm)
          , d1, dt, l;
        R.find(ts, function (v, i) {
          t = v.split(':');
          d1 = new Date(2012, 12, 21, t[0], t[1]);
          if (d0 < d1) {
            n = i;
            return true;
          }
        });

        if (0 === n) { n = 1; }
        if (24 === this.dh) { n = 14; }
        --n;
        this.$ts.not('.hide').addClass('hide');
        this.$ts.eq(n).removeClass('hide');

        // from 5:00 to 22:00
        if (5 <= this.dh && this.dh < 22) {
          this.$ts.eq(n - 1).removeClass('hide');
          this.$ts.eq(n + 1).removeClass('hide');
        }
        dt = y - this.oy - this.th;
        l = this.$ts.not('.hide').length;
        this.$ft.stop(true, true).animate({'top': dt - (l + 1) / 2 * 18}, 233);
      }

    , meTW: function () {
        this.$cursor.removeClass('hide');
        this.$ft.removeClass('hide');
      }

    , mlTW: function (e) {
        var $c = this.$cursor;
        if (e) { e.preventDefault(); }
        if (!$c.hasClass('time-label') && !$c.hasClass('selected')) {
          $c.addClass('hide');
        }
      }

    , clickTW: function (e) {
        e.stopPropagation();
        e.preventDefault();
        var $c = this.$cursor
          , t = $c.attr('data-time')
          , ts = t.split(':')
          , isLabel = 0 === +ts[0] % 3 && 0 === +ts[1]
          , $s = this.$selected;
        $c.addClass('hide');
        if ($s) {
          $s.removeClass('selected');
          if (t === $s.attr('date-time')) { return; }
          if (!$s.hasClass('time-label')) {
            $s.remove();
            delete this.$selected;
          }
        }
        if (isLabel) {
          this.$selected = this.$tc.find('[data-time="' + t + '"]').eq(0);
        } else {
          this.$selected = $c.clone().removeClass('hide time-hover');
          $c.before(this.$selected);
        }
        this.$selected.addClass('selected');
        this.component.emit('rf-tl', this.selectedTime = this.$selected.data('time'), '');
      }

    , hoverItem: function () {
        var t = Math.round(this.y / this.h) * this.h
          , ms = t * this.a
          , h = +Math.floor(ms / 60).toFixed(0)
          , m = ms % 60
          , hm = lead0(h) + ':' + lead0(m);

        this.dh = h;
        this.dm = m;

        this.$cursor
          .css('top', t)
          .attr('data-time', hm)
          .find('time').text((12 === h ? h : h % 12) + ':' + lead0(m) + ' ' + (h < 12 ? 'A' : 'P') + 'M');
      }

      //                      class, hours, minutes, top, isLabel
    , createNormalItem: function (h, m, t) {
        var $d = $(this.divTmp
          .replace('{{class}}', ' time-hover')
          .replace('{{dt}}', lead0(h) + ':' + lead0(m))
          .replace('{{t}}', h + ':' + lead0(m) + ' ' + (h < 12 ? 'A' : 'P') + 'M'));
        $d.css('top', t);
        this.$tc.append($d);
        return $d;
      }

      //                      class, hours, minutes, top, isLabel
    , createLabelItem: function (h, m, t) {
        var $d = $(this.divTmp
          .replace('{{class}}', ' time-label')
          .replace('{{dt}}', lead0(h) + ':' + lead0(m))
          .replace('{{t}}', (12 === h ? h : h % 12) + ' ' + (h < 12 ? 'A' : 'P') + 'M'));
        $d.css('top', t);
        this.$tc.append($d);
        return $d;
      }

    , generateHTML: function () {
        var l = this.l
          , i = 0
          , step = 60 * 3
          , d = new Date(2012, 12, 21, 21, 0)
          , h = 0, m = 0;

        for (; i < l; ++i) {
          d.setMinutes(d.getMinutes() + step);
          h = d.getHours();
          m = d.getMinutes();
          if (8 === i) {
            h = 24;
          }
          this.createLabelItem(h, m, 60 * i);
        }

        this.$cursor = this.createNormalItem(0, 0, 0)
          .addClass('hide');
      }

    };


  // Helper:
  var proxy = function (f, c) {
    if (!f) { return; }
    return function cb(e) {
      return f.call(c, e);
    };
  };

  var dateFormat = function (date) {
    return date.getFullYear() + '-' + lead0(date.getMonth() + 1) + '-' + lead0(date.getDate());
  };

  var datefun = function (ds, i) {
    if (!i) { i = 0; }
    ds = ds.split('-');
    return new Date(ds[0], +ds[1] - 1, +ds[2] + i);
  };

  // get time zone
  var getTimezone = function () {
    var s = (new Date()).toString()
      , tz = s.replace(/^(?:[\w\W]+([\+\-]\d\d):?(\d\d)[\w\W]+)$/, '$1:$2')
      , ts = s.replace(/^(?:[\w\W]+\(([a-z]+)\)[\w\W]*)$/i, '$1');
    if (ts === 'UTC' || ts === 'GMT') { ts = ''; }
    return tz + (ts ? (' ' + ts) : '');
  };

  // get Textarea selectionEnd
  var selectionEnd = function (inputor) {
    return isIE ? getIESelectionEnd(inputor) : inputor.selectionEnd;
  }

  var getIESelectionEnd = function (inputor) {
    var r = document.selection.createRange()
      , re = inputor.createTextRange()
      , rc = re.duplicate();
    re.moveToBookmark(r.getBookmark());
    rc.setEndPoint('EndToStart', re);
    return rc.text.length + r.text.length;
  }

  return DatePanel;
});

/*jshint -W015*/

/**
 * Exfe's MatePanel Widget.
 * 日期控件
 */
define('mappanel', function (require) {
  "use strict";

  var $ = require('jquery'),
      proxy = $.proxy,
      extend = $.extend,
      _ENV_ = window._ENV_,
      MAP_KEY = _ENV_.MAP_KEY,
      LOCATION = _ENV_.location,
      site_url = _ENV_.site_url,
      lead0 = require('humantime').lead0,
      R = require('rex'),
      SPLITTER = /[\r\n]+/g,
      CR = '\r',
      geolocation = window.navigator.geolocation,
      $win = $(window),
      isIE = $.browser.msie,
      isMapLoaded = false;

  var Panel = require('panel');

  var MapPanel = Panel.extend({

      options: {

          template: ''
          + '<div class="panel map-panel" tabindex="-1" data-widget="panel" id="map-panel">'
            //<div class="panel-header"></div>
            + '<div class="panel-body">'
              + '<div class="map-container">'
                + '<div class="gmap-wrap"><div class="map-box" id="gmap"></div></div>'
                + '<div class="map-mask"></div>'
                + '<div class="map-resize"><span class="expand">Expand</span><span class="compact">Compact</span><span class="rb"></span><span class="lt"></span></div>'
                + '<div class="map-place">'
                  + '<div class="place-editor">'
                    + '<i class="pointer icon-enter-blue place-submit"></i>'
                    + '<div class="place-filter"></div>'
                    + '<textarea class="normal" name="place-text" id="place-text" placeholder="Enter place here."></textarea>'
                  + '</div>'
                  + '<div class="map-places hide">'
                    + '<ul class="unstyled places-list" tabindex="-1"></ul>'
                  + '</div>'
                + '</div>'
              + '</div>'
            + '</div>'
            //<div class="panel-footer"></div>
          + '</div>'

        , parentNode: null

        , srcNode: null

        // place object
        , place: null

      }

    , isGeoSupported: !!geolocation

    , setGeos: function (userGeo, placeGeo, hasLatLng) {
        this.xmap.initMap(userGeo, placeGeo, hasLatLng);
      }

    , init: function () {
        var options = this.options,
            element;

        this.render();
        element = this.element;

        // save origin place data
        this.originPlace = options.place;
        this.place = extend({}, options.place);
        delete options.place;

        this.placeInput = new PlaceInput(this, '#place-text');
        this.placesList = new PlacesList(this, '.places-list');
        this.xmap = new XMap(this, '#gmap');
        this.listen();

        this.$resize = element.find('.map-resize');
        this.$mask = element.find('.map-mask');
      }

    , listen: function () {
        var self = this;

        // `this.update` init config
        this.on('update-place', this.update);

        this.on('change-place', this.change);

        this.on('geos', this.setGeos);

        this.on('search-completed', this.searchCompleted);

        this.on('placeinput-tab', this.placeInputTab);
        this.on('placeslist-tab', this.placesListTab);

        this.on('cleanup', function () {
          self.placesList.clear();
          self.xmap.clear();
        });

        // marker
        this.on('clear-marker', this.clearMarker);
        // select place-item --> marker
        this.on('enter-marker', this.enterMarker);

        // mouseenter marker --> place-item
        this.on('enter-placeitem', this.enterPlaceItem);
        // click marker --> place-item
        this.on('click-placeitem', this.clickPlaceItem);

        // zoom map
        this.on('zoom-map', this.zoomMap);

        this.element.on('click.mappanel', '.place-submit', function () {
          // NOTE: 先用老事件触发保存
          Cross.place = self.place;
          $('body').click();
        });

        this.element.on('keydown.mappanel', proxy(this.keydown, this));

        this.element.on('click.mappanel', '.map-mask', function (e) {
          e.preventDefault();
          self.emit('zoom-map', false);
        });

        this.element.on('click.mappanel', '.map-resize', function (e) {
          e.preventDefault();
          var rc = $(this).hasClass('map-rc');
          self.emit('zoom-map', rc);
        });
      }

    , save: function () {
        this.$('.place-submit')
          .trigger('click.mappanel');
      }

    , keydown: function (e) {
        var self = this
          , altKey = e.altKey
          , ctrlKey = e.ctrlKey
          , shiftKey = e.shiftKey
          , metaKey = e.metaKey
          , kc = e.keyCode;
        //if (93 === kc || 224 === kc) { kc = 91; }
        // escape
        if (27 === kc) {
          self.revert();
        }
        // ctrl/command + enter
        else if (13 === kc && (!(altKey | shiftKey) & (ctrlKey | metaKey))) {
          self.emit('update-place', self.place);
          self.save();
        }
        // big map
        else if (187 === kc && ctrlKey) {
          self.emit('zoom-map', 0);
        }
        // small map
        else if (189 === kc && ctrlKey) {
          self.emit('zoom-map', 1);
        }
      }

    , zoomMap: function (n) {
        this.xmap.zoom(n);
      }

    , clickPlaceItem: function (place) {
        //this.emit('change-place', place, false);
        this.emit('change-place', place, 'map');
        this.element.focus();
      }

    , enterPlaceItem: function (i) {
        this.placesList.selectItem(i);
      }

    , enterMarker: function (i, hasPlace) {
        this.xmap.showMarker(i, hasPlace);
      }

    , clearMarker: function (i) {
        this.xmap.saveMarker(i || 0);
      }

    , searchCompleted: function (places, place) {
        this.placesList.update(places, place);
      }

    , placeInputTab: function () {
        var placesList = this.placesList
          , $placesList = placesList.$element
          , s = placesList.status
        if (s) {
          // firefox hack
          setTimeout(function () {
            $placesList.focus();
          }, 0);
        }
      }

    , placesListTab: function () {
        var $placeText = this.placeInput.$element;
        // firefox hack
        setTimeout(function () {
          $placeText.focusend();
        }, 0);
      }

    , resetPlace: function (p) {
        p.title = p.description
          = p.lat = p.lng
          = p.external_id
          = p.provider
          = '';
        return p;
      }

    , change: function (place, type) {
        var p = this.place,
            oTitle = p.title,
            oDesc = p.description,
            oLat = p.lat,
            oLng = p.lng,
            clearAll = !place.title,
            placeInput = this.placeInput,
            placesList = this.placesList,
            update = false,
            xmap = this.xmap;
        p.updated_at = printDate(new Date());
        if (clearAll) {
          p = this.resetPlace(p);
          placesList.clear();
          xmap.clear();
        } else {
          p.title = place.title;
          p.description = place.description;
          p.external_id = place.external_id || '';
          p.provider = place.provider || '';
          // editing Map or click list
          if (type === 'map' || type === 'list') {
            p.lat = place.lat;
            p.lng = place.lng;
            placeInput.change(printPlace(place.title, place.description));
            update = true;
          } else if (type === 'input') {
            if (oTitle !== place.title && !place.description) {
              placesList.clear();
              xmap.textSearch(place.title);
            }
          }
        }
        if (oTitle !== place.title
            || oDesc !== place.description
            || oLat !== place.lat
            || oLng !== place.lng
            || update) {
          this.emit('update-place', p);
        }
      }

    , revert: function () {
        this.emit('update-place', this.originPlace);
      }

    , showPlace: function () {
        var self = this,
            placeInput = this.placeInput,
            place = this.place,
            title = place.title,
            description = place.description,
            // 只要 `title` 和 `description` 都没有就显示 `Enter place here.`
            hasLatLng = place.lat && place.lng,
            userGeo, placeGeo;

        // first focus Container
        this.focus();

        placeInput.change(printPlace(title, description));
        placeInput.$element.focusend();

        if (hasLatLng) {
          placeGeo = { coords: { latitude: place.lat, longitude: place.lng, title: place.title } };
        }

        var error = function () {
          userGeo = { coords: LOCATION };
          hasLatLng || (placeGeo = userGeo);
          self.emit('geos', userGeo, placeGeo, hasLatLng);
        };

        if (this.isGeoSupported) {
          geolocation
            .getCurrentPosition(
              function (position) {
                userGeo = position;
                hasLatLng || (placeGeo = userGeo);
                self.emit('geos', userGeo, placeGeo, hasLatLng);
              },
              error
            );
        }
        else {
          error();
        }
      }

    , showBefore: function () {
        this.element.attr('editarea', 'map-panel');
      }

    , showAfter: function () {
        var self = this,
            srcNode = self.srcNode;
        if (srcNode) {
          var offset = srcNode.offset(),
              element = self.element,
              width = element.outerWidth();
          element
            .css({
              left: this.oleft = offset.left - width - 15,
              top: this.otop = offset.top
            });
        }

        if (isMapLoaded) {
          self.showPlace();
        } else {
          loadMap(function () {
            isMapLoaded = true;
            if (self && self.showPlace) {
              self.showPlace();
            }
          });
        }
      }

    , destory: function () {
        this.element.off();
        this.element.remove();
        this._destory();
      }
  });


  /**
   * PlaceInput
   */
  var PlaceInput = function (component, selector) {
    this.component = component
    this.$container = this.component.element;
    this.selector = selector;
    this.$element = component.$(selector);
    this.listen();
  };

  PlaceInput.prototype = {

      getPlace: function () {
        var value = this.$element.val();
        return parsePlace(value);
      }

    , change: function (s) {
        this.$element.val(s);
      }

    , listen: function () {
        var $container = this.$container
          , selector = this.selector;
        $container
          .on('blur.mappanel', selector, proxy(this.blur, this))
          .on('keypress.mappanel', selector, proxy(this.keypress, this))
          .on('keyup.mappanel', selector, proxy(this.keyup, this))
          .on('keydown.mappanel', selector, proxy(this.keydown, this))
          .on('focus.mappanel', selector, proxy(this.focus, this));
      }

    , lookup: function () {
        var place = this.trim();
        //this.component.emit('change-place', place, true);
        this.component.emit('change-place', place, 'input');
      }

    , trim: function () {
        var place = this.getPlace();
        if (!place.title && place.description) {
          this.change(place.description);
          place = this.getPlace();
        }
        return place;
      }

    //, click: function (e)  {}

    , blur: function () {
        this.$element.addClass('normal');
      }

    , focus: function () {
        this.$element.removeClass('normal');
      }

    // , mouseenter: function (e) {}

    , keyup: function (e) {
        switch (e.keyCode) {
        case 40: // down
        case 38: // up
        case 16: // shift
        case 17: // ctrl
        case 18: // alt
        case  9: // tab
        case 27: // escape
          break;
        case 13: // enter
          this.component.emit('cleanup');
          break;
        default:
          this.lookup();
        }
        e.stopPropagation();
        e.preventDefault();
      }

    , keyHandler: function (e) {
        var component = this.component
          , kc = e.keyCode;
        switch (kc) {
        case 9: // tab
          // 监听 tab, 自定义事件
          e.preventDefault();
          component.emit('placeinput-tab');
          break;
        case 40: // down
          // if the cursor in the last, tab to PlacesList
          var v = this.$element.val()
            , l = v.length
            , ele = this.$element[0]
            , end = selectionEnd(ele);
          if (l === end) {
            e.preventDefault();
            component.emit('placeinput-tab');
          }
            break;
        }
      }

    , keypress: function (e) {
        if (this.suppressKeyPressRepeat) {
          return;
        }
        this.keyHandler(e);
      }

    , keydown: function (e) {
        this.suppressKeyPressRepeat = !!~R.indexOf([9, 40], e.keyCode);
        this.keyHandler(e);
      }

  };


  /**
   *
   */
  var PlacesList = function (component, selector) {
    this.template = ''
              + '<li class="place-item{{css-class}}" data-lat="{{lat}}" data-lng="{{lng}}" data-external-id="{{external_id}}">'
                + '<address><div class="title">{{title}}</div><div class="description">{{address}}</div></address>'
              + '</li>'
    this.component = component
    this.$container = this.component.element;
    this.selector = selector;
    this.$element = component.$(selector);

    this.$items = null;
    this.len = 0;
    this.curr = 0;

    this.viewportRows = 12;
    this.viewportIndex = 0;
    this.scrollIndexs = [0, 11]
    this.scrollNum = 1;
    this.itemPX = 40;

    this.listen();
  };

  PlacesList.prototype = {

      listen: function () {
        var $container = this.$container
          , selector = this.selector;
        $container
          .on('blur.mappanel', selector, proxy(this.blur, this))
          .on('keypress.mappanel', selector, proxy(this.keypress, this))
          .on('keyup.mappanel', selector, proxy(this.keyup, this))
          .on('keydown.mappanel', selector, proxy(this.keydown, this))
          .on('focus.mappanel', selector, proxy(this.focus, this))
          .on('click.mappanel', selector + ' > li', proxy(this.click, this))
          .on('mouseenter.mappanel', selector + ' > li', proxy(this.mouseenter, this));
      }

    , update: function (places, place) {
        this.status = !!places.length || place;
        this.$element.empty();
        this.curr = 0;
        var html = '', li = this.template, location;
        this.hasPlace = false;
        if (this.status) {

          if (place) {
            html += li.replace('{{css-class}}', ' place-marker')
              .replace('{{title}}', place.title)
              .replace('{{address}}', place.description)
              .replace('{{lat}}', place.lat)
              .replace('{{lng}}', place.lng)
              .replace('{{external_id}}', place.external_id);
            this.hasPlace = true;
          }

          R.each(places, function (v) {
            location = v.geometry.location;
            html += li.replace('{{css-class}}', '')
              .replace('{{title}}', v.name)
              .replace('{{address}}', v.formatted_address)
              .replace('{{lat}}', location.lat())
              .replace('{{lng}}', location.lng())
              .replace('{{external_id}}', v.id);
          });

          this.$element.html(html);
        }
        this.$items = this.$element.find(' > li');
        this.len = this.$items.length;
        this.$element.parent().toggleClass('hide', !this.status);
      }

    , blur: function () {
        this.removeCurrStyle('hover');
      }

    , mouseenter: function (e) {
        var $item = $(e.currentTarget),
            i = $item.index();
        this.selectItem(i, true);
        this.component.emit('enter-marker', i, this.hasPlace);
      }

    , selectItem: function (i, scrollable) {
        if (0 === this.len) {
          this.$items = this.$element.find(' > li');
          this.len = this.$items.length;
        }
        this.removeCurrStyle('hover');
        this.curr = i;
        !scrollable && this.$element.scrollTop(Math.floor(i / this.viewportRows) * this.itemPX * this.viewportRows);
        this.addCurrStyle('hover');
      }

    , focus: function () {
        this.$items = this.$element.find(' > li');
        this.len = this.$items.length;
        this.addCurrStyle('hover');
        this.component.emit('enter-marker', this.curr, this.hasPlace);
      }

    , addCurrStyle: function (c) {
        this.$items
          .eq(this.curr)
          .addClass(c)
      }

    , removeCurrStyle: function (c) {
        this.len
          && this.$items
            .eq(this.curr)
            .removeClass(c);
      }

    , clear: function () {
        this.curr = 0;
        this.len = 0;
        this.viewportIndex = 0;
        this.$items = null;
        this.$element.empty()
          .parent().addClass('hide');
      }

    , setPlace: function () {
        if (0 === this.len) { return; }
        var component = this.component,
            $li = this.$items.eq(this.curr),
            place = {
              title: $li.find('div.title').text(),
              description: $li.find('div.description').text(),
              lat: String($li.data('lat')),
              lng: String($li.data('lng')),
              external_id: $li.data('external-id'),
              provider: 'google'
            };
        this.hasPlace = true;
        component.emit('clear-marker', this.curr);
        component.emit('change-place', place, 'list');
        this.clear();
      }

    , scroll: function (arrow) {
        var si = this.scrollIndexs
          , l = this.viewportRows
          , len = this.len
          , n = this.scrollNum
          , h = this.itemPX
          , i = this.curr
          , row = this.viewportIndex += arrow;

        if (row === si[1] + 1 && i === len - 1) {
          this.$element.scrollTop(0);
          this.viewportIndex = 0;
        }

        else if (row === si[0] - 1 && i === 0) {
          this.$element.scrollTop((len - l) * h);
          this.viewportIndex = 11;
        }

        else if ((row === si[0] - 1 && i > si[0]) ||
            (i < len - (l - si[1]) && row === si[1] + 1)) {
          var t = this.$element.scrollTop();
          this.$element.scrollTop(t += arrow * h * n);
          this.viewportIndex = si[(arrow + 1) / 2];
        }
      }

    , prev: function () {
        this.removeCurrStyle('hover');
        if (0 === this.curr) {
          this.curr = this.len;
        }
        this.curr--;
        this.addCurrStyle('hover');
      }

    , next: function () {
        this.removeCurrStyle('hover');
        this.curr++;
        if (this.len === this.curr) {
          this.curr = 0;
        }
        this.addCurrStyle('hover');
      }

    , keyup: function (e) {
        e.stopPropagation();
        e.preventDefault();
      }

    , keyHandler: function (e) {
        var self = this
          , component = self.component
          , hasPlace = self.hasPlace
          , ctrlKey = e.ctrlKey
          , kc = e.keyCode;
        switch (kc) {
        case 9: // tab
          e.preventDefault();
          // 监听 tab, 自定义事件
          component.emit('placeslist-tab');
          break;
        case 13: // enter
        case 32: // spacing
          if (!ctrlKey) {
            e.preventDefault();
            self.setPlace();
            component.emit('enter-marker', self.curr, hasPlace);
          }
          break;
        case 38: // up
          e.stopPropagation();
          e.preventDefault();
          self.scroll(-1);
          self.prev();
          component.emit('enter-marker', self.curr, hasPlace);
          break;
        case 40: // down
          e.stopPropagation();
          e.preventDefault();
          self.scroll(1);
          self.next();
          component.emit('enter-marker', self.curr, hasPlace);
          break;
        }
      }

    , keypress: function (e) {
        if (this.suppressKeyPressRepeat) {
          // must be return `false`, Mozila Firefox
          return false;
        }
        this.keyHandler(e);
      }

    , keydown: function (e) {
        this.suppressKeyPressRepeat = !!~R.indexOf([9, 13, 32, 38, 40], e.keyCode);
        this.keyHandler(e);
      }

    , click: function (e) {
        e.stopPropagation();
        e.preventDefault();
        this.curr = $(e.currentTarget).index();
        this.setPlace();
      }
  };


  /**
   * X Map.
   */
  var XMap = function (component, selector) {
    this.component = component;
    this.selector = selector;
    this.$element = component.$(selector);
    this.$wrap = this.$element.parent();

    // google.maps
    this.GMaps = null;

    // map size: false/true <--> big/small
    this.sizeStatus = true;
    // lat,lng is emtpy
    this.zoom2 = 2;
    this.zoom12 = 12;
    this.zoom16 = 16;
    this.zoomN = 16;

    // padding
    this.a = 0.05;

    this.owidth = this.$element.width();
    this.oheight = this.$element.height();

    // callback id
    this.cbid = 0;

    // red markers
    this.redMarkers = [];
    this.curr = 0;
  };

  XMap.prototype = {

      resize: function (w, h) {
        w < 880 && (w = 880);
        h < 500 && (h = 500);
        this.$element
          .width(w)
          .height(h);
      }

    , initMap: function (userPosition, placePosition, hasLatLng) {
        var self = this,
            component = this.component,
            place = component.place,
            coords = placePosition.coords,
            ucoords = userPosition.coords,
            hasPlace = hasLatLng,
            GMaps, GCP;

        if (!coords) { placePosition.coords = coords = {}; }
        coords.latitude || (coords.latitude = '0');
        coords.longitude || (coords.longitude = '0');

        this.isGo = true;
        // has location
        this.hasLocation = !!ucoords;
        // has place
        this.hasPlace = hasPlace;

        try {
          GMaps = this.GMaps = google.maps;
          GCP = GMaps.ControlPosition;

          // center latlng
          this._center = new GMaps.LatLng(coords.latitude, coords.longitude);

          // location: ''
          this._request = {
            radius: 50000,
            location: this._center
          };

          this.enableOptions = {
            zoomControl: true,
            zoomControlOptions: { position: GCP.RIGHT_TOP },
            scaleControl: true,
            scaleControlOptions: { position: GCP.BOTTOM_LEFT }
          };

          this.zoomN = this.hasPlace ? this.zoom16 : (this.hasLocation ? this.zoom12 : this.zoom2);

          // map
          this._map = new GMaps.Map(
            this.$element[0],
            this.defaultOptions = {
              zoom: this.zoomN,
              center: this._center,
              disableDefaultUI: true,
              MapTypeId: GMaps.MapTypeId.ROADMAP,
              panControl: false,
              zoomControl: false,
              scaleControl: false
            }
          );

          // overlay
          this._overlay = new GMaps.OverlayView();
          this._overlay.draw = function () {};
          this._overlay.setMap(this._map);

          this.createIcons();

          if (this.hasLocation) {
            this._userMarker = new GMaps.Marker({
              map: this._map,
              position: new GMaps.LatLng(ucoords.latitude, ucoords.longitude),
              icon: this.sbicon,
              title: ucoords.title || ''
            });
          }

          this._service = new GMaps.places.PlacesService(this._map);

          if (this.hasPlace) {
            this._map.panBy(-100, 0);
            var marker = this.createBlueMarker(GMaps.Marker,
              {
                map: this._map,
                position: this._center,
                icon: this.bicon,
                draggable: true,
                title: coords.title || ''
              },
              place);
            this.GMaps.event.addListener(marker, 'dragend', function (dl) {
              var latLng = dl.latLng;
              this._place.lat = '' + latLng.lat();
              this._place.lng = '' + latLng.lng();
              this._place.provider = '';
              //component.emit('change-place', this._place, false, true);
              component.emit('change-place', this._place, 'map');
            });
            this.GMaps.event.addListener(marker, 'click', function () {
              self.clearMarkers();
              component.emit('change-place', this._place, 'map');
            }, false);
            this.GMaps.event.addListener(marker, 'mouseover', function () {
              self.selectMarker(this);
              component.emit('enter-placeitem', 0);
            });
          }

          //google.maps.event.addListener(this._map, 'bounds_changed', function () { console.dir(this.getBounds()); });

          var geocoder = new GMaps.Geocoder(), cb,
              mousedown_func = function (dl) {
                //clearTimeout(self._timer);
                self._timer = setTimeout(function () {
                  var place = component.placeInput.getPlace()
                    , latLng = dl.latLng, marker;
                  component.placesList.clear();
                  self.clearBlueMarker();
                  self.clearMarkers();
                  place.lat = '' + latLng.lat();
                  place.lng = '' + latLng.lng();
                  marker = self.createBlueMarker(
                  GMaps.Marker ,
                  {
                    map: self._map,
                    position: latLng,
                    icon: self.bicon,
                    draggable: true,
                    title: place.title || ''
                  }, place);
                  GMaps.event.addListener(marker, 'dragend', function (dl) {
                    var latLng = dl.latLng;
                    this._place.lat = '' + latLng.lat();
                    this._place.lng = '' + latLng.lng();
                    this._place.provider = '';
                    //component.emit('change-place', this._place, false, true);
                    component.emit('change-place', this._place, 'map');
                  });
                  GMaps.event.trigger(marker, 'mouseover');
                  //if ((!place.title && !place.description) || (place.title === 'Right there on map')) {
                    cb = function (results, status) {
                      if (self._timer
                          && cb.id === self.cbid
                          && status === google.maps.GeocoderStatus.OK
                          && results.length) {
                        clearTimeout(self._timer);
                        self.hasPlace = true;
                        self.cbid = 0;
                        place.title = 'Right there on map';
                        place.description = results[0].formatted_address;
                        place.provider = ''; // exfe
                        place.external_id = '';
                        //component.emit('change-place', marker._place = place, false);
                        component.emit('change-place', marker._place = place, 'map');
                      }
                    };
                    cb.id = ++self.cbid;
                    geocoder.geocode({latLng: new GMaps.LatLng(place.lat, place.lng)}, cb);
                  //} else {
                    //component.emit('change-place', place, false);
                  //}
                }, 610);
              },
              mouseup_func = function () { clearTimeout(self._timer); };

          if (ucoords) {
            GMaps.event.addListener(this._userMarker, 'mousedown', mousedown_func);
            GMaps.event.addListener(this._userMarker, 'mouseup', mousedown_func);
          }
          GMaps.event.addListener(this._map, 'mousedown', mousedown_func);
          GMaps.event.addListener(this._map, 'mouseup', mouseup_func);
          GMaps.event.addListener(this._map, 'dragstart', mouseup_func);
        } catch (e) {
          this.isGo = false;
        }
      }

    , createBlueMarker: function (GMarker, options, place) {
        this._placeMarker = this.createMarker(GMarker, options, place);
        this._placeMarker.isBlue = true;
        return this._placeMarker;
      }

    , clearBlueMarker: function () {
        this.removeMarker(this._placeMarker);
        this._placeMarker = null;
      }

    , textSearch: function (query) {
        var self = this,
            GMaps = self.GMaps,
            isGo = self.isGo,
            component = self.component,
            service = self._service,
            request = self._request,
            cb, pm;

        if (isGo) {
          self.clearMarkers();
          if (query && query !== request.query) {
            request.query = query;
            cb = function (results, status) {
              if (cb.id === self.cbid
                && status === GMaps.places.PlacesServiceStatus.OK) {
                self.cbid = 0;
                pm = self._placeMarker;
                self.createMarkers(results);
                component.emit('search-completed', results, pm ? pm._place : null);
              }
            };
            // 避免多异步回调问题
            cb.id = ++self.cbid;
            service.textSearch(request, cb);
          }
        }
      }

    , panToRight: function () {
        var GMaps = this.GMaps,
            map = this._map,
            overlay = this._overlay,
            projection = overlay.getProjection(),
            GPoint = GMaps.Point,
            point =  projection.fromLatLngToContainerPixel(map.getCenter()),
            center = projection.fromContainerPixelToLatLng(new GPoint(point.x - 100, point.y));
        map.setCenter(center);
      }

    , showMarker: function (i, hasPlace) {
        var marker, position;

        if (hasPlace && -1 === --i) {
          marker = this._placeMarker;
        } else {
          marker = this.redMarkers[i];
        }

        if (marker) {
          this.selectMarker(marker);
          position = marker.getPosition();
          this._map.setCenter(position);
        }

        if (this.sizeStatus) {
          this._map.setZoom(this.zoomN = this.zoom16);
          this.panToRight();
        }
      }

    , selectMarker: function (marker) {
        var ricon = this.ricon,
            bicon = this.bicon,
            currMarker = this.currMarker;

        if (currMarker) {
          currMarker.setZIndex(null);
          if (!currMarker.isBlue) {
            currMarker.setIcon(ricon);
          }
        }

        if (marker) {
        marker.setZIndex(377);
          if (!marker.isBlue) {
            marker.setIcon(bicon);
          }

          this.currMarker = marker;
        }
      }

    , createIcons: function () {
        var GMaps = this.GMaps
          , url = site_url + '/static/img/icons.png'
          , gSize = GMaps.Size
          , gPoint = GMaps.Point;
        // blue-icon 26 * 36
        this.bicon = new GMaps.MarkerImage(url, new gSize(26, 36), new gPoint(0, 78));
        // red-icon 26 * 36
        this.ricon = new GMaps.MarkerImage(url, new gSize(26, 36), new gPoint(26, 78));
        // small-blue-icon 12 * 14
        this.sbicon = new GMaps.MarkerImage(url, new gSize(12, 14), new gPoint(52, 100));
      }

    , saveMarker: function (i) {
        var self = this,
            hasPlace = self.hasPlace;

        if (!(hasPlace && 0 === i)) {
          if (hasPlace) {
            this.clearBlueMarker();
            i -= 1;
          }

          var component = this.component,
              GEvent = this.GMaps.event,
              marker = this._placeMarker = this.redMarkers.splice(i, 1)[0];

          this.hasPlace = true;
          this.selectMarker(marker);
          this.defaultOptions.zoom = this.zoomN = this.zoom16;

          GEvent.clearListeners(marker);

          marker.isBlue = true;
          marker.setDraggable(true);

          GEvent.addListener(marker, 'click', function () {
            self.clearMarkers();
            component.emit('change-place', this._place, 'map');
          }, false);

          GEvent.addListener(marker, 'dragend', function (dl) {
            var latLng = dl.latLng;
            this._place.lat = '' + latLng.lat();
            this._place.lng = '' + latLng.lng();
            this._place.provider = '';
            component.emit('change-place', this._place, 'map');
          });

          GEvent.addListener(marker, 'mouseover', function () {
            self.selectMarker(this);
            component.emit('enter-placeitem', 0);
          });
        }
        this.clearMarkers();
      }

    , clear: function () {
        if (this._placeMarker) {
          this.clearBlueMarker();
        }
        this.clearMarkers();
        this.hasPlace = false;
        this.defaultOptions.zoom = this.zoomN = this.hasLocation ? this.zoom12 : this.zoom2;
      }

    , removeMarker: function (marker) {
        marker.setMap(null);
        marker = null;
      }

    , clearMarkers: function () {
        var markers = this.redMarkers, removeMarker = this.removeMarker, marker;
        if (!markers) { return; }
        while ((marker = markers.shift())) {
          removeMarker(marker);
        }
        this.curr = 0;
      }

    , createMarkers: function (places, able) {
        var self = this,
            enable = !able,
            component = this.component,
            createMarker = this.createMarker,
            GMaps = this.GMaps,
            GEvent = GMaps.event,
            GLatLng = GMaps.LatLng,
            GMarker = GMaps.Marker,
            bounds = new GMaps.LatLngBounds(),
            markers = this.redMarkers,
            map = this._map,
            ricon = this.ricon,
            place,
            marker,
            location,
            i = 0,
            marker_click = function () {
              var i = self.indexOf(self.redMarkers, this);
              component.placesList.clear();
              component.emit('clear-marker', i);
              component.emit('click-placeitem', this._place);
            },
            marker_mouseover = function () {
              var i = self.indexOf(self.redMarkers, this);
              self.selectMarker(this);
              component.emit('enter-placeitem', i += !!self._placeMarker ? 1 : 0);
            };

        for (; place = places[i]; ++i) {
          location = place.lat ? new GLatLng(place.lat, place.lng) : place.geometry.location;

          marker = createMarker(GMarker,
            {
              map: map,
              icon: ricon,
              title: place.name,
              position: location,
              zIndex: 0
            },
            {
              title       : place.title || place.name,
              description : place.description || place.formatted_address,
              lat         : '' + location.lat(),
              lng         : '' + location.lng(),
              external_id : place.id || '',
              provider    : 'google'
            });

          // click
          GEvent.addListener(marker, 'click', marker_click, false);

          // mouseover
          GEvent.addListener(marker, 'mouseover', marker_mouseover);

          // mouseout
          //GMaps.event.addListener(marker, 'mouseout', function () { });

          markers.push(marker);
          if (enable) { bounds.extend(location); }
        }
        if (enable) { map.fitBounds(bounds); }
      }

    , createMarker: function (GMarker, options, place, marker) {
        marker = new GMarker(options);
        marker._place = place;
        return marker;
      }

    , zoom: function (n) {
        if (!this.isGo) { return; }
        this.sizeStatus = n;
        var self = this,
            component = self.component,
            element = component.element,
            GMaps = self.GMaps,
            map = self._map,
            markers = self.redMarkers;

        this.$wrap.toggleClass('gmap-big', !n);
        component.$resize.toggleClass('map-rc');
        component.$mask.toggleClass('hide', !n);

        if (n) {
          element.css({
            top: component.otop,
            left: component.oleft
          });
          self.$element
            .width(self.owidth)
            .height(self.oheight);

          setTimeout(function () {
            map.setOptions(self.defaultOptions);
            map.setCenter(self._placeMarker ? self._placeMarker.getPosition() : self._userMarker.getPosition());
            if (self.hasPlace) {
              self.panToRight();
            }
          }, 0);
        }
        else {
          var width = $win.width(),
              height = $win.height(),
              a = self.a,
              sT = $win.scrollTop(),
              sL = $win.scrollLeft();
          self.resize(width * (1 - a * 2), height * (1 - a ) - 56);
          element.css({
            top: 56 + sT,
            left: width * a + sL
          });
          setTimeout(function () {
            map.setOptions(self.enableOptions);
          }, 0);
        }
        GMaps.event.trigger(map, 'resize');
        // 返回到中心点
        (!self._placeMarker && markers.length) && (self._placeMarker = markers[0]);
        map.setCenter(self._placeMarker ? self._placeMarker.getPosition() : self._userMarker.getPosition());

        component.placeInput.$element.focusend();
      }

      // marker index
    , indexOf: function (markers, marker) {
        return R.indexOf(markers, marker);
      }

  };


  // Helpers:
  var parsePlace = function (placeString) {
    var ps = placeString.split(SPLITTER),
        title = ps.length ? $.trim(ps.shift()) : '',
        description = $.trim(ps.join(CR)).replace(SPLITTER, '');

    return {
      title: title,
      description: description//,
      //provider: '',
      //external_id: ''
    };
  };

  var printPlace = function (title, description) {
    return title + (description ? CR + description.replace(SPLITTER, CR) : '');
  };

  var printDate = function (d) {
    return d.getUTCFullYear()
      + '-' + lead0(d.getUTCMonth() + 1)
      + '-' + lead0(d.getUTCDate())
      + ' ' + lead0(d.getUTCHours())
      + ':' + lead0(d.getUTCMinutes())
      + ':' + lead0(d.getUTCSeconds())
      + ' +0000';
  };

  // get Textarea selectionEnd
  var selectionEnd = function (inputor) {
    return isIE ? getIESelectionEnd(inputor) : inputor.selectionEnd;
  };

  var getIESelectionEnd = function (inputor) {
    var r = document.selection.createRange(),
        re = inputor.createTextRange(),
        rc = re.duplicate();
    re.moveToBookmark(r.getBookmark());
    rc.setEndPoint('EndToStart', re);
    return rc.text.length + r.text.length;
  };

  var loadMap = function (cb) {
    if (window.google && window.google.maps) { return; }
    window._loadMaps = function () {};
    $('[src^="https://www.google.com"]').remove();
    var b = document.getElementsByTagName('body')[0], g = document.createElement('script');
    window._gmap = function () { delete window._gmap; };
    window._loadMaps = function () {
      window.google.load('maps', '3', { other_params: 'key=' + MAP_KEY + '&sensor=false&libraries=places', callback: function () {cb()} });
    }
    g.async = 'async';
    g.src = 'https://www.google.com/jsapi?callback=_loadMaps';
    b.appendChild(g);
  };

  return MapPanel;
});

/*jshint -W116*/

define(function (require) {
  'use strict';
  var $ = require('jquery')
    , Bus = require('bus')
    , Store = require('store')
    , Dialog = require('dialog')
    , dialogs = require('xdialog').dialogs
    , Identification = require('xdialog').Identification
    , IdentityPop = require('xidentity')
    , $BODY = $(document.body);

  //$(function () {
  function _docddEventhandler(e) {
    e.stopPropagation();
    e.preventDefault();
    return false;
  }

  $BODY
    .on('drop', _docddEventhandler)
    //.on('dragenter', _docddEventhandler)
    //.on('dragleave', _docddEventhandler)
    .on('dragover', _docddEventhandler);

  var toggle = '[data-toggle="dropdown"]';
  function clearMenus() {
    $(toggle).removeClass('open');
  }
  $BODY
    .on('click.dropdown.data-api', clearMenus);


  /*
    * User-Panel 下拉菜单动画效果
    */
  // 初始化高度
  var _i_ = false;
  function hover(e) {
    var self = $(this)
      , timer = self.data('timer')
      , clicked = self.data('clicked')
      , $userPanel = self.find('div.user-panel').addClass('show')
      , h = -$userPanel.outerHeight();

    e.preventDefault();

    if (e.type === 'mouseleave' && !clicked) {
      timer = setTimeout(function () {
        _i_ = false;
        $userPanel
          .stop()
          .animate({top: h}, 200, function () {
            self.prev().addClass('hide');
            self.parent().removeClass('user');
          });
        clearTimeout(timer);
        self.data('timer', timer = null);
      }, 500);

      self.data('timer', timer);
      return false;
    }

    if (clicked) {
      self.data('clicked', false);
      return;
    }

    if (timer) {
      clearTimeout(timer);
      self.data('timer', timer = null);
      return false;
    }

    if (!_i_) {
      $userPanel.css('top', h);
      self.find('.user-panel').addClass('show');
      _i_ = true;
    }

    self.prev().removeClass('hide');
    self.parent().addClass('user');
    $userPanel
      .stop()
      .animate({top: 56}, 100);
  }

  $BODY.on('mouseenter.dropdown mouseleave.dropdown', '#app-user-menu .dropdown-wrapper', hover);

  $BODY.on('click.usermenu', '#app-user-menu .dropdown-wrapper a[href^="/#"]', function () {
    var self = $('#app-user-menu .dropdown-wrapper')
      , $userPanel = self.find('div.user-panel').addClass('show')
      , h = -$userPanel.outerHeight();

    $userPanel.css('top', h);

    self
      .prev()
      .addClass('hide')
      .end()
      .parent()
      .removeClass('user');

    self.data('clicked', true);
  });

  $BODY.on('click.usermenu', '#app-signout', function () {
    Bus.emit('xapp:cross:end');
    $('.navbar .dropdown-wrapper').find('.user-panel').remove();
    $('#app-signin')
      .show()
      .next().hide()
      .removeClass('user')
      .find('.fill-left').addClass('hide')
      .end()
      .find('#user-name span').text('');
    Store.remove('cats');
    Store.remove('user');
    Store.remove('authorization');
    window.location.href = '/';
  });

  // TODO:后面再优化
  $BODY.on('click.data-link dblclick.data-link', '[data-link]', function (e) {
    var actionType = $(this).data('link');
    var event_ignore = $(this).data('event-ignore');

    if (e.type !== event_ignore) {

      // 判断权限
      //var authorization = Store.get('authorization');
          //token = authorization && authorization.token;


      var $db = $('#app-browsing-identity')
        , read_only = $db.data('read-only')
        , settings = $db.data('settings')
        , $readOnly = $('#app-read-only')
        , tokenType = $db.data('token-type');
        //, btoken = $db.data('token')
        //, action = $db.data('action');

      // read only
      if ($db.size() && read_only && actionType === 'nota') {
        e.stopImmediatePropagation();
        e.stopPropagation();
        e.preventDefault();

        if (!$readOnly.size()) {
          $('#app-main').append(
            $readOnly = $('<div id="app-read-only" data-widget="dialog" data-dialog-type="read_only"></div>')
              .data('settings', settings.browsing)
          );
        }

        $readOnly.trigger('click');
        return false;
      }

      if ($db.size()) {
        // profile 操作, 后端暂不支持browsing-identity 修改身份内容,弹 D4 窗口
        //if (actionType === 'nota' && tokenType === 'user') {
          //e.stopImmediatePropagation();
          //e.stopPropagation();
          //e.preventDefault();
          //$('[data-user-action="' + action + '"]').trigger('click');
          //return false;
        //}
        //else if (actionType === '') {
        if (actionType === '' || (actionType === 'nota' && tokenType === 'user')) {
          e.stopImmediatePropagation();
          e.stopPropagation();
          e.preventDefault();
          $db.trigger('click');
          return false;
        }
      /*
      } else if (!token) {
        e.stopImmediatePropagation();
        e.stopPropagation();
        e.preventDefault();
        if (!$readOnly.size()) {
          $('#app-main').append(
            $readOnly = $('<div id="app-read-only" data-widget="dialog" data-dialog-type="read_only"></div>')
              .data('settings', Store.get('user'))
          );
        }
        $readOnly.trigger('click');
        return false;
      */
      }

    }
  });

  // 只弹两次
  var LIMIT = 2;
  Bus.on('app:cross:edited', function (data) {
    if (0 === LIMIT) {
      return;
    }
    LIMIT--;
    var $db = $('#app-browsing-identity')
      , settings = $db.data('settings')
      , $readOnly = $('#app-read-only')
      , action = $db.data('action');

    if (!data) {
      if (action === 'setup') {
        $('[data-user-action="' + action + '"]').trigger('click');
      }
    // read-only
    // data = {error : 'no_permission'}
    } else if (data && data.error === 'no_permission') {
      if (!$readOnly.size()) {
        $('#app-main').append(
          $readOnly = $('<div id="app-read-only" data-widget="dialog" data-dialog-type="read_only"></div>')
            .data('settings', (settings && settings.browsing) || Store.get('user'))
        );
      }
      $readOnly.trigger('click');
    }
  });

/* MODAL DATA-API
  * -------------- */
  $BODY.on('click.dialog.data-api', '[data-widget="dialog"]', function (e) {
    var $this = $(this)
      , data = $this.data('dialog')
      , settings
      , dialogType = $this.data('dialog-type')
      , dialogTab = $this.data('dialog-tab')
      , dialogFrom = $this.data('dialog-from')
      , dialogSettings = $this.data('dialog-settings');

    e.preventDefault();

    if (!data)  {

      if (dialogType) {
        settings = dialogs[dialogType];
        if (dialogSettings) {
          settings = $.extend(true, {}, settings, dialogSettings);
        }
        /*jshint -W056*/
        data = new (dialogType === 'identification' ? Identification : Dialog)(settings);
        data.options.srcNode = $this;
        if (dialogFrom) data.dialog_from = dialogFrom;
        data.render();
        $this.data('dialog', data);
        // 检索页面包含此 `dialog` 类型的元素，并设置引用
        $BODY
          .find('[data-dialog-type="' + dialogType + '"]')
          .not($this)
          .data('dialog', data);
      }

    }

    if (dialogTab) data.switchTab(dialogTab);
    data.show(e);

  });
//});

  var identities = Store.get('identities');
  !identities && (identities = []);

  $BODY.on('focus.typeahead.data-api', '[data-typeahead-type="identity"]', function (e) {
    var $this = $(this);

    if ($this.data('typeahead')) return;
    e.preventDefault();
    $this.data('typeahead', new IdentityPop({

      options: {
        source: identities,
        useCache: true,
        target: $this,
        // 当输入框没有值时，触发
        onNothing: function () {
          this.target.parent().removeClass('identity-avatar');
          Bus.emit('widget-dialog-identification-nothing');
        },

        //'onAutocomplete:beforesend': function (identity) {},
        'onAutocomplete:finish': function (data) {
          var identity;
          if (data && (identity = data.identity)) {
            //if (identity['avatar_filename'] === 'default.png') {
              //identity['avatar_filename'] = '/img/default_portraituserface_20.png';
            //}
            this.target
              .prev()
              .attr('src', identity.avatar_filename)
              .parent()
              .addClass('identity-avatar');
          } else {
            this.target.parent().removeClass('identity-avatar');
          }
          Bus.emit('widget-dialog-identification-auto', data);
        }
      }
    }));

  });
});

define('photox', function (require) {
  "use strict";

  var $ = require('jquery'),
      R = require('rex'),
      Bus = require('bus'),
      request = require('api').request,
      //PVS = window._ENV_.photo_providers,
      Dialog = require('dialog'),
      Store = require('store'),
      dialogs = require('xdialog').dialogs,
      Handlebars = require('handlebars'),
      proto;

  /**
   *  data-imported
   *    -2          full selected, but no submit
   *    -1          full selected
   *     0          no selected
   *    > 0         selected
   */

  Handlebars.registerHelper('px_imported', function (imported) {
    return imported > 0 ? imported : '<i class="ix-selected"></i>';
  });

  // NOTE: photox_id === cross_id
  var DataCenter = {

    // description: 获取一个 PhotoX 下的所有照片。
    getPhotoX: function (photox_id, done) {
      return request(
        'photox_getPhotoX',
        {
          resources : { photox_id : photox_id }
        },
        // {"photox" : [object:photox]}
        done
      );
    },

    // description: 获取所有身份/某个第三方身份的所有 albums & photos
    browseSource: function (photox_id, identity_id, album_id, bcb, done, fail) {
      var options = {},
          data = {};
      if (photox_id) { data.photox_id = photox_id; }
      if (identity_id) { data.identity_id = identity_id; }
      if (album_id) { data.album_id = album_id; }
      if (bcb) { options.beforeSend = bcb; }

      options.data = data;

      return request(
          'photox_borwseSource',
          options,
          // {"albums" : [array:album_object]}
          done,
          fail
        );
    },

    // description: 获取某一张照片的全尺寸版本。
    getPhoto: function (photo_id, done) {
      return request(
        'photox_getPhoto',
        {
          data : { photo_id : photo_id }
        },
        // {"photo" : [object:photo]}
        done
      );
    },

    // description: 添加照片到 PhotoX。
    add: function (photox_id, post_args, bcb, done) {
      var options = {
        type        : 'POST',
        resources   : { photox_id: photox_id },
        data        : post_args
      };
      if (bcb) {
        options.beforeSend = bcb;
      }
      return request(
        'photox_add',
        options,
        // {"photo" : [object:photo]}
        done
      );
    },

    // description: 用于从有相册功能的身份中添加照片
    // eg: Facebook, Flickr, Dropbox
    addAlbum: function (photox_id, identity_id, album_id, bcb, done) {
      return DataCenter.add(
        photox_id,
        {
          identity_id : identity_id,
          album_id    : album_id
        },
        bcb,
        done
      );
    },

    // 用于从有照片流功能的身份中添加照片
    // eg: Instagram
    addStream: function (photox_id, identity_id, ids, bcb, done) {
      return DataCenter.add(
        photox_id,
        {
          identity_id : identity_id,
          ids: ids
        },
        bcb,
        done
      );
    },

    // 用于从 PhotoStream 等公开 feed 中加入照片
    // eg: PhotoStream
    addFeed: function (photox_id, stream_id, done) {
      return DataCenter.add(
        photox_id,
        { stream_id : stream_id },
        done
      );
    },

    // description: 获取照片的 like 状态。
    getLikes: function (photox_id, done) {
      return request(
        'photox_getLikes',
        {
          resources : { photox_id : photox_id }
        },
        // {"likes" : [array:response_object]}
        done
      );
    },

    // description: Like 一张照片。
    like: function (id, done) {
      return request(
        'photox_like',
        {
          type : 'POST',
          data : { id : id }
        },
        // {"like" : [object:response]}
        done
      );
    },

    delAlbum: function (photox_id, provider, album_id, bcb, done) {
      return request(
        'photox_del',
        {
          type        : 'POST',
          resources   : { photox_id : photox_id },
          data        : {
            provider    : provider,
            album_id    : album_id
          },
          beforeSend: bcb
        },
        done
      );
    },

    delPhotos: function (photox_id, provider, photo_ids, bcb, done) {
      return request(
        'photox_del',
        {
          type        : 'POST',
          resources   : { photox_id : photox_id },
          data        : {
            provider    : provider,
            photo_ids   : photo_ids 
          },
          beforeSend: bcb
        },
        done
      );
    }
  };


  /*
  var XCache = {
    _: {}
  };

  XCache.init = function (keys) {
    var _ = this._, k;
    while ((k = keys.shift())) {
      _[k] = [];
    }
  };

  XCache.add = function (type, photo) {
    var pt = this._[type];
  };

  XCache.del = function (type, photo) {
  };
  */


  /**
   * Paths Cache
   * Like the `cd` command in Shell
   */
  var FS = function () {};

  proto = FS.prototype;

  proto.has = function () {
    return !!this.uid && !!this.gid;
  };

  proto.find = function (path) {
    return R.indexOf(this.paths, path);
  };

  proto.setUid = function (iid) {
    this.uid = iid;
    return this;
  };

  proto.setGid = function (p) {
    this.gid = p;
    return this;
  }

  proto.cd = function (path, deep, cb) {
    if (!this.paths) { this.paths = []; }
    deep = deep || 1;
    this.paths = this.paths.slice(0, deep);
    var i = this.find(path);
    if (-1 === i) {
      this.paths.push(path);
    } else {
      this.paths = this.paths.slice(0, i + 1);
    }
    if (cb) { cb(path, this); }
    //console.dir(this.paths);
    return this;
  };

  proto.clear = function (cb) {
    if (this.paths) {
      this.paths.length = 0;
    }
    if (cb) { cb(); }
    return this;
  };

  proto.prev = function (cb) {
    var ps = this.paths;
    ps.pop();
    if (cb) { cb(ps[ps.length - 1], ps); }
  };


  /**
   * Nav-Tabs composition
   */
  var NavTabs = function (composition, selector, providers) {
    this.composition = composition;
    this.selector = selector;
    this.$element = composition.$(selector);
    this.providers = providers;
    this.append(providers);
  };

  proto = NavTabs.prototype;

  proto.liTmp = '<li{{class}} data-provider="{{provider}}" data-iid="{{iid}}"><a href="#" class="hide-text""><i class="ix-provider ix-{{provider}}"></i></a></li>';

  proto.badgeTmmp = '<div class="badge badgex"></div>';

  proto.generate = function (providers) {
    var t = this.liTmp, h = '', p;
    providers = providers.split(' ');
    while ((p = providers.shift())) {
      p = p.split(':');
      h += t.replace('{{class}}', +p[1] ? '' : ' class="no-oauth"')
        .replace(/\{\{provider\}\}/g, p[0])
        .replace('{{iid}}', p[1]);
    }
    return h;
  };

  proto.append = function (providers) {
    this.$element.append(this.generate(providers));
  };

  proto.switch = function (provider, keep) {
    var $e = this.$element,
        $l = $e.find('[data-provider="' + provider + '"]'),
        status = true;
    if (!$l.hasClass('active')) {
      $e.find('.active').removeClass('active');
      $l.addClass('active');
      status = false;
    } else {
      if (!keep) {
        $l.removeClass('active');
      }
    }
    return status;
  };

  proto.updateBadge = function (provider, n) {
    var $li = this.$element.find('> [data-provider="' + provider  + '"]'),
        $badge = $li.find('.badge'), t;
    if ($badge.length) {
      t = +$badge.text();
    } else {
      $badge = $(this.badgeTmmp);
      $li.append($badge);
      t = 0;
    }
    $badge.text(t + n);
  };

  /**
   * Dropbox
   * Breadcrumb composition
   */
  var Breadcrumb = function (composition, selector) {
    this.composition = composition;
    this.selector = selector;
    this.$element = composition.$(selector);

    this.initstatus = 1;
  };

  proto = Breadcrumb.prototype;

  proto.liTmp = '<li data-iid="{{iid}}" data-eaid="{{aid}}"><a href="#">{{dir}}</a><span class="divider hidden"></span></li>';

  proto.displayHome = function (iid) {
    var identities = Store.get('user').identities,
        identity = R.find(identities, function (v) {
          if (v.id === iid) { return true; }
        });
    this.$element.append(this.generate(iid, '', identity.name + "'s Dropbox"));
    this.initstatus = 0;
  };

  proto.generate = function (iid, eaid, dir) {
    return this.liTmp
      .replace('{{iid}}', iid)
      .replace('{{eaid}}', eaid)
      .replace('{{dir}}', dir);
  };

  proto.show = function (iid) {
    var $e = this.$element;
    if (this.initstatus) {
      this.displayHome(iid);
    }

    this.del(1);

    if ($e.hasClass('hide')) {
      $e.removeClass('hide');
    }
  };

  proto.del = function (n) {
    var $last = this.$element.find('li').slice(n - 1);
    $last.nextAll().remove();
    $last.find('.divider').addClass('hidden');
  };

  proto.add = function (iid, p) {
    var $li = $(this.generate(iid, p, p));
    this.$element.append($li)
    $li.prev().find('.divider').removeClass('hidden');
  };


  proto.hide = function () {
    this.$element.addClass('hide');
  };

  proto.toggle = function (status, iid) {
    status ? this.show(iid) : this.hide();
  };

  /**
   * Thumbnails composition
   */
  var Thumbnails = function (composition, selector) {
    this.composition = composition;
    this.selector = selector;
    this.$albums = composition.$(selector);
    this.$parent = this.$albums.parent();
  };

  proto = Thumbnails.prototype;

  proto.liAlbumTmp = '{{#each albums}}'
    + '<li data-provider="{{provider}}" data-iid="{{by_identity.id}}" data-eaid="{{external_id}}" data-imported="{{imported}}">'
      + '<div class="thumbnail">'
        + '<div class="badge album-badge badgex {{#unless imported}}hide{{/unless}}">{{{px_imported imported}}}</div>'
        + '<div class="photo">'
          + '<div class="album-figure"></div>'
          + '{{#if artwork}}'
          + '<figure>'
            + '<img alt="" src="{{artwork}}" width="70" height="70" />'
          + '{{else}}'
          + '<figure class="placeholder ix-placehoder">'
          + '{{/if}}'
          + '</figure>'
        + '</div>'
        + '<h4 class="name">{{caption}}</h4>'
      + '</div>'
    + '</li>'
    + '{{/each}}';

  proto.liPhotoTmp = '{{#each photos}}'
    + '<li data-provider="{{provider}}" data-iid="{{by_identity.id}}" data-imported="{{imported}}" data-epid="{{external_id}}" data-pid="{{id}}">'
      + '<div class="thumbnail">'
        + '<div class="badge album-badge badgex {{#unless imported}}hide{{/unless}}"><i class="ix-selected"></i></div>'
        + '<div class="photo">'
          + '<div class="photo-figure"></div>'
          + '{{#if images.preview.url}}'
          + '<figure>'
            + '<img alt="" src="{{images.preview.url}}" width="70" height="70" />'
          + '{{else}}'
          + '<figure class="placeholder ix-placehoder">'
          + '{{/if}}'
          + '</figure>'
        + '</div>'
        + '<h4 class="name">{{caption}}</h4>'
      + '</div>'
    + '</li>'
    + '{{/each}}';

  proto.showAlbums = function () {
    var $albums = this.$albums,
        liAlbumTmp = this.liAlbumTmp,
        //liPhotoTmp = this.liPhotoTmp,
        composition = this.composition,
        self = this,
        q = composition.q;
    /*
    $.when(
      DataCenter.getPhotoX(this.cid),
      DataCenter.browseSource(null, null)
    )
    .done(function (ap, ab) {
      var d0 = ap[0],
          d1 = ab[0];
    });
    */
    //q.push(DataCenter.getPhotoX(composition.cid, function (data) {
      //console.dir(data);
    //}));
    q.push(DataCenter.browseSource(
      composition.cid,
      null, null,
      function () {
        composition.emit('toggle-loading', true);
      },
      function (data) {
        composition.emit('toggle-loading', false);
        var al = data.albums.length,
            pl = data.photos.length;
        if (al + pl) {
          var at = Handlebars.compile(liAlbumTmp),
              ah = at(data),
              ph = self.genPhotosHTML(data);
          $albums.html(ah + ph);
        } else {
          composition.emit('toggle-error', false, 'albums');
        }
      },
      function (data, code) {
        composition.emit('toggle-loading', false);
        if (code === 400) {
          composition.emit('toggle-error', false, 'albums');
        } else {
          composition.emit('toggle-error', false, 'ajax');
        }
      }
    ));
  };

  proto.genPhotosHTML = function (data) {
    var pt = Handlebars.compile(this.liPhotoTmp),
        ph = pt(data);
    return ph;
  };

  proto.hideAlbums = function () {
    this.$albums.addClass('hide');
  };

  proto.switchByProvider = function (identityId, provider) {
    this.$albums
      .removeClass('hide')
      .children()
      .each(function () {
        var $li = $(this),
          p = $li.attr('data-provider');
        $li.toggleClass('hide', p !== provider);
      });
  };

  proto.showAllAlbums = function () {
    this.$albums
      .removeClass('hide')
      .find(' > .hide')
      .removeClass('hide');
  };

  proto.startUL = '<ul class="thumbnails photos hide">';
  proto.endUL = '</ul>'

  proto.generate = function (data) {
    var at = Handlebars.compile(this.liAlbumTmp),
        pt = Handlebars.compile(this.liPhotoTmp),
        ah = at(data),
        ph = pt(data);
    return this.startUL + ah + ph + this.endUL;
  };

  proto.showPhotos = function (data) {
    var $e;
    $e = $(this.generate(data));
    this.$albums.append($e);
    $e.removeClass('hide');
    this.$parent.append($e);
      /*
      if (imported) {
        $e.find('.badge').removeClass('hide');
      }
      */
  };

  proto.toggleBadge = function ($t, status) {
    var $b = $t.find('.badge');
    $b.toggleClass('hide', status);
    if ($b.hasClass('hide')) {
      $t.attr('data-imported', '0');
    } else {
      $t.attr('data-imported', '-2');
      $b.html('<i class="ix-selected"></i>');
    }
  };

  proto.updateBadge = function (provider, i, s) {
    var $a = this.$albums
          .find('[data-provider="' + provider + '"]'),
        imported = ~~$a.attr('data-imported');

    if (s) {
      imported = i;
    } else {
      // Note: 删除时，imported = -1 情况，delete 接口应该返回
      if (imported !== -1) {
        imported += i;
      }
    }

    $a.attr('data-imported', imported);
    $a.find('.badge').text(imported).toggleClass('hide', !imported);
  };

  var Panel = require('panel');

  var PhotoXPanel = Panel.extend({

    options: {

      template: ''
        + '<div class="panel photox-panel" id="photox-panel">'
          + '<div class="clearfix panel-header">'
            + '<h3 class="pull-left title panel-title"><i class="ix-wall ix-wall-blue"></i>&nbsp;PhotoX</h3>'
            + '<ul class="pull-right nav nav-tabs"></ul>'
          + '</div>'
          + '<div class="panel-body">'
            + '<ul class="breadcrumb hide"></ul>'
            + '<div class="errors hide">'
              + '<div class="albums-error hide">'
                + '<p class="title">Oops, no photo to share.</p>'
                + '<p>Import photos from your account above.</p><br />'
                + '<p>Collects photos from a variety of your web accounts.</p>'
                + '<p>and share with everyone’s all together in the ·X·.</p>'
              + '</div>'
              + '<div class="photos-error hide">'
                + '<p class="title">Album empty.</p>'
              + '</div>'
              + '<div class="ajax-error hide">'
                + '<p class="title">Network error. Please try to reload.</p>'
              + '</div>'
            + '</div>'
            + '<div class="loading hide"><img alt="" width="32" height="32" src="/static/img/loading.gif" /></div>'
            + '<ul class="thumbnails albums"></ul>'
          + '</div>'
          + '<div class="panel-footer">'
            + '<div class="detail"><span class="selected-nums">0</span> pics selected</div>'
            + '<div class="icon-resize"></div>'
            + '<button class="xbtn-import">Import</button>'
          + '</div>'
        + '</div>',

      parentNode: null,

      srcNode: null
    },

    init: function () {
      var options = this.options;
      this.cid = options.crossId;
      this.providers = options.providers;
      delete options.providers;

      this.navTabs = new NavTabs(this, '.panel-header .nav-tabs', this.providers);
      this.breadcrumb = new Breadcrumb(this, '.panel-body .breadcrumb');
      this.thumbnails = new Thumbnails(this, '.panel-body .albums');
      this.fs = new FS();

      // ajax queues
      this.q = [];

      this.render();
      this.listen();
    },

    listen: function () {
      var self = this,
          fs = self.fs,
          cid = self.cid,
          element = self.element,
          navTabs = self.navTabs,
          thumbnails = self.thumbnails,
          breadcrumb = self.breadcrumb,
          queue = self.q,
          $loading = self.element.find('.loading');

      element.on('click.photox', '.nav-tabs > li', function (e) {
        e.preventDefault();
        e.stopPropagation();
        self.killAjaxs();
        self.emit('toggle-loading', false);
        self.emit('toggle-error', true);
        var $that = $(this),
            iid = ~~$that.data('iid'), p = $that.data('provider');
        if (iid) {
          if (navTabs.switch(p)) {
            self.emit('show-albums');
            breadcrumb.toggle(false);
          } else {
            self.emit('switch-provider', iid, p);
          }
          thumbnails.$albums.nextAll('.photos').remove();
        } else {
          var dialog = new Dialog(dialogs.addidentity);
          dialog.render();
          dialog.element.find('.oauth-' + p).trigger('click');
        }
      });

      // Dropbox 
      element.on('click.photox', '.breadcrumb a', function (e) {
        e.preventDefault();
      });

      // Albums' click-event
      /*
      element.on('click.photox', '.thumbnails > li[data-eaid]', function (e) {
        //console.log('click');
        e.preventDefault();
        var $t = $(this),
            iid = $t.data('iid'),
            p = $t.data('provider'),
            eaid = $t.data('aid'),
            imported = ~~$t.attr('data-imported');
        CLICK++;
        if (CLICK === 1) {
          CLICKTIMER = setTimeout(function () {
            thumbnails.toggleBadge($t);
            if (imported !== 0 && imported !== -2) {
              DataCenter.delAlbum(
                cid, p, eaid,
                function () { },
                function (data) {
                  $t.attr('data-imported', '0');
                }
              );
            }
            CLICK = 0;
          }, 233);
        } else {
          clearTimeout(CLICKTIMER);
          navTabs.switch(p, true);

          // Dropbox's Breadcrumb
          if (p === 'dropbox') {
            breadcrumb.toggle(p === 'dropbox', iid);
            var eaids = decodeURIComponent(aid).split('/'),
                len = eaids.length;
            eaid = aids[len - 1];
            if (!fs.has()) {
              fs.setUid(iid).setGid(p).cd('/');
            }
            //console.log(iid, eaid, p, aids, imported);
            fs.cd(eaid, len, function (p) {
              breadcrumb.del(len);
              breadcrumb.add(iGid, p);
            });
          }

          thumbnails.hideAlbums();
          DataCenter.browseSource(
            cid, iid, eaid,
            function () {
              self.emit('toggle-loading', true);
            },
            function (data) {
              self.emit('toggle-loading', false);
              var al = data.albums.length,
                  pl = data.photos.length,
                  t = al + pl;
              if (t) {
                thumbnails.showPhotos(data, imported);
              } else {
                self.emit('toggle-error', false, 'photos');
              }
            }
          );
          CLICK = 0;
        }
      });
      */
      // `longpress` event 选中
      element.on('mousedown.photox', '.thumbnails > li[data-eaid]', function (e) {
        e.preventDefault();
        var $t = $(this),
            d = $t.data(), iid = d.iid, p = d.provider, eaid = d.eaid,
            imported = ~~$t.attr('data-imported'),
            status = 0;

        var timer = setTimeout(function () {
          status = 1;
          thumbnails.toggleBadge($t);

          // ajaxing
          if (imported === -2) {
            return;
          }

          // delete
          if (imported !== 0 && imported !== -2) {
            DataCenter.delAlbum(
              cid, p, eaid, null,
              function () {
                $t.attr('data-imported', '0');

                // todo: 优化
                // 出发 `photox-widget` 更新
                Bus.emit('update-photoxwidget');
              }
            );
            return;
          }

          // add
          var cb = function () {
            $t.attr('data-imported', '-1');

            // todo: 优化
            // 出发 `photox-widget` 更新
            Bus.emit('update-photoxwidget');
          };

          if (p === 'instagram') {
            $.when(DataCenter.browseSource(cid, iid, eaid))
              .then(function (data) {
                var ps = data.photos,
                    ids = R.map(ps, function (v) {
                      return v.external_id;
                    });
                DataCenter.addStream(cid, iid, JSON.stringify(ids), null, cb);
              });
          } else {
            DataCenter.addAlbum(cid, iid, eaid, null, cb);
          }

        }, 987);

        $t.on('mouseup.photox', function () {
          clearTimeout(timer);
          $t.off('mouseup.photox');
          if (status) {
            return;
          }

          // cd folder -----------------------------
          navTabs.switch(p, true);

          // Dropbox's Breadcrumb
          if (p === 'dropbox') {
            breadcrumb.toggle(p === 'dropbox', iid);
            var eaids = decodeURIComponent(eaid).split('/'),
                len = eaids.length;
            eaid = eaids[len - 1];
            if (!fs.has()) {
              fs.setUid(iid).setGid(p).cd('/');
            }
            //console.log(iid, eaid, p, aids, imported);
            fs.cd(eaid, len, function (p) {
              breadcrumb.del(len);
              breadcrumb.add(iid, p);
            });
          }

          thumbnails.hideAlbums();
          queue.push(DataCenter.browseSource(
            cid, iid, eaid,
            function () {
              self.emit('toggle-loading', true);
            },
            function (data) {
              self.emit('toggle-loading', false);
              var al = data.albums.length,
                  pl = data.photos.length,
                  t = al + pl;
              if (t) {
                thumbnails.showPhotos(data, imported);
              } else {
                self.emit('toggle-error', false, 'photos');
              }
            },
            function (data, code, statusText) {
              if (!code && statusText === 'timeout') {
                self.emit('toggle-loading', false);
                self.emit('toggle-error', false, 'ajax');
              }
            }
          ));
          // ---------------------------------------
        });
      });


      // Photos' click-event
      element.on('click.photox', '.thumbnails > li[data-epid]', function (e) {
        e.preventDefault();
        e.stopPropagation();
        var $t = $(this),
            d = $t.data(), iid = d.iid, p = d.provider,
            epid = d.epid, pid = $t.attr('data-pid'),
            spid = '["' + pid + '"]',
            sepid = '["' + epid + '"]',
            imported = ~~$t.attr('data-imported');

        // ajaxing
        if (imported === -2) {
          return;
        }

        thumbnails.toggleBadge($t);
        // delete
        if (imported !== 0 && imported !== -2) {
          DataCenter.delPhotos(
            cid, p, spid,
            null,
            function (data) {
              var $tp = $t.parent(),
                  $ts = $tp.children(),
                  i = 0, photos = [];
              $t.attr('data-pid', 0);
              $t.attr('data-imported', 0);
              R.each(data.photox.photos, function (v) {
                if (p === v.provider) {
                  i++;
                  $t = $ts.filter('[data-epid="' + v.external_id + '"]');
                  if (!$t.size()) {
                    photos.push(v);
                  }
                  $t.attr('data-imported', 1);
                  $t.attr('data-pid', v.id);
                  $t.find('.badge').removeClass('hide');
                }
              });
              if (i) {
                $tp.append(thumbnails.genPhotosHTML({photos: photos}));
              }
              self.emit('update-albums-badge', p, i, true);

              // todo: 优化
              // 出发 `photox-widget` 更新
              Bus.emit('update-photoxwidget');
            }
          );
          return;
        }

        // add 现在只支持 `instagram` 单张
        if (p === 'instagram') {
          DataCenter.addStream(
            cid, iid, sepid,
            null,
            function (data) {
              var ps = data.photox.photos,
                  $tp = $t.parent(),
                  $ts = $tp.children(),
                  i = 0, photos = [];
              R.each(ps, function (v) {
                if (p === v.provider) {
                  i++;
                  $t = $ts.filter('[data-epid="' + v.external_id + '"]');
                  if (!$t.size()) {
                    d.photos.push(v);
                  }
                  $t.attr('data-imported', 1);
                  $t.attr('data-pid', v.id);
                  $t.find('.badge').removeClass('hide');
                }
              });
              if (i) {
                $tp.append(thumbnails.genPhotosHTML({photos: photos}));
                self.emit('update-albums-badge', p, i, true);
              }

              // todo: 优化
              // 出发 `photox-widget` 更新
              Bus.emit('update-photoxwidget');
            }
          );
        }
      });

      self.on('show-albums', function () {
        thumbnails.showAllAlbums();
      });

      //self.on('update-tabs-bage', function (provider, n) { tabs.updateBadge(provider, n); });

      self.on('toggle-loading', function (b) {
        $loading[(b ? 'remove' : 'add') + 'Class']('hide');
      });

      self.on('toggle-error', function (b, t) {
        var $es = element.find('.errors').toggleClass('hide', b);
        if (t) {
          $es.children().addClass('hide');
          if (t === 'albums') {
            $es.find('.albums-error').removeClass('hide');
          } else if (t === 'photos') {
            $es.find('.photos-error').removeClass('hide');
          } else {
            $es.find('.ajax-error').removeClass('hide');
          }
        }
      });

      self.on('update-albums-badge', function (provider, i, s) {
        thumbnails.updateBadge(provider, i, s);
      });

      /**
       * @param {Number} iid identity-id
       * @param {String} p provider
       */
      self.on('switch-provider', function (iid, p) {
        if (p === 'dropbox') {
          fs.clear().setUid(iid).setGid(p).cd('/');
        }
        breadcrumb.toggle(p === 'dropbox', iid);
        thumbnails.switchByProvider(iid, p);
      });
    },

    showAfter: function () {
      var offset = this.srcNode.offset();
      this.element.css({
        top: offset.top,
        left: offset.left - 20
      });
      this.thumbnails.showAlbums();
    },

    killAjaxs: function (a) {
      while ((a = this.q.shift())) {
        a.abort();
      }
    },

    destory: function () {
      this.killAjaxs();
      this.element.off();
      this.element.remove();
      this._destory();
    }

  });

  return PhotoXPanel;
});

/* NOTES:
  - 身份 re-work 情况，查看 failed_identities
  - 关掉 `PhotoX-Panel` 是否取消之前操作，还是有提示
  - 打开 `PhotoX-Panel` 显示位置
    显示在 `Conversation` 上，最小宽度跟 `Converstaion` 一样
  - 第一次没有绑定任何 photo-identity, `albums` 区域显示什么
    有提示文字
  - ajax 操作失败
  - ajax abort
    eg: 比如选择一个 provider, 突然有进入 一个 album, 如何处理多异步回调情况
  - 没有对 Dropbox 深目录进行测试
  - Instagram 添加 folder min_id ~ max_id
*/

define('filehtml5', function (require) {

  // File HTML5 Uploader
  var Class = require('class');
  var Emitter = require('emitter');

  var Win = window;

  var FileHTML5 = Class.create(Emitter, {

    initialize: function (o) {
      var file = null;

      if (FileHTML5.isValidFile(o)) {
        file = o;
      }
      else if (FileHTML5.isValidFile(o.file)) {
        file = o.file;
      }
      else {
        file = false;
      }

      if (file && FileHTML5.canUpload()) {
        this._file = file;
        this._name = file.name || file.fileName;
        this._size = file.size || file.fileSize;
        this._type = file.type;

        if (file.hasOwnProperty('lastModifiedDate')) {
          this._dateModified = file.lastModifiedDate;
        }
      }
      this._id = guid();
    },

    _uploadEventHandler: function (event) {
      var xhr = this._xhr,
          type = event.type;

      switch (type) {

        case 'progress':

          this.emit('uploadprogress', {
            originEvent: event,
            bytesLoaded: event.loaded,
            bytesTotal: this._size,
            percentLoaded: Math.min(100, Math.round(10000*event.loaded/this._size)/100)
          });

          this._bytesUploaded = event.loaded;
          break;

        case 'load':

          if (xhr.status >= 200 && xhr.status <= 299) {
            this.emit('uploadcomplete', {
              originEvent: event,
              data: event.target.responseText
            });

            var xhrupload = xhr.upload,
                boundEventHandler = this._boundEventHandler;

              xhrupload.removeEventListener('progress', boundEventHandler);
              xhrupload.removeEventListener('crror', boundEventHandler);
              xhrupload.removeEventListener('abort', boundEventHandler);
              xhr.removeEventListener('load', boundEventHandler);
              xhr.removeEventListener('error', boundEventHandler);
              xhr.removeEventListener('readystatechange', boundEventHandler);

              this._xhr = null;
          } else {
            this.emit('uploaderror', {
              originEvent: event,
              status: xhr.status,
              statusText: xhr.statusText,
              source: 'http'
            });
          }

          break;

        case 'error':
          this.emit('uploaderror', {
            originEvent: event,
            status: xhr.status,
            statusText: xhr.statusText,
            source: 'FileHTML5'
          });

          break;

        case 'abort':
          this.emit('uploadcancel', {originEvent: event});
          break;

        case 'readystatechange':
          this.emit('readystatechange', {
            originEvent: event,
            readyState: event.target.readyState
          });
          break;
      }
    },

    startUpload: function (url, parameters, fileFieldName) {

      this._bytesUploaded = 0;

      this._xhr = new XMLHttpRequest();
      this._boundEventHandler = proxy(this._uploadEventHandler, this);

      var uploadData = new FormData(),
          //fileField = fileFieldName || 'Filedata',
          fileField = fileFieldName,
          xhr = this._xhr,
          xhrupload = xhr.upload,
          boundEventHandler = this._boundEventHandler,
          key;

      for (key in parameters) {
        uploadData.append(key, parameters[key]);
      }
      fileField && uploadData.append(fileField, this._file);

      xhr.addEventListener('loadstart', boundEventHandler,false);
      xhr.addEventListener('load', boundEventHandler, false);
      xhr.addEventListener('error', boundEventHandler, false);
      xhr.addEventListener('abort', boundEventHandler, false);
      xhr.addEventListener('loadend', boundEventHandler, false);
      xhr.addEventListener('readystatechange', boundEventHandler, false);
      xhrupload.addEventListener('progress', boundEventHandler,false);
      xhrupload.addEventListener('error', boundEventHandler, false);
      xhrupload.addEventListener('abort', boundEventHandler, false);

      xhr.open('POST', url, true);
      xhr.withCredentials = true;

      if (this._xhrHeaders) {
        for (key in this._xhrHeaders) {
          xhr.setRequestHeader(key, this._xhrHeaders[key]);
        }
      }

      xhr.send(uploadData);

      this.emit('uploadstart', {xhr: xhr});
    },

    cancelUpload: function () {
      this._xhr.abort();
    }

  });

  // 检查是否是原生的 File() 实例
  FileHTML5.isValidFile = function (file) {
    return (Win && Win.File && file instanceof Win.File);
  };

  // 检测浏览器原生上传的兼容性，XMLHttpRequest Leve 2
  FileHTML5.canUpload = function () {
    return (Win && Win.FormData && Win.XMLHttpRequest);
  };

  // Helper
  var uuid = 0;
  function guid() {
    return 'file-' + uuid++;
  }

  function proxy(f, c) {
    return function cb(e) {
      return f.call(c, e);
    };
  }

  return FileHTML5;

});

define('countrycodes', function () { return [
    {
        "country_code": "86",
        "country_name": "China",
        "short_name": "CN",
        "search_index": "86 china cn 中国",
        "support": [
            "iMessage",
            "SMS"
        ],
        "regular": "^\\+86",
        "format_long": 11,
        "format_reg": "^(.{3})(.{4})(.{4})$",
        "format_str": "$1 $2 $3"
    },
    {
        "country_code": "1",
        "country_name": "United States of America",
        "short_name": "US",
        "search_index": "1 united states of america us 美利坚合众国",
        "support": [
            "iMessage",
            "SMS"
        ],
        "regular": "^\\+1",
        "format_long": 10,
        "format_reg": "^(.{3})(.{3})(.{4})$",
        "format_str": "($1) $2-$3"
    },
    {
        "country_code": "1",
        "country_name": "Canada",
        "short_name": "CA",
        "search_index": "1 canada ca 加拿大",
        "support": [
            "iMessage",
            "SMS"
        ],
        "regular": "^\\+1",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1242",
        "country_name": "Bahamas",
        "short_name": "BS",
        "search_index": "1242 bahamas bs 巴哈马",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1242",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1246",
        "country_name": "Barbados",
        "short_name": "BB",
        "search_index": "1246 barbados bb 巴巴多斯",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1246",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1264",
        "country_name": "Anguilla",
        "short_name": "AI",
        "search_index": "1264 anguilla ai 安圭拉岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1264",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1268",
        "country_name": "Antigua and Barbuda",
        "short_name": "AG",
        "search_index": "1268 antigua and barbuda ag 安提瓜和巴布达",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1268",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1284",
        "country_name": "British Virgin Islands",
        "short_name": "VG",
        "search_index": "1284 british virgin islands vg 英属维京群岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1284",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1340",
        "country_name": "United States Virgin Islands",
        "short_name": "VI",
        "search_index": "1340 united states virgin islands vi 美属维京群岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1340",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1345",
        "country_name": "Cayman Islands",
        "short_name": "KY",
        "search_index": "1345 cayman islands ky 开曼群岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1345",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1441",
        "country_name": "Bermuda",
        "short_name": "BM",
        "search_index": "1441 bermuda bm 百慕大",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1441",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1473",
        "country_name": "Grenada",
        "short_name": "GD",
        "search_index": "1473 grenada gd 格林纳达岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1473",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1649",
        "country_name": "Turks and Caicos Islands",
        "short_name": "TC",
        "search_index": "1649 turks and caicos islands tc 特克斯和凯科斯群岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1649",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1664",
        "country_name": "Montserrat",
        "short_name": "MS",
        "search_index": "1664 montserrat ms 蒙特萨拉特岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1664",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1670",
        "country_name": "Northern Mariana Islands",
        "short_name": "MP",
        "search_index": "1670 northern mariana islands mp 美国北马里亚纳群岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1670",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1671",
        "country_name": "Guam",
        "short_name": "GU",
        "search_index": "1671 guam gu 关岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1671",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1684",
        "country_name": "American Samoa",
        "short_name": "AS",
        "search_index": "1684 american samoa as 美属萨摩亚群岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1684",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1721",
        "country_name": "Sint Maarten",
        "short_name": "SX",
        "search_index": "1721 sint maarten sx 圣马丁岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1721",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1758",
        "country_name": "Saint Lucia",
        "short_name": "LC",
        "search_index": "1758 saint lucia lc 圣卢西亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1758",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1767",
        "country_name": "Dominica",
        "short_name": "DM",
        "search_index": "1767 dominica dm 多米尼加",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1767",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1784",
        "country_name": "Saint Vincent and the Grenadines",
        "short_name": "VC",
        "search_index": "1784 saint vincent and the grenadines vc 圣文森特和格林纳丁斯",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1784",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1787",
        "country_name": "Puerto Rico",
        "short_name": "PR",
        "search_index": "1787 puerto rico pr 波多黎各",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1787",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1939",
        "country_name": "Puerto Rico",
        "short_name": "PR",
        "search_index": "1939 puerto rico pr 波多黎各",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1939",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1809",
        "country_name": "Dominican Republic",
        "short_name": "DO",
        "search_index": "1809 dominican republic do 多米尼加共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1809",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1829",
        "country_name": "Dominican Republic",
        "short_name": "DO",
        "search_index": "1829 dominican republic do 多米尼加共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1829",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1849",
        "country_name": "Dominican Republic",
        "short_name": "DO",
        "search_index": "1849 dominican republic do 多米尼加共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1849",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1868",
        "country_name": "Trinidad and Tobago",
        "short_name": "TT",
        "search_index": "1868 trinidad and tobago tt 特立尼达和多巴哥",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1868",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1869",
        "country_name": "Saint Kitts and Nevis",
        "short_name": "KN",
        "search_index": "1869 saint kitts and nevis kn 圣基茨和尼维斯联邦",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1869",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "1876",
        "country_name": "Jamaica",
        "short_name": "JM",
        "search_index": "1876 jamaica jm 牙买加",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+1876",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "20",
        "country_name": "Egypt",
        "short_name": "EG",
        "search_index": "20 egypt eg 埃及",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+20",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "212",
        "country_name": "Western Sahara",
        "short_name": "EH",
        "search_index": "212 western sahara eh 西撒哈拉",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+212",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "212",
        "country_name": "Morocco",
        "short_name": "MA",
        "search_index": "212 morocco ma 摩洛哥",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+212",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "213",
        "country_name": "Algeria",
        "short_name": "DZ",
        "search_index": "213 algeria dz 阿尔及利亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+213",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "216",
        "country_name": "Tunisia",
        "short_name": "TN",
        "search_index": "216 tunisia tn 突尼斯",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+216",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "218",
        "country_name": "Libya",
        "short_name": "LY",
        "search_index": "218 libya ly 大阿拉伯利比亚民众国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+218",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "220",
        "country_name": "Gambia",
        "short_name": "GM",
        "search_index": "220 gambia gm 甘比亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+220",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "221",
        "country_name": "Senegal",
        "short_name": "SN",
        "search_index": "221 senegal sn 塞内加尔共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+221",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "222",
        "country_name": "Mauritania",
        "short_name": "MR",
        "search_index": "222 mauritania mr 毛里塔尼亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+222",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "223",
        "country_name": "Mali",
        "short_name": "ML",
        "search_index": "223 mali ml 马里",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+223",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "224",
        "country_name": "Guinea",
        "short_name": "GN",
        "search_index": "224 guinea gn 几内亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+224",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "225",
        "country_name": "Côte d'Ivoire",
        "short_name": "CI",
        "search_index": "225 côte d'ivoire ci 科特迪瓦",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+225",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "226",
        "country_name": "Burkina Faso",
        "short_name": "BF",
        "search_index": "226 burkina faso bf 布基纳法索国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+226",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "227",
        "country_name": "Niger",
        "short_name": "NE",
        "search_index": "227 niger ne 尼日尔",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+227",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "228",
        "country_name": "Togo",
        "short_name": "TG",
        "search_index": "228 togo tg 多哥",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+228",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "229",
        "country_name": "Benin",
        "short_name": "BJ",
        "search_index": "229 benin bj 贝宁",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+229",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "230",
        "country_name": "Mauritius",
        "short_name": "MU",
        "search_index": "230 mauritius mu 毛里求斯",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+230",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "231",
        "country_name": "Liberia",
        "short_name": "LR",
        "search_index": "231 liberia lr 利比里亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+231",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "232",
        "country_name": "Sierra Leone",
        "short_name": "SL",
        "search_index": "232 sierra leone sl 塞拉利昂",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+232",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "233",
        "country_name": "Ghana",
        "short_name": "GH",
        "search_index": "233 ghana gh 加纳",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+233",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "234",
        "country_name": "Nigeria",
        "short_name": "NG",
        "search_index": "234 nigeria ng 尼日利亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+234",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "235",
        "country_name": "Chad",
        "short_name": "TD",
        "search_index": "235 chad td 乍得",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+235",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "236",
        "country_name": "Central African Republic",
        "short_name": "CF",
        "search_index": "236 central african republic cf 中非共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+236",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "237",
        "country_name": "Cameroon",
        "short_name": "CM",
        "search_index": "237 cameroon cm 噶麦隆",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+237",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "238",
        "country_name": "Cape Verde",
        "short_name": "CV",
        "search_index": "238 cape verde cv 佛得角",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+238",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "239",
        "country_name": "São Tomé and Príncipe",
        "short_name": "ST",
        "search_index": "239 são tomé and príncipe st 圣多美与普林西比",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+239",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "240",
        "country_name": "Equatorial Guinea",
        "short_name": "GQ",
        "search_index": "240 equatorial guinea gq 赤道几内亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+240",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "241",
        "country_name": "Gabon",
        "short_name": "GA",
        "search_index": "241 gabon ga 加蓬",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+241",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "242",
        "country_name": "Congo",
        "short_name": "CG",
        "search_index": "242 congo cg 刚果",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+242",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "243",
        "country_name": "Democratic Republic of the Congo",
        "short_name": "CD",
        "search_index": "243 democratic republic of the congo cd 刚果民主共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+243",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "244",
        "country_name": "Angola",
        "short_name": "AO",
        "search_index": "244 angola ao 安哥拉",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+244",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "245",
        "country_name": "Guinea-Bissau",
        "short_name": "GW",
        "search_index": "245 guinea-bissau gw 几内亚比绍共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+245",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "248",
        "country_name": "Seychelles",
        "short_name": "SC",
        "search_index": "248 seychelles sc 塞舌尔共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+248",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "249",
        "country_name": "Sudan",
        "short_name": "SD",
        "search_index": "249 sudan sd 苏丹",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+249",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "250",
        "country_name": "Rwanda",
        "short_name": "RW",
        "search_index": "250 rwanda rw 卢旺达",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+250",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "251",
        "country_name": "Ethiopia",
        "short_name": "ET",
        "search_index": "251 ethiopia et 埃塞俄比亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+251",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "252",
        "country_name": "Somalia Democratic Republic",
        "short_name": "SO",
        "search_index": "252 somalia democratic republic so 索马里",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+252",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "253",
        "country_name": "Djibouti",
        "short_name": "DJ",
        "search_index": "253 djibouti dj 吉布提",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+253",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "254",
        "country_name": "Kenya",
        "short_name": "KE",
        "search_index": "254 kenya ke 肯尼亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+254",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "255",
        "country_name": "Tanzania",
        "short_name": "TZ",
        "search_index": "255 tanzania tz 坦桑尼亚联合共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+255",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "256",
        "country_name": "Uganda",
        "short_name": "UG",
        "search_index": "256 uganda ug 乌干达",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+256",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "257",
        "country_name": "Burundi",
        "short_name": "BI",
        "search_index": "257 burundi bi 布隆迪",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+257",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "258",
        "country_name": "Mozambique",
        "short_name": "MZ",
        "search_index": "258 mozambique mz 莫桑比克",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+258",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "260",
        "country_name": "Zambia",
        "short_name": "ZM",
        "search_index": "260 zambia zm 赞比亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+260",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "261",
        "country_name": "Madagascar",
        "short_name": "MG",
        "search_index": "261 madagascar mg 马达加斯加",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+261",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "262",
        "country_name": "Mayotte",
        "short_name": "YT",
        "search_index": "262 mayotte yt 马约特岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+262",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "263",
        "country_name": "Zimbabwe",
        "short_name": "ZW",
        "search_index": "263 zimbabwe zw 津巴布韦共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+263",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "264",
        "country_name": "Namibia",
        "short_name": "NA",
        "search_index": "264 namibia na 纳米比亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+264",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "265",
        "country_name": "Malawi",
        "short_name": "MW",
        "search_index": "265 malawi mw 马拉威",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+265",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "266",
        "country_name": "Lesotho",
        "short_name": "LS",
        "search_index": "266 lesotho ls 莱索托",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+266",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "267",
        "country_name": "Botswana",
        "short_name": "BW",
        "search_index": "267 botswana bw 博茨瓦纳",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+267",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "268",
        "country_name": "Swaziland",
        "short_name": "SZ",
        "search_index": "268 swaziland sz 斯威士兰",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+268",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "269",
        "country_name": "Comoros",
        "short_name": "KM",
        "search_index": "269 comoros km 科摩罗",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+269",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "27",
        "country_name": "South Africa",
        "short_name": "ZA",
        "search_index": "27 south africa za 南非共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+27",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "291",
        "country_name": "Eritrea",
        "short_name": "ER",
        "search_index": "291 eritrea er 厄立特里亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+291",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "297",
        "country_name": "Aruba",
        "short_name": "AW",
        "search_index": "297 aruba aw 阿鲁巴岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+297",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "298",
        "country_name": "Faroe Islands",
        "short_name": "FO",
        "search_index": "298 faroe islands fo 法罗群岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+298",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "299",
        "country_name": "Greenland",
        "short_name": "GL",
        "search_index": "299 greenland gl 格陵兰岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+299",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "30",
        "country_name": "Greece",
        "short_name": "GR",
        "search_index": "30 greece gr 希腊",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+30",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "31",
        "country_name": "Netherlands",
        "short_name": "NL",
        "search_index": "31 netherlands nl 荷兰",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+31",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "32",
        "country_name": "Belgium",
        "short_name": "BE",
        "search_index": "32 belgium be 比利时",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+32",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "33",
        "country_name": "France",
        "short_name": "FR",
        "search_index": "33 france fr 法国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+33",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "34",
        "country_name": "Spain",
        "short_name": "ES",
        "search_index": "34 spain es 西班牙",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+34",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "350",
        "country_name": "Gibraltar",
        "short_name": "GI",
        "search_index": "350 gibraltar gi 直布罗陀",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+350",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "351",
        "country_name": "Portugal",
        "short_name": "PT",
        "search_index": "351 portugal pt 葡萄牙",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+351",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "352",
        "country_name": "Luxembourg",
        "short_name": "LU",
        "search_index": "352 luxembourg lu 卢森堡",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+352",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "353",
        "country_name": "Ireland",
        "short_name": "IE",
        "search_index": "353 ireland ie 爱尔兰",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+353",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "354",
        "country_name": "Iceland",
        "short_name": "IS",
        "search_index": "354 iceland is 冰岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+354",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "355",
        "country_name": "Albania",
        "short_name": "AL",
        "search_index": "355 albania al 阿尔巴尼亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+355",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "356",
        "country_name": "Malta",
        "short_name": "MT",
        "search_index": "356 malta mt 马耳他",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+356",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "357",
        "country_name": "Cyprus",
        "short_name": "CY",
        "search_index": "357 cyprus cy 塞浦路斯",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+357",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "358",
        "country_name": "Aland Islands",
        "short_name": "AX",
        "search_index": "358 aland islands ax 奥兰群岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+358",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "358",
        "country_name": "Finland",
        "short_name": "FI",
        "search_index": "358 finland fi 芬兰",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+358",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "359",
        "country_name": "Bulgaria",
        "short_name": "BG",
        "search_index": "359 bulgaria bg 保加利亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+359",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "36",
        "country_name": "Hungary",
        "short_name": "HU",
        "search_index": "36 hungary hu 匈牙利",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+36",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "370",
        "country_name": "Lithuania",
        "short_name": "LT",
        "search_index": "370 lithuania lt 立陶宛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+370",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "371",
        "country_name": "Latvia",
        "short_name": "LV",
        "search_index": "371 latvia lv 拉脱维亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+371",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "372",
        "country_name": "Estonia",
        "short_name": "EE",
        "search_index": "372 estonia ee 爱沙尼亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+372",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "373",
        "country_name": "Moldova",
        "short_name": "MD",
        "search_index": "373 moldova md 摩尔多瓦共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+373",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "374",
        "country_name": "Armenia",
        "short_name": "AM",
        "search_index": "374 armenia am 亚美尼亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+374",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "375",
        "country_name": "Belarus",
        "short_name": "BY",
        "search_index": "375 belarus by 白俄罗斯",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+375",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "376",
        "country_name": "Andorra",
        "short_name": "AD",
        "search_index": "376 andorra ad 安道尔",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+376",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "377",
        "country_name": "Monaco",
        "short_name": "MC",
        "search_index": "377 monaco mc 摩纳哥",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+377",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "378",
        "country_name": "San Marino",
        "short_name": "SM",
        "search_index": "378 san marino sm 圣马力诺",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+378",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "379",
        "country_name": "Vatican City",
        "short_name": "VA",
        "search_index": "379 vatican city va 梵蒂冈",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+379",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "380",
        "country_name": "Ukraine",
        "short_name": "UA",
        "search_index": "380 ukraine ua 乌克兰",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+380",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "381",
        "country_name": "Serbia",
        "short_name": "RS",
        "search_index": "381 serbia rs 塞尔维亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+381",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "382",
        "country_name": "Montenegro",
        "short_name": "ME",
        "search_index": "382 montenegro me 黑山共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+382",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "385",
        "country_name": "Croatia",
        "short_name": "HR",
        "search_index": "385 croatia hr 克罗地亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+385",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "386",
        "country_name": "Slovenia",
        "short_name": "SI",
        "search_index": "386 slovenia si 斯洛文尼亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+386",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "387",
        "country_name": "Bosnia And Herzegovina",
        "short_name": "BA",
        "search_index": "387 bosnia and herzegovina ba 波斯尼亚和黑塞哥维那",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+387",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "389",
        "country_name": "The Former Yugoslav Republic of Macedonia",
        "short_name": "MK",
        "search_index": "389 the former yugoslav republic of macedonia mk 马其顿",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+389",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "39",
        "country_name": "Vatican City",
        "short_name": "VA",
        "search_index": "39 vatican city va 梵蒂冈",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+39",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "39",
        "country_name": "Italy",
        "short_name": "IT",
        "search_index": "39 italy it 意大利",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+39",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "40",
        "country_name": "Romania",
        "short_name": "RO",
        "search_index": "40 romania ro 罗马尼亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+40",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "41",
        "country_name": "Switzerland",
        "short_name": "CH",
        "search_index": "41 switzerland ch 瑞士",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+41",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "420",
        "country_name": "Czech Republic",
        "short_name": "CZ",
        "search_index": "420 czech republic cz 捷克共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+420",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "421",
        "country_name": "Slovakia",
        "short_name": "SK",
        "search_index": "421 slovakia sk 斯洛伐克",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+421",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "423",
        "country_name": "Liechtenstein",
        "short_name": "LI",
        "search_index": "423 liechtenstein li 列支敦士登",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+423",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "43",
        "country_name": "Austria",
        "short_name": "AT",
        "search_index": "43 austria at 奥地利",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+43",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "44",
        "country_name": "Isle Of Man",
        "short_name": "IM",
        "search_index": "44 isle of man im 马恩岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+44",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "44",
        "country_name": "United Kingdom of Great Britain and Northern Ireland",
        "short_name": "GB",
        "search_index": "44 united kingdom of great britain and northern ireland gb 大不列颠及北爱尔兰联合王国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+44",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "45",
        "country_name": "Denmark",
        "short_name": "DK",
        "search_index": "45 denmark dk 丹麦",
        "support": [
            "iMessage",
            "SMS"
        ],
        "regular": "^\\+45",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "46",
        "country_name": "Sweden",
        "short_name": "SE",
        "search_index": "46 sweden se 瑞典",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+46",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "47",
        "country_name": "Norway",
        "short_name": "NO",
        "search_index": "47 norway no 挪威",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+47",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "48",
        "country_name": "Poland",
        "short_name": "PL",
        "search_index": "48 poland pl 波兰",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+48",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "49",
        "country_name": "Germany",
        "short_name": "DE",
        "search_index": "49 germany de 德国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+49",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "500",
        "country_name": "Falkland Islands",
        "short_name": "FK",
        "search_index": "500 falkland islands fk 福克兰群岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+500",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "501",
        "country_name": "Belize",
        "short_name": "BZ",
        "search_index": "501 belize bz 伯利兹",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+501",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "502",
        "country_name": "Guatemala",
        "short_name": "GT",
        "search_index": "502 guatemala gt 危地马拉",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+502",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "503",
        "country_name": "El Salvador",
        "short_name": "SV",
        "search_index": "503 el salvador sv 萨尔瓦多",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+503",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "504",
        "country_name": "Honduras",
        "short_name": "HN",
        "search_index": "504 honduras hn 洪都拉斯",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+504",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "505",
        "country_name": "Nicaragua",
        "short_name": "NI",
        "search_index": "505 nicaragua ni 尼加拉瓜",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+505",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "506",
        "country_name": "Costa Rica",
        "short_name": "CR",
        "search_index": "506 costa rica cr 哥斯达黎加共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+506",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "507",
        "country_name": "Panama",
        "short_name": "PA",
        "search_index": "507 panama pa 巴拿马共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+507",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "508",
        "country_name": "Saint Pierre and Miquelon",
        "short_name": "PM",
        "search_index": "508 saint pierre and miquelon pm 圣皮埃尔岛和密克隆岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+508",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "509",
        "country_name": "Haiti",
        "short_name": "HT",
        "search_index": "509 haiti ht 海地",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+509",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "51",
        "country_name": "Peru",
        "short_name": "PE",
        "search_index": "51 peru pe 秘鲁",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+51",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "52",
        "country_name": "Mexico",
        "short_name": "MX",
        "search_index": "52 mexico mx 墨西哥",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+52",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "53",
        "country_name": "Cuba",
        "short_name": "CU",
        "search_index": "53 cuba cu 古巴",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+53",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "54",
        "country_name": "Argentine Republic",
        "short_name": "AR",
        "search_index": "54 argentine republic ar 阿根廷",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+54",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "55",
        "country_name": "Brazil",
        "short_name": "BR",
        "search_index": "55 brazil br 巴西",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+55",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "56",
        "country_name": "Chile",
        "short_name": "CL",
        "search_index": "56 chile cl 智利",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+56",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "57",
        "country_name": "Colombia",
        "short_name": "CO",
        "search_index": "57 colombia co 哥伦比亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+57",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "58",
        "country_name": "Venezuela",
        "short_name": "VE",
        "search_index": "58 venezuela ve 委内瑞拉玻利瓦尔共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+58",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "590",
        "country_name": "Guadeloupe",
        "short_name": "GP",
        "search_index": "590 guadeloupe gp 法属瓜德罗普省",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+590",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "590",
        "country_name": "Saint Barthélemy",
        "short_name": "BL",
        "search_index": "590 saint barthélemy bl 圣巴泰勒米",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+590",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "591",
        "country_name": "Bolivia",
        "short_name": "BO",
        "search_index": "591 bolivia bo 玻利维亚共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+591",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "592",
        "country_name": "Guyana",
        "short_name": "GY",
        "search_index": "592 guyana gy 英属圭亚那",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+592",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "593",
        "country_name": "Ecuador",
        "short_name": "EC",
        "search_index": "593 ecuador ec 厄瓜多尔",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+593",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "594",
        "country_name": "French Guiana",
        "short_name": "GF",
        "search_index": "594 french guiana gf 法属圭亚那",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+594",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "595",
        "country_name": "Paraguay",
        "short_name": "PY",
        "search_index": "595 paraguay py 巴拉圭共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+595",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "597",
        "country_name": "Suriname",
        "short_name": "SR",
        "search_index": "597 suriname sr 苏里南",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+597",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "598",
        "country_name": "Uruguay",
        "short_name": "UY",
        "search_index": "598 uruguay uy 乌拉圭",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+598",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "599",
        "country_name": "Curaçao",
        "short_name": "CW",
        "search_index": "599 curaçao cw 库拉索",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+599",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "599",
        "country_name": "Netherlands Antilles",
        "short_name": "AN",
        "search_index": "599 netherlands antilles an 安的列斯岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+599",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "60",
        "country_name": "Malaysia",
        "short_name": "MY",
        "search_index": "60 malaysia my 马来西亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+60",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "61",
        "country_name": "Australia",
        "short_name": "AU",
        "search_index": "61 australia au 澳大利亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+61",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "61",
        "country_name": "Christmas Island",
        "short_name": "CX",
        "search_index": "61 christmas island cx 圣诞岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+61",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "61",
        "country_name": "Cocos Islands",
        "short_name": "CC",
        "search_index": "61 cocos islands cc 科科斯（基林）群岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+61",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "62",
        "country_name": "Indonesia",
        "short_name": "ID",
        "search_index": "62 indonesia id 印度尼西亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+62",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "63",
        "country_name": "Philippines",
        "short_name": "PH",
        "search_index": "63 philippines ph 菲律宾",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+63",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "64",
        "country_name": "Pitcairn Islands",
        "short_name": "PN",
        "search_index": "64 pitcairn islands pn 皮特凯恩岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+64",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "64",
        "country_name": "New Zealand",
        "short_name": "NZ",
        "search_index": "64 new zealand nz 新西兰",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+64",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "65",
        "country_name": "Singapore",
        "short_name": "SG",
        "search_index": "65 singapore sg 新加坡",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+65",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "66",
        "country_name": "Thailand",
        "short_name": "TH",
        "search_index": "66 thailand th 泰国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+66",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "670",
        "country_name": "East Timor",
        "short_name": "TL",
        "search_index": "670 east timor tl 帝汶岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+670",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "672",
        "country_name": "Antarctica",
        "short_name": "AQ",
        "search_index": "672 antarctica aq 南极洲",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+672",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "672",
        "country_name": "Norfolk Island",
        "short_name": "NF",
        "search_index": "672 norfolk island nf 诺福克岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+672",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "673",
        "country_name": "Brunei Darussalam",
        "short_name": "BN",
        "search_index": "673 brunei darussalam bn 文莱达鲁萨兰国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+673",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "674",
        "country_name": "Nauru",
        "short_name": "NR",
        "search_index": "674 nauru nr 瑙鲁",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+674",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "675",
        "country_name": "Papua New Guinea",
        "short_name": "PG",
        "search_index": "675 papua new guinea pg 巴布亚新几内亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+675",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "676",
        "country_name": "Tonga",
        "short_name": "TO",
        "search_index": "676 tonga to 汤加",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+676",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "677",
        "country_name": "Solomon Islands",
        "short_name": "SB",
        "search_index": "677 solomon islands sb 所罗门群岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+677",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "678",
        "country_name": "Vanuatu",
        "short_name": "VU",
        "search_index": "678 vanuatu vu 瓦努阿图",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+678",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "679",
        "country_name": "Fiji",
        "short_name": "FJ",
        "search_index": "679 fiji fj 斐济",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+679",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "680",
        "country_name": "Palau",
        "short_name": "PW",
        "search_index": "680 palau pw 帕劳",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+680",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "681",
        "country_name": "Wallis and Futuna",
        "short_name": "WF",
        "search_index": "681 wallis and futuna wf 瓦利斯群岛和富图纳群岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+681",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "682",
        "country_name": "Cook Islands",
        "short_name": "CK",
        "search_index": "682 cook islands ck 库克群岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+682",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "683",
        "country_name": "Niue",
        "short_name": "NU",
        "search_index": "683 niue nu 纽埃岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+683",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "685",
        "country_name": "Samoa",
        "short_name": "AS",
        "search_index": "685 samoa as 美属萨摩亚领地",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+685",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "686",
        "country_name": "Kiribati",
        "short_name": "KI",
        "search_index": "686 kiribati ki 基里巴斯",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+686",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "687",
        "country_name": "New Caledonia",
        "short_name": "NC",
        "search_index": "687 new caledonia nc 新喀里多尼亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+687",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "688",
        "country_name": "Tuvalu",
        "short_name": "TV",
        "search_index": "688 tuvalu tv 图瓦卢",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+688",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "689",
        "country_name": "French Polynesia",
        "short_name": "PF",
        "search_index": "689 french polynesia pf 法属玻利尼西亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+689",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "690",
        "country_name": "Tokelau",
        "short_name": "TK",
        "search_index": "690 tokelau tk 托克劳",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+690",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "691",
        "country_name": "Micronesia",
        "short_name": "FM",
        "search_index": "691 micronesia fm 密克罗尼西亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+691",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "692",
        "country_name": "Marshall Islands",
        "short_name": "MH",
        "search_index": "692 marshall islands mh 马绍尔群岛",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+692",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "7",
        "country_name": "Russian Federation",
        "short_name": "RU",
        "search_index": "7 russian federation ru 俄罗斯联邦",
        "support": [
            "iMessage",
            "SMS"
        ],
        "regular": "^\\+7",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "7",
        "country_name": "Kazakhstan",
        "short_name": "KZ",
        "search_index": "7 kazakhstan kz 哈萨克斯坦",
        "support": [
            "iMessage",
            "SMS"
        ],
        "regular": "^\\+7",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "81",
        "country_name": "Japan",
        "short_name": "JP",
        "search_index": "81 japan jp 日本",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+81",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "82",
        "country_name": "Korea",
        "short_name": "KR",
        "search_index": "82 korea kr 韩国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+82",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "84",
        "country_name": "Vietnam",
        "short_name": "VN",
        "search_index": "84 vietnam vn 越南",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+84",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "850",
        "country_name": "Democratic People's Republic of Korea",
        "short_name": "KP",
        "search_index": "850 democratic people's republic of korea kp 朝鲜",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+850",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "852",
        "country_name": "Hong Kong, China",
        "short_name": "HK",
        "search_index": "852 hong kong, china hk 香港（中国）",
        "support": [
            "iMessage",
            "SMS"
        ],
        "regular": "^\\+852",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "853",
        "country_name": "Macao, China",
        "short_name": "MO",
        "search_index": "853 macao, china mo 澳门（中国）",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+853",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "855",
        "country_name": "Cambodia",
        "short_name": "KH",
        "search_index": "855 cambodia kh 柬埔寨",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+855",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "856",
        "country_name": "Lao People's Democratic Republic",
        "short_name": "LA",
        "search_index": "856 lao people's democratic republic la 老挝人民民主共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+856",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "880",
        "country_name": "Bangladesh",
        "short_name": "BD",
        "search_index": "880 bangladesh bd 孟加拉共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+880",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "886",
        "country_name": "Taiwan, China",
        "short_name": "TW",
        "search_index": "886 taiwan, china tw 台湾（中国）",
        "support": [
            "iMessage",
            "SMS"
        ],
        "regular": "^\\+886",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "90",
        "country_name": "Turkey",
        "short_name": "TR",
        "search_index": "90 turkey tr 土耳其",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+90",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "91",
        "country_name": "India",
        "short_name": "IN",
        "search_index": "91 india in 印度",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+91",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "92",
        "country_name": "Pakistan",
        "short_name": "PK",
        "search_index": "92 pakistan pk 巴基斯坦",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+92",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "93",
        "country_name": "Afghanistan",
        "short_name": "AF",
        "search_index": "93 afghanistan af 阿富汗",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+93",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "94",
        "country_name": "Sri Lanka",
        "short_name": "LK",
        "search_index": "94 sri lanka lk 斯里兰卡",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+94",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "95",
        "country_name": "Myanmar",
        "short_name": "MM",
        "search_index": "95 myanmar mm 缅甸",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+95",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "960",
        "country_name": "Maldives",
        "short_name": "MV",
        "search_index": "960 maldives mv 马尔代夫",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+960",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "961",
        "country_name": "Lebanon",
        "short_name": "LB",
        "search_index": "961 lebanon lb 黎巴嫩",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+961",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "962",
        "country_name": "Jordan",
        "short_name": "JO",
        "search_index": "962 jordan jo 约旦",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+962",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "963",
        "country_name": "Syria",
        "short_name": "SY",
        "search_index": "963 syria sy 阿拉伯叙利亚共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+963",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "964",
        "country_name": "Iraq",
        "short_name": "IQ",
        "search_index": "964 iraq iq 伊拉克",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+964",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "965",
        "country_name": "Kuwait",
        "short_name": "KW",
        "search_index": "965 kuwait kw 科威特",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+965",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "966",
        "country_name": "Saudi Arabia",
        "short_name": "SA",
        "search_index": "966 saudi arabia sa 沙特阿拉伯王国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+966",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "967",
        "country_name": "Yemen",
        "short_name": "YE",
        "search_index": "967 yemen ye 也门",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+967",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "968",
        "country_name": "Oman",
        "short_name": "OM",
        "search_index": "968 oman om 阿曼",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+968",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "971",
        "country_name": "United Arab Emirates",
        "short_name": "AE",
        "search_index": "971 united arab emirates ae 阿拉伯联合酋长国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+971",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "972",
        "country_name": "Israel",
        "short_name": "IL",
        "search_index": "972 israel il 以色列",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+972",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "973",
        "country_name": "Bahrain",
        "short_name": "BH",
        "search_index": "973 bahrain bh 巴林",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+973",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "974",
        "country_name": "Qatar",
        "short_name": "QA",
        "search_index": "974 qatar qa 卡塔尔",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+974",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "975",
        "country_name": "Bhutan",
        "short_name": "BT",
        "search_index": "975 bhutan bt 不丹",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+975",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "976",
        "country_name": "Mongolia",
        "short_name": "MN",
        "search_index": "976 mongolia mn 蒙古",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+976",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "977",
        "country_name": "Nepal",
        "short_name": "NP",
        "search_index": "977 nepal np 尼泊尔",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+977",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "98",
        "country_name": "Iran",
        "short_name": "IR",
        "search_index": "98 iran ir 伊朗伊斯兰共和国",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+98",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "992",
        "country_name": "Tajikistan",
        "short_name": "TJ",
        "search_index": "992 tajikistan tj 塔吉克斯坦",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+992",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "993",
        "country_name": "Turkmenistan",
        "short_name": "TM",
        "search_index": "993 turkmenistan tm 土库曼斯坦",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+993",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "994",
        "country_name": "Azerbaijani Republic",
        "short_name": "AZ",
        "search_index": "994 azerbaijani republic az 阿塞拜疆",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+994",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "995",
        "country_name": "Georgia",
        "short_name": "GE",
        "search_index": "995 georgia ge 格鲁吉亚",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+995",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "996",
        "country_name": "Kyrgyzstan",
        "short_name": "KG",
        "search_index": "996 kyrgyzstan kg 吉尔吉斯斯坦",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+996",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    },
    {
        "country_code": "998",
        "country_name": "Uzbekistan",
        "short_name": "UZ",
        "search_index": "998 uzbekistan uz 乌兹别克斯坦",
        "support": [
            "iMessage"
        ],
        "regular": "^\\+998",
        "format_long": 0,
        "format_reg": null,
        "format_str": ""
    }
];});
define('phonepanel', function (require) {
  "use strict";

  var $ = require('jquery'),
      Api    = require('api'),
      rawPhone  = '',
      curCntry  = 0,
      /*
      objPhone  = {
        'country_code' : '',
        'phone_number' : ''
      },
      */
      last_get  = '',
      avatar    = '',
      areaInfos = require('countrycodes');

  var Panel = require('panel');

  var chooseCountry = function(index, soft) {
    if (typeof areaInfos[index] !== 'undefined') {
      curCntry = index;
      if (!soft) {
          $('#phone-panel .countrycode').val('+' + areaInfos[curCntry].country_code);
      }
      $('.tips-area .ta-countrycode').html(areaInfos[curCntry].short_name);
      formatPhone();
      checkPhone();
    }
  };

  var formatPhone = function() {
    if (areaInfos[curCntry].format_long
     && areaInfos[curCntry].format_reg
     && areaInfos[curCntry].format_str
     && rawPhone.length === areaInfos[curCntry].format_long) {
      $('#phone-panel .phonenumber').val(rawPhone.replace(
        areaInfos[curCntry].format_reg,
        areaInfos[curCntry].format_str
      ));
    } else {
      $('#phone-panel .phonenumber').val(rawPhone);
    }
  }

  var checkPhone = function() {
    getIdentity();
    if ($('#phone-panel .countrycode').val() 
     && $('#phone-panel .name').val()
     && rawPhone) {
        $('#phone-panel .add').prop('disabled', false);
    } else {
        $('#phone-panel .add').prop('disabled', true);
    }
  }

  var escape = function(html, encode) {
    return html
          .replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;')
          .replace(/'/g, '&#39;');
  }

  var getIdentity = function() {
    var cur_get = '+' + areaInfos[curCntry].country_code + rawPhone;
    if (cur_get !== last_get) {
        Api.request(
            'getIdentity',
            {
                type : 'POST',
                data : {
                    identities : JSON.stringify([{
                        'provider'          : 'phone',
                        'external_username' : cur_get
                    }])
                }
            },
            function(data) {
                if (data && data.identities && data.identities.length && data.identities[0].connected_user_id > 0) {
                    avatar = data.identities[0].avatar_filename;
                    $('#phone-panel .identity-avatar').attr('src', avatar).show();
                    $('#phone-panel .identity-name').html(escape(data.identities[0].name)).show();
                    $('#phone-panel .name').val(data.identities[0].name).hide();
                    $('#phone-panel .add').toggleClass('match', true);
                } else {
                    avatar = '';
                    $('#phone-panel .identity-avatar').hide();
                    $('#phone-panel .identity-name').hide();
                    $('#phone-panel .name').val('').show();
                    $('#phone-panel .add').toggleClass('match', false); 
                }
            }
        );
        last_get = cur_get;
    }
  }

  var PhonePanel = Panel.extend({

      options: {

          template: ''
          + '<div class="panel phone-panel" tabindex="-1" data-widget="panel" id="phone-panel">'
            //<div class="panel-header"></div>
            + '<div class="panel-body">'
              + '<div class="main-info">Please complete contact info:</div>'
              + '<div class="clearfix input-area">'
                + '<input class="countrycode" tabindex="4" type="text" />'
                + '<input class="phonenumber" tabindex="5" type="text" />'
              + '</div>'
              + '<div class="tips-area">'
                + '<div class="ta-countrycode"></div>'
                + '<div class="ta-phonenumber">Area code and local number</div>'
              + '</div>'
              + '<ol class="clearfix complete-list"></ol>'
              + '<div class="name-area">'
                + '<input class="name" type="text" tabindex="2" placeholder="Enter contact name" />'
                + '<img class="identity-avatar"/>'
                + '<div class="identity-name"></div>'
                + '<button class="xbtn-blue add" tabindex="3" disabled="disabled">Add</button>'
              + '</div>'
            + '</div>'
            //<div class="panel-footer"></div>
          + '</div>'

        , parentNode: null

        , srcNode: null

      }

    , init: function () {
        var self    = this,
            element;
        this.render();
        element = this.element;
        for (var i = 0; i < areaInfos.length; i++) {
            areaInfos[i].regular    = new RegExp(areaInfos[i].regular);
            areaInfos[i].format_reg = areaInfos[i].format_reg
                                    ? new RegExp(areaInfos[i].format_reg)
                                    : '';
            if (areaInfos[i].short_name === 'US') {
                curCntry = i;
            }
        }
        this.listen();
        $(document.body).on('click.phonepanel', function (e) {
          var $p = $('#phone-panel');
          if ($p.length
            && $p[0] !== e.target
            && !$.contains($p[0], e.target)) {
            self.hide();
            $(document.body).off('click.phonepanel');
            return;
          }
        });
      }

    , listen: function () {
        var self    = this, 
            element = this.element;
        element.on('keyup.phonepanel', '.countrycode', function(e) {
            var makeItem = function(idx) {
                return '<li country-code="' + idx + '">'
                     +   '<div class="li-countrycode">+'
                     +     areaInfos[idx].country_code
                     +   '</div>'
                     +   '<div class="li-countryname">'
                     +     areaInfos[idx].country_name
                     +   '</div>'
                     +   '<div class="li-tips">'
                     +     areaInfos[idx].support.join(' and ')
                     +   ' supported</div>'
                     + '</li>';
            }
            switch (e.keyCode) {
                case 38: // up
                case 40: // down
                    return;
                case 13: // enter
                    var selected    = $('.complete-list li.selected');
                    var countryCode = ~~selected.attr('country-code');
                    if (typeof areaInfos[countryCode]) {
                        chooseCountry(countryCode);
                        element.find('.tips-area').show();
                        element.find('.complete-list').slideUp();
                    }
                    return;
            }
            var found = '';
            var match = -1;
            var key   = $(this).val().toLowerCase();
            if (key) {
                if (/^\+[0-9]*/.test(key)) {
                    for (var i = 0; i < areaInfos.length; i++) {
                        if (('+' + areaInfos[i].country_code) === key) {
                            found  = makeItem(i) + found;
                            match  = i;
                        } else if (('+' + areaInfos[i].search_index).indexOf(key) !== -1) {
                            found += makeItem(i);
                            match  = match === -1 ? i : match;
                        }
                    }
                } else {
                    for (i = 0; i < areaInfos.length; i++) {
                        if (areaInfos[i].country_code === key) {
                            found  = makeItem(i) + found;
                            match  = i;
                        } else if (areaInfos[i].search_index.indexOf(key) !== -1) {
                            found += makeItem(i);
                            match  = match === -1 ? i : match;
                        }
                    }
                }
            }
            element.find('.complete-list').html(found);
            if (found) {
                element.find('.tips-area').hide(); 
                element.find('.complete-list').slideDown();
                element.find('.complete-list li').eq(0).toggleClass('selected', true);
                chooseCountry(match, true);
            } else {
                element.find('.tips-area').show();
                element.find('.complete-list').slideUp();
            }
        });
        element.on('keydown.phonepanel', '.countrycode', function(e) {
            if (!element.find('.complete-list').html()) {
                return;
            }
            var selected  = element.find('.complete-list li.selected');
            var cmpltList = element.find('.complete-list');
            var curIndex  = ~~selected.index();
            var celHeight = 44;
            var maxHeight = celHeight * 3;
            var maxIndex  = element.find('.complete-list li').length - 1;
            var curScroll = cmpltList.scrollTop();
            switch (e.keyCode) {
                case 38: // up
                    event.preventDefault();
                    if (--curIndex < 0) {
                        curIndex = maxIndex;
                    }
                    break;
                case 40: // down
                    event.preventDefault();
                    if (++curIndex > maxIndex) {
                        curIndex = 0;
                    }
            }
            selected.toggleClass('selected', false);
            element.find('.complete-list li').eq(curIndex).toggleClass('selected', true);
            var curCellTop = curIndex * celHeight;
            var curScrlTop = curCellTop - curScroll;
            if (curScrlTop < 0) {
                cmpltList.scrollTop(curCellTop);
            } else if (curScrlTop + celHeight > maxHeight) {
                cmpltList.scrollTop(curCellTop + celHeight - maxHeight + 1);
            }
        });
        element.on('blur.phonepanel', '.countrycode', function() {
            chooseCountry(curCntry);
        });
        element.on('focus.phonepanel', '.countrycode', function() {
            $(this).css('z-index', '1');
            element.find('.phonenumber').css('z-index', '0');
        });
        element.on('focus.phonepanel', '.phonenumber', function () {
            element.find('.phonenumber').val(rawPhone);
            element.find('.complete-list').html('');
            element.find('.tips-area').show();
            element.find('.complete-list').slideUp();
            $(this).prop('tabindex', '1');
            $(this).css('z-index', '1');
            element.find('.countrycode').css('z-index', '0');
        });
        element.on('blur.phonepanel', '.phonenumber', function () {
            var strPhone = element.find('.phonenumber').val().replace(/\-|\(|\)|\ /g, '');
            if (/^[0-9]*$/.test(strPhone)) {
                rawPhone = strPhone;
            } else {
                rawPhone = '';
            }
            formatPhone();
            checkPhone();
            $(this).prop('tabindex', '5');
        });
        element.on('mouseover.phonepanel', '.complete-list li', function () {
            $(this).siblings().filter('.selected').toggleClass('selected', false);
            $(this).toggleClass('selected', true);
        });
        element.on('click.phonepanel', '.complete-list li', function () {
            var selected = $(this);
            var countryCode = ~~selected.attr('country-code');
            if (typeof areaInfos[countryCode]) {
                chooseCountry(countryCode);
                element.find('.tips-area').show();
                element.find('.complete-list').slideUp();
            }
        });
        element.on('keyup.phonepanel', '.name', function() {
            element.find('.complete-list').html('');
            element.find('.tips-area').show();
            element.find('.complete-list').slideUp();
        });
        element.on('keyup.phonepanel', '.name', function(e) {
            if ($(this).val()) {
                if (e.keyCode === 13) {
                    var phoneNumber = '+' + areaInfos[curCntry].country_code + rawPhone;
                    var name        = element.find('.name').val();
                    self.add({
                        provider          : 'phone',
                        external_id       : phoneNumber,
                        external_username : phoneNumber,
                        name              : name,
                        avatar_filename   : avatar ? avatar : (ExfeeWidget.api_url + '/avatar/default?name=' + name),
                    });
                    self.hide();
                }
            }
            checkPhone();
        });
        element.on('click.phonepanel', '.add', function() {
            var phoneNumber = '+' + areaInfos[curCntry].country_code + rawPhone;
            var name        = element.find('.name').val();
            self.add({
                provider          : 'phone',
                external_id       : phoneNumber,
                external_username : phoneNumber,
                name              : name,
                avatar_filename   : avatar ? avatar : (ExfeeWidget.api_url + '/avatar/default?name=' + name),
            });
            self.hide();
        });
      }

    , save: function () {
        this.$('.place-submit')
          .trigger('click.mappanel');
      }

    , showAfter: function () {
        var self    = this,
            srcNode = self.srcNode;
        if (srcNode) {
          var offset  = srcNode.offset(),
              element = self.element,
              height  = srcNode.outerHeight();
          element.css({
            left: this.oleft = offset.left,
            top:  this.otop  = offset.top + height
          });
          $('#phone-panel .identity-avatar').hide();
          $('#phone-panel .identity-name').hide();
          rawPhone = srcNode.val().replace(/\-|\(|\)|\ /g, '');
          var fixedCntry = curCntry;
          if (/^\+.*$/.test(rawPhone)) {
            for (var i = 0; i < areaInfos.length; i++) {
                if (areaInfos[i].regular.test(rawPhone)) {
                    rawPhone = rawPhone.replace(areaInfos[i].regular, '');
                    fixedCntry = i;
                    break;
                }
            }
          }
          chooseCountry(fixedCntry);
          element.find('.name').focus();
        }
      }

    , destory: function () {
        this.element.off();
        this.element.remove();
        this._destory();
      }
  });


  return PhonePanel;
});

define('photoxwidget', function (require) {
  'use strict';

  var request = require('api').request,
      R = require('rex'),
      Bus = require('bus'),
      Store = require('store'),
      PhotoXPanel = require('photox'),
      Mnemosyne = require('mnemosyne'),
      Widget = require('widget'),
      getPhotoX = function (photox_id, done) {
        return request(
          'photox_getPhotoX',
          {
            resources : { photox_id : photox_id },
            data: {
              sort: 'imported_time_desc',
              limit: 11
            }
          },
          // {"photox" : [object:photox]}
          done
        );
      };

  var PhotoXWidget = Widget.extend({

    options: {

      template: ''
        + '<div class="widget photox-widget">'
          + '<div class="tab tab-0 hide">'
            + '<div class="table-wrapper">'
              + '<table cellspacing="0" cellpadding="0" border-spacing="0" border="0">'
                + '<tbody><tr></tr></tbody>'
              + '</table>'
            + '</div>'
            + '<div class="btn-open"><i class="ix-wall ix-wall-blue"></i></div>'
          + '</div>'
          + '<div class="tab tab-1 hide">'
            + '<i class="ix-wall ix-wall-gay"></i>Share photos, save memory.'
          + '</div>'
        + '</div>',

      tdTmp: ''
        + '<td><figure><img class="pic" src="{{url}}" width="{{width}}" height="{{height}}" /></figure></td>',

      tdTmpMore: ''
        + '<td class="more">···</td>',

      parentNode: null,

      onShowBefore: function () {
        this.emit('load');
      },

      onLoad: function () {
        this.load();
      }
    },

    init: function () {
      this.render();
    },

    render: function () {
      var options = this.options;
      this.parentNode = options.parentNode;
      this.srcNode = options.srcNode;
      this.crossId = options.crossId;

      delete options.parentNode;
      delete options.srcNode;
      delete options.crossId;

      this.limited = 10;
      this.$tr = this.element.find('tr');

      this.listen();
    },

    listen: function () {
      var self = this;

      Bus.on('update-photoxwidget', function () {
        self.load();
      });

      this.element.on('click.photoxwidget', '.btn-open, .tab-1', function (e) {
        e.preventDefault();
        e.stopPropagation();
        // TODO: 优化判断方法
        if ($('#photox-panel').size()) {
          return;
        }
        var user = Store.get('user');
        var identities = user.identities,
            photo_providers = ['facebook', 'instagram', 'flickr', 'dropbox'],
            providers = photo_providers.slice(0),
            ips = [], i;
        R.each(identities, function (v) {
          i = R.indexOf(providers, v.provider);
          if (-1 !== i) {
            providers.splice(i, 1);
            ips.push(v.provider + ':' + v.id);
          }
        });
        ips.push('');
        providers.push('');
        // providers = 'flickr:1 facebook:0 dropbox:0'
        providers = ips.join(' ') + providers.join(':0 ');
        var photoxPanel = new PhotoXPanel({
          options: {
            parentNode: $('#app-tmp'),
            srcNode: $('.cross-photox'),
            crossId: Cross.id,
            providers: providers
          }
        });
        photoxPanel.show();
        self.photoxPanel = photoxPanel
      });

      this.element.on('click.photoxwidget', '.table-wrapper', function (e) {
        e.preventDefault();
        // TODO: 优化判断方法
        if ($('.mnemosyne-panel').size()) {
          return;
        }
        var user = Store.get('user');
        var mnemosyne = new Mnemosyne({
          options: {
            parentNode: $('#app-tmp'),
            srcNode: $('.table-wrapper'),
            crossId: Cross.id,
            userId: user.id
          }
        });
        mnemosyne.show();
      });

      $('body').on('click.photoxwidget', function (e) {
        var $p = $('#photox-panel');
        if ($p.length
          && $p[0] !== e.target
          && !$.contains($p[0], e.target)) {
          e.preventDefault();
          e.stopPropagation();
          $p.trigger('destory.widget');
          return;
        }
      });
    },

    generate: function (photos, b) {
      var tdTmp = this.options.tdTmp,
          i = 0, l = photos.length,
          html = '', image;
      for (; i < l; ++i) {
        image = photos[i].images.preview;
        html += tdTmp.replace('{{url}}', image.url)
              .replace('{{height}}', 64)
              .replace('{{width}}', 64 * image.width / image.height);
      }

      if (b) {
        html += this.options.tdTmpMore;
      }

      return html;
    },

    load: function () {
      var self = this,
          $tr = self.$tr,
          tabs = self.element.find('.tab'),
          tab0 = tabs.eq(0),
          tab1 = tabs.eq(1),
          limited = self.limited;
      if (this.defer) {
        this.defer.abort();
      }
      this.defer = getPhotoX(this.crossId, function (data) {
        var photos = data.photox.photos,
            l = photos.length,
            b = l > limited;
        if (l) {
          tab0.removeClass('hide');
          tab1.addClass('hide');
          if (b) { photos = photos.slice(0, limited); }
          $tr.html(self.generate(photos, b));
        } else {
          tab0.addClass('hide');
          tab1.removeClass('hide');
        }
      });
    },

    show: function () {

      this.emit('showBefore');

      this.element.appendTo(this.parentNode);

      this.emit('showAfter');

      return this;
    }

  });

  return PhotoXWidget;

});

define('mnemosyne', function (require) {
  'use strict';

  /* requestAnimationFrame */
  //(function() {
  var lastTime = 0, vendors = ['ms', 'moz', 'webkit', 'o'];
  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
    window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame']
                                  || window[vendors[x]+'CancelRequestAnimationFrame'];
  }
 
  if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = function(callback, element) {
      var currTime = new Date().getTime();
      var timeToCall = Math.max(0, 16 - (currTime - lastTime));
      var id = window.setTimeout(function() { callback(currTime + timeToCall); },
        timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };
  }

  if (!window.cancelAnimationFrame) {
    window.cancelAnimationFrame = function(id) {
      clearTimeout(id);
    };
  }
  //}());

  /**********************************************/
  var VOID = void 0;
  var VW, VH;
  // top, right, bottom, left, viewport-height, viewport-width
  var inViewport = function (t, r, b, l, h, w) {
    return ((t >= 0 && t <= h)
        ||
        (b >= 0 && b <= h))
      && ((l >= 0 && l <= w)
        ||
        (r >= 0 && r <= w));
  };

  var checkInViewport = function (e) {
    var r = e.getBoundingClientRect();
    return inViewport(r.top, r.right, r.bottom, r.left, VH, VW);
  };

  var slice = function (a, n) {
    var l = a.length, r = [];
    for (; n < l; ++n) {
      r.push(a[n]);
    }
    return n;
  };

  var cos = Math.cos,
      sin = Math.sin,
      tan = Math.tan,
      abs = Math.abs,
      asin = Math.asin,
      sqrt = Math.sqrt,
      atan = Math.atan,
      atan2 = Math.atan2,
      min = Math.min,
      PI = Math.PI,
      PRECISION = 1E-6;

  var Matrix = {
    precision: PRECISION,

    identity: function () {
      return [
        1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1
      ];
    },

    multiply: function multiply (b, d) {
      var h = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];
      h[0]  = b[0]  * d[0] + b[1]  * d[4] + b[2]  * d[8];
      h[1]  = b[0]  * d[1] + b[1]  * d[5] + b[2]  * d[9];
      h[2]  = b[0]  * d[2] + b[1]  * d[6] + b[2]  * d[10];
      h[4]  = b[4]  * d[0] + b[5]  * d[4] + b[6]  * d[8];
      h[5]  = b[4]  * d[1] + b[5]  * d[5] + b[6]  * d[9];
      h[6]  = b[4]  * d[2] + b[5]  * d[6] + b[6]  * d[10];
      h[8]  = b[8]  * d[0] + b[9]  * d[4] + b[10] * d[8];
      h[9]  = b[8]  * d[1] + b[9]  * d[5] + b[10] * d[9];
      h[10] = b[8]  * d[2] + b[9]  * d[6] + b[10] * d[10];
      h[12] = b[12] * d[0] + b[13] * d[4] + b[14] * d[8]  + d[12];
      h[13] = b[12] * d[1] + b[13] * d[5] + b[14] * d[9]  + d[13];
      h[14] = b[12] * d[2] + b[13] * d[6] + b[14] * d[10] + d[14];
      return 2 >= arguments.length ? h : multiply([h].concat(slice(arguments, 2)));
    },

    move: function (a, b) {
      b[2] || (b[2] = 0);
      return [
        a[0], a[1], a[2], 0,
        a[4], a[5], a[6], 0,
        a[8], a[9], a[10], 0,
        a[12] + b[0], a[13] + b[1], a[14] + b[2], 1
      ];
    },

    translate: function (a, b, d) {
      "number" != typeof d && (d = 0);
      return [
        1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        a, b, d, 1
      ];
    },

    scale: function (a, b, d) {
      "number" != typeof d && (d = 1);
      return [
        a, 0, 0, 0,
        0, b, 0, 0,
        0, 0, d, 0,
        0, 0, 0, 1
      ];
    },

    rotateX: function (a,/**/ b) {
      b = cos(a); a = sin(a);
      return [
        1, 0, 0, 0,
        0, b, a, 0,
        0, -a, b, 0,
        0, 0, 0, 1
      ];
    },

    rotateY: function (a,/**/ b) {
      b = cos(a); a = sin(a);
      return [
        b, 0, -a, 0, 
        0, 1, 0, 0,
        a, 0, b, 0,
        0, 0, 0, 1
      ];
    },

    rotateZ: function (a,/**/ b) {
      b = cos(a); a = sin(a);
      return [
        b, a, 0, 0,
        -a, b, 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1
      ];
    },

    rotate: function (a, b, d,/**/ h, s, e, g) {
      h = cos(a); a = sin(a);
      s = cos(b); b = sin(b);
      e = cos(d); d = sin(d);
      g = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];

      g[0] = s * e;
      g[1] = h * d + a * b * e;
      g[2] = a * d - h * b * e;
      g[4] = -s * d;
      g[5] = h * e - a * b * d;
      g[6] = a * e + h * b * d;
      g[8] = b;
      g[9] = -a * s;
      g[10] = h * s;
      return g
    },

    skew: function (a, b, d) {
      return [
        1, 0, 0, 0,
        tan(d), 1, 0, 0,
        tan(b), tan(a), 1, 0,
        0, 0, 0, 1
      ];
    },

    equal: function (a, b) {
      if (!a || !b)
        return false;
      if (a == b)
        return true;
      for (var d = 0, l = a.length; d < l; ++d)
        if (abs(a[d] - b[d]) >= PRECISION)
          return false;
      return true;
    },

    random: function (a) {
      a = a.slice(0);
      if (a[0] == PI / 2 || a[0] == -PI / 2)
        a[0] = -a[0], a[1] = PI - a[1], a[2] -= PI;
      a[0] > PI / 2 && (a[0] -= PI, a[1] = PI - a[1], a[2] -= PI);
      a[0] < -PI / 2 && (a[0] += PI, a[1] = -PI - a[1], a[2] -= PI);
      for (; a[1] < -PI; )
        a[1] += 2 * PI;
      for (; a[1] >= PI; )
        a[1] -= 2 * PI;
      for (; a[2] < -PI; )
        a[2] += 2 * PI;
      for (; a[2] >= PI; )
        a[2] -= 2 * PI;
      return a
    },

    inverse: function (a,/**/ b, d, h, s, e, g, j, k, m, w, r) {
      b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];
      d = a[5] * a[10] - a[6] * a[9];
      h = a[4] * a[10] - a[6] * a[8];
      s = a[4] * a[9]  - a[5] * a[8];
      e = a[1] * a[10] - a[2] * a[9];
      g = a[0] * a[10] - a[2] * a[8];
      j = a[0] * a[9]  - a[1] * a[8];
      k = a[1] * a[6]  - a[2] * a[5];
      m = a[0] * a[6]  - a[2] * a[4];
      w = a[0] * a[5]  - a[1] * a[4];
      r = 1 / (a[0] * d - a[1] * h + a[2] * s);
      b[0]  =  r * d;
      b[1]  = -r * e;
      b[2]  =  r * k;
      b[4]  = -r * h;
      b[5]  =  r * g;
      b[6]  = -r * m;
      b[8]  =  r * s;
      b[9]  = -r * j;
      b[10] =  r * w;
      b[12] = -a[12] * b[0] - a[13] * b[4] - a[14] * b[8];
      b[13] = -a[12] * b[1] - a[13] * b[5] - a[14] * b[9];
      b[14] = -a[12] * b[2] - a[13] * b[6] - a[14] * b[10];
      return b
    },

    translateValues: function (a) {
      return [a[12], a[13], a[14]];
    },

    create: function (a) {
      var distance = function (x, y, z) {
        d || (d = 0);
        return sqrt(x * x + y * y + z * z);
      };

      var d = a[0] + distance(a[0], a[1], a[2]),
          h = 2 / (d * d + a[1] * a[1] + a[2] * a[2]),
          s = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];
      s[0] = 1 - h * d * d;
      s[1] = -h * d * a[1];
      s[2] = -h * d * a[2];
      s[5] = 1 - h * a[1] * a[1];
      s[6] = -h * a[1] * a[2];
      s[10] = 1 - h * a[2] * a[2];
      s[4] = s[1];
      s[8] = s[2];
      s[9] = s[6];
      d = Matrix.multiply(a, s);
      h = distance(d[5], d[6]);
      0 < d[5] && d[5] != h && (h *= -1);
      h = d[5] + h;
      var e = 2 / (h * h + d[6] * d[6]), j = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];
      j[5] = 1 - e * h * h;
      j[6] = -e * h * d[6];
      j[9] = j[6];
      j[10] = 1 - e * d[6] * d[6];
      s = Matrix.multiply(s, j);
      d = Matrix.multiply(a, s);
      h = Matrix.scale(0 > d[0] ? -1 : 1, 0 > d[5] ? -1 : 1, 0 > d[10] ? -1 : 1);
      d = Matrix.multiply(h, d);
      s = Matrix.multiply(s, h);
      h = {};
      h.translate = Matrix.translateValues(a);
      h.rotate = [atan2(-s[6], s[10]), asin(s[2]), atan2(-s[1], s[0])];
      h.rotate[0] || (h.rotate[0] = 0, h.rotate[2] = atan2(s[4], s[5]));
      h.scale = [d[0], d[5], d[10]];
      h.skew = [atan(d[9] / h.scale[2]), atan(d[8] / h.scale[2]), atan(d[4] / h.scale[0])];
      return h;
    },

    translateTo: function (a) {
      var b = Matrix.scale(a.scale[0], a.scale[1], a.scale[2]),
          d = Matrix.skew(a.skew[0], a.skew[1], a.skew[2]),
          h = Matrix.rotate(a.rotate[0], a.rotate[1], a.rotate[2]);
      return Matrix.move(Matrix.multiply(b, d, h), a.translate)
    },

    //toString: function (a,/**/ i, l) {
    toCSSMatrix3d: function (a,/**/ i, l) {
      a = a.slice(0); i = 0; l = a.length;
      for (; i < l; ++i) {
        abs(a[i]) < PRECISION && (a[i] = 0);
      }
      return 'matrix3d(' + a.join() + ')';
    }
  };

  //console.log(Matrix.toCSSMatrix3d(Matrix.multiply(Matrix.identity(), Matrix.scale(1.01, 1.01))));

  /**********************************************/

  var $ = require('jquery'),
      TWEEN = require('tween'),
      R = require('rex'),
      HumanTime = require('humantime'),
      Handlebars = require('handlebars'),
      Panel = require('panel'),
      request = require('api').request,
      addLike = function (photo_id, done, fail) {
        return request(
          'photox_like',
          {
            type: 'POST',
            data: { id: photo_id }//,
            //beforeSend: before
          },
          done,
          fail
        );
      },
      unLike = function (photo_id, done, fail) {
        return request(
          'photox_like',
          {
            type: 'POST',
            data: {
              id: photo_id,
              LIKE: false
            }//,
            //beforeSend: before
          },
          done,
          fail
        );
      },
      getLikes = function (photox_id, done) {
        return request(
          'photox_getLikes',
          {
            resources: { photox_id : photox_id }
          },
          done
        );
      },
      getPhotoX = function (photox_id, before, done, fail) {
        return request(
          'photox_getPhotoX',
          {
            resources: { photox_id : photox_id },
            beforeSend: before
          },
          done,
          fail
        );
      },
      mrandom = Math.random,
      proto;

  Handlebars.registerHelper('photoxPrintTime', function (updated_at) {
    var d = HumanTime.parseISO(HumanTime.toISO(updated_at));
    return HumanTime.printTime(d);
  });

  /**
   * Help functions.
   */

  /**
   * Load Image
   * todo: 后面有单独的图片加载模块。
   */
  var loadImage = function (f, url, cb, ecb) {
    // https://github.com/Modernizr/Modernizr/pull/377
    //var img = document.createElement('img'),
    var img = new Image(),
        abort = function (img) {
          img.onload = img.onerror = img = f = undefined;
        };
    img.onload = function () {
      cb && cb(img, f);
      abort(img);
    };
    img.onerror = function () {
      ecb && ecb(img, f);
      abort(img);
    };
    img.src = url;
  };

  var G_N = 0;

  var extend = function (t, s, k) {
    for (k in s) {
      if (!t.hasOwnProperty(k)) {
        t[k] = s[k];
      }
    }
    return t;
  };

  var random = function (n) {
    return parseInt(n * mrandom()) + 1;
  };

  var scaleWidthByHeight = function (h, d) {
    return h * d;
  };

  var scalForLarge = function (w0, h0, w1, h1) {
    var r = w1 / h1,
        rw = w1 / w0,
        rh = h1 / h0,
        w1 = min(w0, w1),
        h1 = min(h0, h1);
    if (rw < rh) {
      w1 = h1 * r;
    } else {
      h1 = w1 / r;
    }
    return [w1, h1];
  };

  var scaleForSmall = function (w0, h0, w1, h1) {
    var r0 = w1 / h1,
        r1 = w0 / h0;
    if (r1 > r0) {
      w1 = w0;
      h1 = w1 / r0;
    } else {
      h1 = h0;
      w1 = h1 * r0;
    }
    return [w1, h1];
  };

  var layoutCreator = function (g) {
    return extend({ id: G_N++ }, g);
  };

  // $f     - figure element
  // gid    - group id
  // ph, pw - preview.height & preview.width
  // rh, rw - calculate height, width
  // rt, rl - calculate top, left
  // provider
  var updateFigure = function (f, gid, ph, pw, rh, rw, rt, rl, provider) {
    f.setAttribute('data-gid', gid);
    f.style.opacity = 1;
    f.style.width = rw + 'px';
    f.style.height = rh + 'px';
    var m4 = Matrix.translate(rl, rt, 6);
    f.style.webkitTransform = Matrix.toCSSMatrix3d(m4);
    f.style.transform = Matrix.toCSSMatrix3d(m4);
    f._m4 = m4;

    // note: 去掉滤镜边框
    if (provider === 'instagram') {
      pw *= 1.10;
      ph *= 1.10;
    }

    if (f.getAttribute('data-lazy') === '-1') {
      f.setAttribute('data-whlt', [pw, ph, (rw - pw) / 2, (rh - ph) / 2].join(','));
    } else {
      var style = f.querySelector('img').style;
      style.width = pw + 'px';
      style.height = ph + 'px';
      style.top = (rh - ph) / 2 + 'px';
      style.left = (rw - pw) / 2 + 'px';
    }
  };


  /**
   * layouts
   */

  var LAYOUTS = [
    // 1 cell
    [
      {
        "type": "G",
        "name": "1",
        "aspect_ratio": 0,
        "cells":[
          { "type": "Rect", "x": 0, "y": 0, "width": 1, "height": 1, "margin": { "top": 6, "right": 6, "bottom": 6, "left": 6 } }
        ]
      }
    ],

    // 2 cells
    [
      {
        "type": "G",
        "name": "2A1",
        "aspect_ratio": 1 / 2,
        "cells": [
          { "type": "Rect", "x": 0, "y": 0,   "width": 1, "height": 0.5, "margin": { "top": 6, "right": 6, "bottom": 6, "left": 6 } },
          { "type": "Rect", "x": 0, "y": 0.5, "width": 1, "height": 0.5, "margin": { "top": 6, "right": 6, "bottom": 6, "left": 6 } }
        ]
      },

      {
        "type": "G",
        "name": "2A2",
        "aspect_ratio": 3 / 4,
        "cells": [
          { "type": "Rect", "x": 0, "y": 0,   "width": 1, "height": 0.5, "margin": { "top": 6, "right": 6, "bottom": 6, "left": 6 } },
          { "type": "Rect", "x": 0, "y": 0.5, "width": 1, "height": 0.5, "margin": { "top": 6, "right": 6, "bottom": 6, "left": 6 } }
        ]
      },

      {
        "type": "G",
        "name": "2B1",
        "aspect_ratio": 4 / 3,
        "cells": [
          { "type": "Rect", "x": 0,   "y": 0, "width": 0.5, "height": 1, "margin": { "top": 6, "right": 6, "bottom": 6, "left": 6 } },
          { "type": "Rect", "x": 0.5, "y": 0, "width": 0.5, "height": 1, "margin": { "top": 6, "right": 6, "bottom": 6, "left": 6 } }
        ]
      }
    ],

    // 3 cells
    [
      {
        "type": "G",
        "name": "3A1",
        "aspect_ratio": 2 / 3,
        "cells": [
          { "type": "Rect", "x": 0,   "y": 0,        "width": 1,   "height": 0.666666, "margin": { "top": 6, "right": 6, "bottom": 6, "left": 6 } },
          { "type": "Rect", "x": 0,   "y": 0.666666, "width": 0.5, "height": 0.333333, "margin": { "top": 6, "right": 6, "bottom": 6, "left": 6 }} ,
          { "type": "Rect", "x": 0.5, "y": 0.666666, "width": 0.5, "height": 0.333333, "margin": { "top": 6, "right": 6, "bottom": 6, "left": 6 } }
        ]
      },

      {
        "type": "G",
        "name": "3B1",
        "aspect_ratio": 1 / 1,
        "cells": [
          { "type": "Rect", "x": 0,     "y": 0,     "width": 0.382, "height": 0.382, "margin": { "top": 6, "right": 6, "bottom": 6, "left": 6 } },
          { "type": "Rect", "x": 0.382, "y": 0,     "width": 0.618, "height": 0.382, "margin": { "top": 6, "right": 6, "bottom": 6, "left": 6 } },
          { "type": "Rect", "x": 0,     "y": 0.382, "width": 1,     "height": 0.618, "margin": { "top": 6, "right": 6, "bottom": 6, "left": 6 } }
        ]
      }
    ]
  ];

  var MNEMOSYNE = {};

  /**
   * Rect
   */

  var RECT_TEMPLATE = ''
        + '<figure class="surface" data-lazy="-1" data-id="{{id}}" '
            + 'data-preview-url="{{images.preview.url}}" '
            + 'data-preview-height="{{images.preview.height}}" '
            + 'data-preview-width="{{images.preview.width}}" '
            + 'data-fullsize-url="{{images.fullsize.url}}" '
            + 'data-fullsize-height="{{images.fullsize.height}}" '
            + 'data-fullsize-width="{{images.fullsize.width}}" '
            + 'data-liked="{{like}}" '
            + 'data-provider="{{provider}}" '
            + '>'
          + '<div class="photo"></div>'
          + '<div class="mask"></div>'
          + '<div class="btn-like ix-{{#unless like}}un{{/unless}}like"{{#unless like}} style="opacity: 0;"{{/unless}}></div>'
          + '<div class="meta">'
            + '<div class="avatar"><img width="24" height="24" src="{{by_identity.avatar_filename}}" alt="" /></div>'
            + '<div class="title">{{caption}}</div>'
            + '<time>{{photoxPrintTime updated_at}}</time>'
            + '<div class="place"></div>'
          + '</div>'
        + '</figure>';

  var Rect = MNEMOSYNE.Rect = function (data) {
    this.html = Handlebars.compile(RECT_TEMPLATE)(data);
  };

  Rect.prototype.toString = function () {
    return this.html;
  };


  /**
   * Cell Factory
   */

  var cellFactory = function (t, data) {
    return new MNEMOSYNE[t](data);
  };


  /**
   * Grouping
   */

  var G = function (photos, layout) {
    var i = 0,
        html = '',
        p, b, cell;

    for (; p = photos[i]; i++) {
      b = layout[i];
      cell = cellFactory(b.type, p);
      html += cell.toString();
    }
    return html;
  }


  /**
   * The Layout Engine
   */

    var Typesetting = function () {};

    proto = Typesetting.prototype;

    proto.defaultLayouts = LAYOUTS;

    /**
     * Generate layouts
     */

    proto.genLayouts = function (len) {
      var layouts = LAYOUTS.slice(0),
          l = layouts.length,
          list = [],
          r, gs, g;

      while (len) {
        r = random(len < l ? len : l);
        len -= r;

        // groups layouts
        gs = layouts[r - 1];
        // group
        g = gs[random(gs.length) - 1];

        list.push(layoutCreator(g));
      }

      return list;
    };


    /**
     *
     */
    var SlideShow = function (component, $element) {
      this.component = component;
      this.$element = $element;
      this.animate = true;
    };

    SlideShow.prototype.show = function (figure) {
      var $e = this.$element,
          s = $e[0].style;
      s.webkitTransform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, ' + $('#app-tmp').scrollLeft() + ', 0, 10, 1)';
      s.transform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, ' + $('#app-tmp').scrollLeft() + ', 0, 10, 1)';
      this.$element.attr('tabindex', '-1').focus();
      this.clone(figure);
    };

    SlideShow.prototype.exit = function () {
      var $e = this.$element, es = $e[0].style;
      $e.attr('tabindex', 'none')
      new TWEEN.Tween({ o: 1 })
            .to({ o: 0 }, 400)
            .interpolation(TWEEN.Interpolation.Bezier)
            .easing(TWEEN.Easing.Exponential.Out)
            .onUpdate(function () {
              es.opacity = this.o;
            })
            .onComplete(function () {
              $e.empty();
            })
            .start();
      this.img = this.curr = VOID;
      this.lockup = false;
    };

    SlideShow.prototype._clone_0 = function (f) {
      this.$element.empty();
      this.lockup = true;
      var self = this,
          r = f.getBoundingClientRect(),
          w = f.clientWidth,
          h = f.clientHeight,
          l = r.left,
          t = r.top,
          es = this.$element[0].style,
          pu = f.getAttribute('data-preview-url'),
          fu = f.getAttribute('data-fullsize-url'),
          fw = +f.getAttribute('data-fullsize-width'),
          fh = +f.getAttribute('data-fullsize-height'),
          sw = w / fw, sh = h / fh;
      var _div = document.createElement('div');
      _div.setAttribute('class', 'pic');
      _div.style.width = fw + 'px';
      _div.style.height = fh + 'px';
      var _img = new Image();
      _img.src = pu;
      var m0 = Matrix.move(Matrix.multiply(Matrix.scale(sw, sh), Matrix.identity()), [l, t, 1]);
      _div.style.webkitTransform = _div.style.transform = m0;

      loadImage(
        _div,
        fu,
        function (img, div) {
          /*
          if (img.width !== fw || img.height !== fh) {
            img.width = img.width;
            img.height = img.height;
            div.style.width = img.width + 'px';
            div.style.height = img.height + 'px';
            var m1 = self.cal(img.width, img.height);
            div._m4 = m1;
            console.log(div._m4);
            style.webkitTransform = style.transform = Matrix.toCSSMatrix3d(div._m4);
          } else {
            img.width = fw;
            img.height = fh;
          }
          */
          img.width = fw;
          img.height = fh;
          img.src = fu;
          div.appendChild(img);
          img = VOID;
        },
        function (img, div) {
          d.setAttribute('class', 'load-failed');
        }
      );

      this.$element.append(_div);

      this.curr = f;

      var m1 = this.cal(fw, fh),
          style = _div.style;

      _div._m4 = m1;
      new TWEEN.Tween(m0)
        .to(m1, 400)
        .interpolation(TWEEN.Interpolation.Bezier)
        .easing(TWEEN.Easing.Exponential.Out)
        .onUpdate(function (time) {
          var t = Matrix.toCSSMatrix3d(this);
          style.webkitTransform = style.transform = t;
          es.opacity = time;
        })
        .onComplete(function () {
          self.lockup = false;
          _div._tween = null;
          TWEEN.remove(this);
        })
        .start();
      return _div;
    };

    SlideShow.prototype.prev = function () {
      if (this.lockup) return;
      var img = this.img,
          $curr = $(this.curr),
          $prev = $curr.prev('.surface'),
          prev;
      this.curr = ($prev.length ? $prev : $curr.parent().find('.surface').last())[0];
      prev = this.clone(this.curr);
      this.effect(img, prev, -1);
    };

    SlideShow.prototype.next = function () {
      if (this.lockup) return;
      var img = this.img,
          $curr = $(this.curr),
          $next = $curr.next('.surface'),
          next;
      this.curr = ($next.length ? $next : $curr.parent().find('.surface').first())[0];
      next = this.clone(this.curr);
      this.effect(img, next, 1);
    };

    SlideShow.prototype.effect = function (curr, next, a) {
      this.lookup = true;
      var self = this,
          cm = curr._m4,
          nm = next._m4,
          cs = curr.style,
          ns = next.style,
          cl = 50 * a;

      nm = Matrix.move(nm, [-cl, 0, 0]);
      ns.webkitTransform = ns.transform = Matrix.toCSSMatrix3d(nm);
      new TWEEN.Tween({ x: 0 })
        .to({ x: cl }, 400)
        .easing(TWEEN.Easing.Quadratic.InOut)
        .onStart(function () {
          self.lockup = true;
          $(curr).prevAll().remove();
        })
        .onUpdate(function (t) {
          cs.opacity = 1 - t;
          cs.webkitTransform = cs.transform = Matrix.toCSSMatrix3d(Matrix.move(cm, [this.x, 0, 1 - t]));
          ns.opacity = t;
          ns.webkitTransform = ns.transform = Matrix.toCSSMatrix3d(Matrix.move(nm, [this.x, 0, t]));
        })
        .onComplete(function () {
          ns.opacity = 1;
          self.lockup = false;
          TWEEN.remove(this);
        })
        .start();
    };

    SlideShow.prototype.update = function () {
      var img = this.img,
          imgs = img.style,
          m4 = img._m4,
          f = this.curr,
          fw = +f.getAttribute('data-fullsize-width'),
          fh = +f.getAttribute('data-fullsize-height'),
          m = this.cal(fw, fh),
          toCSSMatrix3d = Matrix.toCSSMatrix3d;
      new TWEEN.Tween(m4)
        .to(m, 144)
        .easing(TWEEN.Easing.Quadratic.InOut)
        .onUpdate(function () {
          imgs.webkitTransform = imgs.transform = toCSSMatrix3d([].slice.call(this));
        })
        .onComplete(function () {
          TWEEN.remove(this);
        })
        .start();
    };

    SlideShow.prototype.cal = function (fw, fh) {
      var vw = this.vw,
          vh = this.vh,
          wh = scalForLarge(vw, vh, fw, fh),
          rw = wh[0], rh = wh[1],
          sw = rw / fw, sh = rh / fh,
          l = (vw - rw ) / 2, t = (vh - rh ) / 2;
      return Matrix.move(Matrix.multiply(Matrix.scale(sw, sh), Matrix.identity()), [l, t, 1]);
    };

    SlideShow.prototype._clone_1 = function (f) {
      var pu = f.getAttribute('data-preview-url'),
          fu = f.getAttribute('data-fullsize-url'),
          fw = +f.getAttribute('data-fullsize-width'),
          fh = +f.getAttribute('data-fullsize-height'),
          m = this.cal(fw, fh);

      var _div = document.createElement('div');
      _div.setAttribute('class', 'pic');
      _div.style.width = fw + 'px';
      _div.style.height = fh + 'px';
      _div._m4 = m;

      var _img = new Image();
      _img.src = pu;

      m = Matrix.toCSSMatrix3d(m);
      _div.style.webkitTransform = _div.style.transform = m;
      _div.style.opacity = 0;

      loadImage(
        _div,
        fu,
        function (img, div) {
          img.width = fw;
          img.height = fh;
          img.src = fu;
          div.appendChild(img);
          img = VOID;
        },
        function (img, div) {
          div.setAttribute('class', 'load-failed');
        }
      );
      this.$element.append(_div);
      return _div;
    };

    SlideShow.prototype.resize = function (w, h) {
      this.vw = w;
      this.vh = h;
      if (this.img) {
        this.update();
      }
    };

    SlideShow.prototype.clone = function (figure) {
      var isNotFirst = !!this.curr;
      this.curr = figure;
      return this.img = this['_clone_' + (isNotFirst ? 1 : 0)](figure);
    };


    /**
     * Mnemosyne Panel
     */

    var Mnemosyne = Panel.extend({

      options: {

        template: ''
          + '<div class="panel mnemosyne-panel perspective" tabindex="-1">'
            // header
            //+ '<div class="panel-header"></div>'

            // body
            + '<div class="panel-body perspective">'

              // gallery
              + '<div class="gallery perspective group"></div>'

            + '</div>'

            // footer
            //+ '<div class="panel-footer"></div>'
          + '</div>'
          + '<div class="slideshow-panel perspective group"></div>'

      },

      init: function () {
        var opts = this.options, element;

        // crossId = photoxId
        this.crossId = opts.crossId;
        // userId
        this.userId = opts.userId;
        delete opts.crossId;

        this.render();
        element = this.element;

        this.$appTmp = $('#app-tmp');
        this.$mnemosyne = element.eq(0);
        this.$gallery = this.$mnemosyne.find('.gallery');
        this.$slideshow = element.eq(1);
        this.typesetting = new Typesetting();
        this.slideshow = new SlideShow(this, this.$slideshow);

        // previouse added photos
        this.i = 0;

        // total photos
        this.n = 0;

        this.offsetTop = 0;
        this.offsetLeft = 24;

        this.paddingRight = 30;

        this.scrollLeft = 0;

        this.showPhotoStatus = false;

        this.listen();
      },

      listen: function () {
        var self = this,
            //element = self.element,
            typesetting = self.typesetting,
            slideshow = self.slideshow,
            $m = self.$mnemosyne,
            $g = self.$gallery,
            $s = self.$slideshow,
            $at = self.$appTmp,
            $WIN = $(window);

        function animate() {
          self.frame = requestAnimationFrame(animate);
          TWEEN.update();
        }
        animate();

        $m.on('mouseenter.mnemosyne mouseleave.mnemosyne', '.gallery .surface', function (e) {
          e.preventDefault();
          var t = this,
              ts = t.style,
              $t = $(t),
              _m4 = this._m4,
              isMouseEnter = e.type === 'mouseenter',
              tween = $t.data('tween'),
              liked = +$t.attr('data-liked'),
              masks = t.querySelector('.mask').style,
              likes = t.querySelector('.btn-like').style,
              metas = t.querySelector('.meta').style,
              multiply = Matrix.multiply,
              scale = Matrix.scale,
              toCSSMatrix3d = Matrix.toCSSMatrix3d;

          if (!tween) {
            tween = new TWEEN.Tween({v: 1})
                      .easing(TWEEN.Easing.Cubic.InOut);
            $t.data('tween', tween);
          }

          tween.stop();

          if (isMouseEnter) {
            tween
              .delay(233)
              .to({ v: 1.01 }, 150)
              .onUpdate(function (t) {
                masks.opacity = (this.v - 1) * 4;
                metas.opacity = t; // 1 / 1.01
                if (liked !== 1) { likes.opacity = t; }
                ts.transform = ts.webkitTransform = toCSSMatrix3d(multiply(scale(this.v, this.v), _m4));
              });
          } else {
            tween.delay(0)
              .to({ v: 1 }, 150)
              .onUpdate(function (p) {
                masks.opacity = (this.v - 1) * 4;
                metas.opacity = (1 - p) * 0.99;
                if (liked !== 1) {
                  likes.opacity = 1 - p;
                }
                t.style.transform = ts.webkitTransform= toCSSMatrix3d(multiply(scale(this.v, this.v), _m4));
              })
              .onComplete(function () {
                $t.data('tween', null);
                TWEEN.remove(this);
              });
          }
          tween.start();
        })
          .on('click.mnemosyne', '.gallery .surface', function (e) {
            e.preventDefault();
            //$(this).trigger('mouseleave.mnemosyne');
            self.scrollLeft = $at.scrollLeft();
            $at.addClass('show-slideshow');
            self.emit('launch-slideshow', this);
          })
            .on('click.mnemosyne', '.surface .btn-like', function (e) {
              e.preventDefault();
              e.stopPropagation();
              var $t = $(this),
                  $p = $t.parent(),
                  pid = +$p.data('id'),
                  liked = +$p.attr('data-liked');

              if (liked === -2) {
                return;
              }

              $p.attr('data-liked', -2);

              if (liked === 1) {
                unLike(
                  pid,
                  function (data) {
                    $p.attr('data-liked', 0);
                    $t
                      .addClass('ix-unlike')
                      .removeClass('ix-like');
                  },
                  function () {
                    $p.attr('data-liked', 1);
                  }
                );
                return;
              }

              addLike(pid,
                function (data) {
                  $p.attr('data-liked', 1);
                  $t
                    .addClass('ix-like')
                    .removeClass('ix-unlike');
                },
                function () {
                  $p.attr('data-liked', 0);
                }
              );
            });

          $s.on('keydown.mnemosyne', function (e) {
              e.preventDefault();
              var keyCode = e.keyCode;
              switch (keyCode) {
              case 39: // right
              case 40: // bottom
                slideshow.next();
                break;
              case 38:  // up
              case 37: // left
                slideshow.prev();
                break;
              case 27: // esc
                e.stopPropagation();
                self.emit('exit-slideshow');
                break;
              }
            });

          $s.on('click.mnemosyne', function (e) {
            e.preventDefault();
            if (e.target.tagName !== 'IMG') {
              self.emit('exit-slideshow');
            }
          });

        // todo: mousewheel 可以禁用浏览器的默认的左右滚动手势，但现在html jie
        // 结构不生效
        $('html, body').bind('mousewheel.mnemosyne', function (e, d, x) { return false; });
        $at.bind('mousewheel.mnemosyne', function (e, d, x) {
          var left = $(this).scrollLeft();
          var pixels = left + x;
          $(this).scrollLeft(pixels);
          return false;
        });

        $at.on('scroll.mnemosyne', function (e) {
          e.preventDefault();
          e.stopPropagation();

          var $fs = $g.find('[data-lazy="-1"]'), f;

          if (0 === $fs.length) { return; }

          var cb = function (img, f) {
            if (f) {
              $(f).removeClass('load-failed');
              var whlt = f.getAttribute('data-whlt').split(','),
                  style = img.style;
              f.setAttribute('data-lazy', '1');
              img.setAttribute('class', 'pic');
              style.width = whlt[0] + 'px';
              style.height = whlt[1] + 'px';
              style.left = whlt[2] + 'px';
              style.top = whlt[3] + 'px';
              style.opacity = 0;
              f.querySelector('.photo').appendChild(img);
              new TWEEN.Tween({v: 0})
                .to({ v: 1 })
                .easing(TWEEN.Easing.Cubic.InOut)
                .onUpdate(function () { style.opacity = this.v; })
                .onComplete(function () { TWEEN.remove(this); })
                .start();
            }
          },
          ecb = function (img, f) {
            if (f) {
              f.setAttribute('data-lazy', '-1');
              $(f).addClass('load-failed');
            }
          };

          while ((f = $fs.splice(0, 1)[0])) {
            if (checkInViewport(f)) {
              f.setAttribute('data-lazy', '0');
              loadImage(
                f,
                f.getAttribute('data-fullsize-url'),
                cb,
                ecb
              );
            } else { break; }
          }
        });

        $WIN.on('throttledresize.mnemosyne', function () {
          self.getViewport();
          self.getGallery();
          self.updateViewport();
          self.update();
          //$at.trigger('scroll.mnemosyne');
          $at.trigger('scroll.mnemosyne');
        });

        self.on('load-photos', function (data) {
          var photos = data.photox.photos,
              len = photos.length;

          if (len) {
            this.emit('draw', photos, len);
          }

        });

        self.on('launch-slideshow', function (figure) {
          self.showPhotoStatus = true;
          var gs = $g[0].style;
          //var ms = $m[0].style;
          new TWEEN.Tween({ z: 3 })
            .to({ z: -610 }, 400)
            //.interpolation(TWEEN.Interpolation.Bezier)
            .easing(TWEEN.Easing.Exponential.Out)
            .onUpdate(function (t) {
              gs.transform =
                gs.webkitTransform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, ' + this.z + ', 1)';
              gs.opacity = 0.1 * t;
            })
            .onComplete(function () {TWEEN.remove(this);})
            .start()
          self.slideshow.show(figure);
        });

        self.on('exit-slideshow', function () {
          self.showPhotoStatus = false;
          $m.focus();
          self.slideshow.exit();
          //var ms = $m[0].style;
          var gs = $g[0].style;
          new TWEEN.Tween({ z: -610 })
            .to({ z: 1 }, 400)
            .interpolation(TWEEN.Interpolation.Bezier)
            .easing(TWEEN.Easing.Exponential.Out)
            .onUpdate(function (t) {
              $at.scrollLeft(self.scrollLeft);
              gs.transform =
                gs.webkitTransform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, ' + this.z + ', 1)';
              gs.opacity = 0.5 * (t + 1);
            })
            .onComplete(function () {
              $at.removeClass('show-slideshow');
              TWEEN.remove(this);
            })
            .start()
        });

        // Generate layouts & draw
        self.on('draw', function (photos, len) {
          /* test */
          //len *= 5;
          //photos = [].concat(photos, photos, photos, photos, photos);
          /* */

          var layouts = typesetting.genLayouts(len);
          this.drawPhotos(photos, layouts, len);
          $WIN.trigger('throttledresize.mnemosyne');
        });

        $('body').on('click.mnemosyne', '.mnemosyne-exit', function (e) {
          e.preventDefault();
          e.stopPropagation();
          self.hide();
        });
        /*
      $('body').on('click.photoxwidget', function (e) {
        var $p = $('#photox-panel');
        if ($p.length
          && $p[0] !== e.target
          && !$.contains($p[0], e.target)) {
          e.preventDefault();
          e.stopPropagation();
          $p.trigger('destory.widget');
          return;
        }
      });
      */
      },

      updateViewport: function () {
        var x = window.scrollX, y = window.scrollY;
        var matrix3d0 = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, ' + x + ', ' + y + ', 1, 1)';
        var matrix3d1 = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, ' + x + ', ' + y + ', 3, 1)';
        var matrix3d2 = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, ' + x + ', ' + y + ', 17, 1)';
        var ms = $('.mnemosyne-bg')[0].style;
        ms.transform = ms.webkitTransform = matrix3d0;
        var as = this.$appTmp[0].style;
        as.transform = as.webkitTransform = matrix3d1;
        var mes = $('.mnemosyne-exit')[0].style;
        mes.transform = mes.webkitTransform = matrix3d2;
      },

      addMBG: function () {
        var matrix3d = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, ' + window.scrollX + ', ' + window.scrollY + ', 1, 1)';
        var matrix3d1 = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, ' + window.scrollX + ', ' + window.scrollY + ', 20, 1)';
        matrix3d1 = '-webkit-transform:' +matrix3d1+';transform:'+matrix3d1+';';
        $('<div class="mnemosyne-exit ix-exit" style="'+matrix3d1+'"></div><div class="mnemosyne-bg perspective" style="-webkit-transform: ' + matrix3d + '; transform: ' + matrix3d + ';"><div class="mnemosyne-bg-in"></div></div>').prependTo($('body'));
      },

      delMBG: function () {
        $('.mnemosyne-exit').remove();
        $('.mnemosyne-bg').remove();
      },

      drawPhotos: function (photos, layouts, len) {
        var $g = this.$gallery,
            i = 0, j = 0,
            layout, cells, figure;

        if (!this.layouts) {
          this.layouts = [];
        }

        this.gid = this.layouts.length;

        while ((layout =layouts[i++])) {
          cells = layout.cells;
          figure = G(photos.slice(j, j += cells.length), cells);
          $g.append(figure);
        }

        this.layouts = this.layouts.concat(layouts);
        this.i = this.n;
        this.n += len;
      },

      update: function () {
        var $g = this.$gallery,
            $fs = $g.find('figure').slice(this.i, this.n),
            gvw = this.gvw,
            gvh = this.gvh,
            gid = this.gid,
            layouts = this.layouts.slice(gid),
            offsetTop = this.offsetTop,
            offsetLeft = this.offsetLeft,
            index = 0, vh = gvh, vw = gvw,
            layout, cells, cl, cell, aspect_ratio,
            $f, pw, ph, provider, margin, rw, rh, rl, rt;

        while ((layout = layouts.shift())) {
          gid = layout.id;
          aspect_ratio = layout.aspect_ratio;
          cells = layout.cells.slice();
          cl = cells.length;

          if (aspect_ratio) {
            vw = scaleWidthByHeight(gvh, aspect_ratio);
          }

          while ((cell = cells.shift())) {
            $f = $fs.eq(index);
            ph = +$f.data('preview-height');
            pw = +$f.data('preview-width');
            provider = $f.data('provider');

            if (1 === cl) {
              vw = scaleWidthByHeight(gvh, pw / ph);
            }

            margin = cell.margin;
            rh = cell.height * vh - margin.top - margin.bottom;
            rw = cell.width * vw - margin.left - margin.right;
            rt = offsetTop + cell.y * vh + margin.top + (gvh - vh) / 2;
            rl = offsetLeft + cell.x * vw + margin.left;

            var wh = scaleForSmall(rw, rh, pw, ph);
            pw = wh[0];
            ph = wh[1];

            updateFigure($f[0], gid, ph, pw, rh, rw, rt, rl, provider);

            index++;
          }

          offsetLeft += vw;
        }

        this.addPaddingRight(0, offsetLeft);
      },

      addPaddingRight: function (top, left) {
        var $g = this.$gallery, $pr = $g.find('.photos-padding-right');
        if (!$pr.size()) {
          $pr = $('<div class="photos-padding-right"></div>')
            .css({width: this.paddingRight});
        }
        $pr.css({
          '-webkit-transform': 'translate3d(' + left + 'px, ' + top  + 'px, 0)',
          '-moz-transform': 'translate3d(' + left + 'px, ' + top  + 'px, 0)',
          '-ms-transform': 'translate3d(' + left + 'px, ' + top  + 'px, 0)',
          '-o-transform': 'translate3d(' + left + 'px, ' + top  + 'px, 0)',
          'transform': 'translate3d(' + left + 'px, ' + top  + 'px, 0)'
        });
        $g.append($pr);
      },

      getPhotos: function () {
        var self = this, userId = this.userId;
          getPhotoX(
            self.crossId,
            null,
            function (a) {
            //var likes = a[0].likes,
            var likes = a.likes,
                photos = a.photox.photos;
            R.each(photos, function (v) {
              var lk = likes[v.id];
              v.like = 0;
              if (lk && lk.length) {
                R.each(lk, function (u) {
                  if (u.object_id === v.id && u.by_identity.connected_user_id === userId) {
                    v.like = 1;
                  }
                });
              }
          });
          self.emit('load-photos', a);
        });
      },

      getViewport: function () {
        var $r = this.element;
        this.vw = VW = $r.width();
        this.vh = VH = $r.height();
        this.slideshow.resize(this.vw, this.vh);
      },

      getGallery: function () {
        this.gvw = this.vw;
        this.gvh = this.vh - 40 - 60;
      },

      showBefore: function () {
        $('body').addClass('mnemosyne-start');
        $('#app-tmp').css('-webkit-transform', 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, ' + window.scrollX + ', ' + window.scrollY + ', 3, 1)');
        $('#app-tmp').css('transform', 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, ' + window.scrollX + ', ' + window.scrollY + ', 3, 1)');
        this.getPhotos();
      },

      showAfter: function () {
        var $mbg = $('.mnemosyne-bg'),
            mbgStyle = $mbg[0].style,
            mbgInStyle = $mbg.find('.mnemosyne-bg-in')[0].style,
            //$at = this.$appTmp,
            $m = this.$mnemosyne,
            ms = $m[0].style,
            $at = this.$appTmp,
            $g = this.$gallery,
            gs = $g[0].style;

        //1024
        //ms.transform = ms.webkitTransform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 2584, 1)';
        //gs.transform = gs.webkitTransform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 2584, 1)';

        var step0 = new TWEEN.Tween({v: 0})
              .to({ v: 1}, 750)
              .interpolation(TWEEN.Interpolation.Bezier)
              .easing(TWEEN.Easing.Cubic.In)
              .onUpdate(function () {
                mbgStyle.opacity = this.v;
              })
              .onComplete(function () {
                TWEEN.remove(this);
              });
        var step1 = new TWEEN.Tween({v: 0})
              .delay(250)
              .to({ v: 1}, 1000)
              .interpolation(TWEEN.Interpolation.Bezier)
              .easing(TWEEN.Easing.Cubic.In)
              .onUpdate(function () {
                mbgInStyle.opacity = this.v;
              })
              .onComplete(function () {
                TWEEN.remove(this);
              });
        var step2 = new TWEEN.Tween({ v: 2584})
              .delay(250)
              .to({ v: 3  }, 1500)
              .interpolation(TWEEN.Interpolation.Bezier)
              .easing(TWEEN.Easing.Cubic.In)
              .onUpdate(function () {
                gs.webkitTransform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, ' + this.v + ', 1)'
              })
              .onComplete(function () {
                $at.trigger('scroll.mnemosyne');
                TWEEN.remove(this);
              });
        step0.start();
        step1.start();
        step2.start();
      },

      show: function () {
        this.emit('showBefore');
        this.escapable();
        this.element.prependTo(this.parentNode);
        this.addMBG();
        this.emit('showAfter');
        return this;
      },

      hide: function () {
        TWEEN.removeAll();
        var self = this,
            mbgs = $('.mnemosyne-bg')[0].style,
            ms = self.$mnemosyne[0].style,
            ss = self.$slideshow[0].style;

        $(document).off('keydown.panel');
        this.element.off();

        new TWEEN.Tween({ o: 1 })
          .to({ o: 0 }, 250)
          .easing(TWEEN.Easing.Cubic.In)
          .onUpdate(function () {
            mbgs.opacity
              = ms.opacity
              = ss.opacity
              = this.o;
          })
          .onComplete(function () {
            self.destory();
            TWEEN.removeAll();
          })
          .start();
      },

      destory: function () {
        this.delMBG();
        $('html, body').unbind('mousewheel.mnemosyne');
        $('body').off('.mnemosyne').removeClass('mnemosyne-start');
        $('.mnemosyne-exit').off('click.mnemosyne');
        this.$appTmp
          .removeClass('.show-mnemosyne')
          .off('.mnemosyne')
          .css({
            '-webkit-transform': 'none',
            'transform': 'none'
          });
        $(window).off('throttledresize.mnemosyne');
        cancelAnimationFrame(this.frame);
        this.element.off();
        this.element.remove();
        this._destory();
      }
    });

    return Mnemosyne;

});

define('uploader', function (require, exports, module) {
  // https://github.com/blueimp
  // https://github.com/blueimp/jQuery-File-Upload
  // https://github.com/gildas-lormeau/zip.js
  // https://gist.github.com/2793006
  // http://www.w3.org/TR/html5/the-canvas-element.html#dom-canvas-toblob

  // Uploader Avatar Image
  // ---------------------

  var $ = require('jquery'),
      Api = require('api'),
      Store = require('store'),
      API_URL = window._ENV_.api_url,
      Dialog = require('dialog'),
      FileHTML5 = require('filehtml5');

  var Uploader = Dialog.extend({

    _fileInputField: null,

    _buttonBinding: null,

    queue: null,

    init: function () {
      this._fileInputField = null;
      this.queue = null;
      this._buttonBinding = null;
      this._fileList = [];
    },

    sync: function () {
      var $dropbox = this.$('.dropbox');
      this._fileInputField = $(Uploader.HTML5FILEFIELD_TEMPLATE);
      $dropbox.after(this._fileInputField);

      this._bindDropArea();

      this._fileInputField.on('change', $.proxy(this._updateFileList, this));
    },

    _bindSelectFile: function (e) {
      var fileinput = this._fileInputField[0];
      if (fileinput.click) {
        fileinput.click();
      }
    },

    _bindDropArea: function (e) {
      var ev = e || {prevVal: null};

      if (ev.prevVal !== null) {
        ev.prevVal.detach('drop', this._ddEventhandler);
        ev.prevVal.detach('dragenter', this._ddEventhandler);
        ev.prevVal.detach('dragover', this._ddEventhandler);
        ev.prevVal.detach('dragleave', this._ddEventhandler);
      }

      var _ddEventhandler = $.proxy(this._ddEventhandler, this);

      this.element.on('drop', '.modal-main'/*'.dropbox'*/, _ddEventhandler);
      this.element.on('dragenter', '.modal-main'/*'.dropbox'*/, _ddEventhandler);
      this.element.on('dragover', '.modal-main'/*'.dropbox'*/, _ddEventhandler);
      this.element.on('dragleave', '.modal-main'/*'.dropbox'*/, _ddEventhandler);
    },

    _ddEventhandler: function (e) {
      e.stopPropagation();
      e.preventDefault();
      switch (e.type) {
        case 'dragenter':
          this.emit('dragenter', e);
          break;

        case 'dragover':
          this.emit('dragover', e);
          break;

        case 'dragleave':
          this.emit('dragleave', e);
          break;

        case 'drop':
          //var dropbox = this.$('.photozone')[0];
          var modalmain = this.$('.modal-main')[0];

          //if (!$.contains(dropbox, e.target) && (e.target !== dropbox)) {
          if (!$.contains(modalmain, e.target) && (e.target !== modalmain)) {
            return false;
          }

          this._fileselect(e.originalEvent.dataTransfer.files);

          this.emit('drop', e);
          break;
      }

      return false;
    },

    _fileselect: function (files) {
      var newfiles = files,
          parsedFiles = [],
          newfile,
          filterFunc = this.fileFilterFunction,
          i = 0, l = newfiles.length;

      if (false) {
      //if (filterFunc) {
        for (; i < l; i++) {
          newfile = new FileHTML5(newfiles[i]);
          if (filterFunc(newfile)) {
            parsedFiles.push(newfile);
          }
        }
      }
      else {
        for (; i < l; i++) {
          parsedFiles.push(new FileHTML5(newfiles[i]));
        }
      }

      if (this.options.limit) {
        parsedFiles = parsedFiles.slice(-this.options.limit);
      }

      if (parsedFiles.length > 0) {
        this.emit('fileselect', {fileList: parsedFiles});
      }
    },

    _updateFileList: function (e) {
      this._fileselect(e.target.files);
    },

    fileFilterFunction: function (file) {
      var r = false;
      if (/^image\/(png|gif|bmp|jpg|jpeg)$/.test(file._type)) {
        r = true;
      }
      return r;
    }

  },
  {
    HTML5FILEFIELD_TEMPLATE: '<input type="file" style="visibility:hidden; width:0px; height:0px;" />'
  }
  );

  var uploadSettings = {

    errors: {
      'server': 'Failed to open, please try again.',
      'format': 'File format not supported.',
      'size': 'File is too large.'
    },

    checkFile: function (file) {

      if (this.checkFileFormat(file)) { return false; }

      if (this.checkFileSize(file)) { return false; }

      return true;
    },

    checkFileSize: function (file) {
      var maxSize = 1024 * 1024 * 3, b = false;

      this.emit('toggleError', (b = file._size > maxSize), 'size');

      return b;
    },

    checkFileFormat: function (file) {
      var b = !this.fileFilterFunction(file);

      this.emit('toggleError', b, 'format');

      return b;
    },

    // 缩放比例
    sss: 1,

    //
    aoffset: [0, 0],

    // 记录上传的缩放大小
    psx: 1,
    psy: 1,

    // anchor
    // 0  1  2
    // 3     4
    // 5  6  7
    anchor: null,

    // resize image
    resizing: false,

    // canvas dragging
    dragging: false,

    SCALE: 80 / 240,

    // 旋转角度计数器
    ri: 0,

    // 坐标旋转
    R: [0, 0],

    filehtml5Bind: function () {
      var that = this;

      this.filehtml5._xhrHeaders = {
        'Accept': 'application/json, text/javascript, */*; q=0.01'
      };

      this.filehtml5.on('uploadcomplete', function (e) {
        var b = true;
        that.$('.loading').addClass('hide');
        that.$('.zoom').show();
        data = JSON.parse(e.data);
        if (data) {
          if (data.meta.code === 200) {
            b = false;
            if (data.response.type === 'user') {
              $('.user-avatar .avatar, .user-panel .avatar').find('img').attr('src', data.response.avatars['80_80']);
            } else {
              $('.identity-list li[data-identity-id="' + data.response.identity_id + '"] .avatar').find('img').attr('src', data.response.avatars['80_80']);
            }
          }
        }

        that.emit('toggleError', b, 'server');

        that.hide();
      });

      this.filehtml5.on('uploadstart', function (e) {
        that.$('.loading').removeClass('hide');
      });
    },

    options: {
      limit: 1,

      onHideAfter: function () {
        var $e = this.element;
        this.offSrcNode();
        this.destory();
        $e.remove();
      },

      onShowBefore: function () {
        docBind(this);
      },

      onShowAfter: function (data) {

        this._data = data;

        this._canvasOffset = this.$('#avatar240').offset();

        if (data.original) {

          var input = document.createElement('input');
          input.type = 'file';
          this.filehtml5 = new FileHTML5(input.files);
          this.filehtml5Bind();

          this.$('.overlay').addClass('hide');
          this.$('.resizeable').removeClass('hide');
          this.$('.upload-done').show();
          this.$('.upload-clear').hide();
          this.$('.zoom').show();

          var self = this;
          self.ri = 0;
          self.R = [0, 0];
          var canvas = document.getElementById('avatar240')
            , canvas80 = document.getElementById('avatar80')
            , r = self.r
            , stage = new Stage(canvas)
            , bitmap
            , stage80 = new Stage(canvas80)
            , bitmap80
            , originalImage = document.getElementById('img-avatar');

          originalImage.onload = function () {
            var min = Math.min(originalImage.width, originalImage.height);
            self.sss = 1;

            if (min > 240) {
              self.sss = 240 / min;
            }

            bitmap = new Bitmap(originalImage);

            self.psx = bitmap.scaleX = self.sss;
            self.psy = bitmap.scaleY = self.sss;

            bitmap.setPosition(canvas.width / 2 - (bitmap.regX *= bitmap.scaleX), canvas.height / 2 - (bitmap.regY *= bitmap.scaleY));
            bitmap.rotation = self.ri;

            bitmap.updateContext = function (ctx) {
              ctx.translate(canvas.width * self.R[0], canvas.height * self.R[1]);
              ctx.rotate(this.rotation * Stage.DEG_TO_RAD);
              ctx.webkitImageSmoothingEnabled = ctx.mozImageSmoothingEnabled = false;
            };

            // add to canvas
            stage.addChild(bitmap);

            // update canvas
            stage.update();

            self.bitmap = bitmap;
            self.stage = stage;

            // ---------------------- 80 * 80 --------------
            bitmap80 = new Bitmap(canvas);
            bitmap80.updateImage = function (canvas) {
              bitmap80.originalImage = canvas;
            };
            bitmap80.updateContext = function (ctx) {
              ctx.scale(self.SCALE, self.SCALE);
              ctx.webkitImageSmoothingEnabled = ctx.mozImageSmoothingEnabled = false;
            };
            stage80.addChild(bitmap80);
            stage80.update();

            self.bitmap80 = bitmap80;
            self.stage80 = stage80;
            var img = document.createElement('img');
            img.onload = function () {
              new Thumbnailer(document.getElementById('real-avatar80'), this, stage80.canvas, 80, 3);
            }
            img.src = canvas.toDataURL('image/png');
          };

          // CORS: cross origin
          originalImage.crossOrigin = 'anonymous';
          originalImage.src = data.original;
        }

      },

      onHideAfter: function () {
        var $e = this.element;
        this.offSrcNode();
        this.destory();
        $e.remove();
        docUnBind();
      },

      onToggleError: function (b, errorType) {
        if (b) {
          this.$('.xalert-error').html(this.errors[errorType]).removeClass('hide');
        }
        else {
          this.$('.xalert-error').addClass('hide');
        }
      },

      onDrop: function (e) {
      },

      onFileselect: function (data) {
        var files = data.fileList, filehtml5;
        if (files.length) {
          filehtml5 = this.filehtml5 = files[0];

          if (!this.checkFile(filehtml5)) { return false; }

          this.filehtml5Bind();

          this.$('.overlay').addClass('hide');
          this.$('.resizeable').removeClass('hide');
          this.$('.upload-done').show();
          this.$('.upload-clear').hide();
          this.$('.zoom').hide();

          var self = this;
          self.ri = 0;
          self.R = [0, 0];
          var canvas = document.getElementById('avatar240')
            , canvas80 = document.getElementById('avatar80')
            , r = self.r
            , stage = new Stage(canvas)
            , bitmap
            , stage80 = new Stage(canvas80)
            , bitmap80
            , originalImage = document.getElementById('img-avatar');

          originalImage.onerror = originalImage.onload = function () {
            var image = originalImage;
            var min = Math.min(originalImage.width, originalImage.height);
            self.sss = 1;

            if (min > 240) {
              self.sss = 240 / min;
            }

            // gif, get first frame
            if (self.filehtml5._type === 'image/gif') {
              var ccc = document.createElement('canvas'),
                  ccctx = ccc.getContext('2d');
              ccc.width = image.width;
              ccc.height = image.height;
              ccctx.drawImage(image, 0, 0, ccc.width, ccc.height);
              image = ccc;
            }

            bitmap = new Bitmap(image);

            self.psx = bitmap.scaleX = self.sss;
            self.psy = bitmap.scaleY = self.sss;

            bitmap.setPosition(canvas.width / 2 - (bitmap.regX *= bitmap.scaleX), canvas.height / 2 - (bitmap.regY *= bitmap.scaleY));
            bitmap.rotation = self.ri;

            bitmap.updateContext = function (ctx) {
              ctx.translate(canvas.width * self.R[0], canvas.height * self.R[1]);
              ctx.rotate(this.rotation * Stage.DEG_TO_RAD);
              ctx.webkitImageSmoothingEnabled = ctx.mozImageSmoothingEnabled = false;
            };

            // add to canvas
            stage.addChild(bitmap);

            // update canvas
            stage.update();

            self.bitmap = bitmap;
            self.stage = stage;

            // ---------------------- 80 * 80 --------------
            bitmap80 = new Bitmap(canvas);
            bitmap80.updateImage = function (canvas) {
              bitmap80.originalImage = canvas;
            };
            bitmap80.updateContext = function (ctx) {
              ctx.scale(self.SCALE, self.SCALE);
              ctx.webkitImageSmoothingEnabled = ctx.mozImageSmoothingEnabled = false;
            };
            stage80.addChild(bitmap80);
            stage80.update();

            self.bitmap80 = bitmap80;
            self.stage80 = stage80;
            var img = document.createElement('img');
            img.onload = function () {
              new Thumbnailer(document.getElementById('real-avatar80'), this, stage80.canvas, 80, 3);
            }
            img.src = canvas.toDataURL('image/png');
          };

          // CORS: cross origin
          originalImage.crossOrigin = 'anonymous';
          readFileToImage(originalImage, filehtml5._file);

        }
      },

      backdrop: false,

      // bind events
      events: {

        'click .dropbox': function (e) {
          e.preventDefault();
          this._fileInputField[0].value = null;
          this._bindSelectFile();
        },

        'mousedown #avatar240': function (e) {
          e.preventDefault();
          this.dragging = true;
          this.offset = [e.pageX, e.pageY];
          return false;
        },

        // upload
        'click .upload': function (e) {
          e.preventDefault();
          this.$('.overlay').removeClass('hide');
          this.$('.resizeable').addClass('hide');
          this.$('.upload, .rotate, .upload-done').hide();
          this.$('.back, .upload-clear').show();
        },

        // Rotate
        'click .rotate': function (e) {
          this.ri++;
          // 图片顶点在 canvs 坐标系中的相对位置
          // 90
          if (this.ri === 1) {
            this.R = [1, 0];
          }
          // 180
          else if (this.ri === 2) {
            this.R = [1, 1];
          // 270
          } else if (this.ri === 3) {
            this.R = [0, 1];
          // 360 / 0
          } else {
            this.ri = 0;
            this.R = [0, 0];
          }
          this.bitmap.rotation = 90 * this.ri;
          this.stage.update();
          this.bitmap80.updateImage(this.stage.canvas);
          this.stage80.update();
          var self = this;
          var img = document.createElement('img');
          img.onload = function () {
            new Thumbnailer(document.getElementById('real-avatar80'), this, self.stage80.canvas, 80, 3);
          }
          img.src = self.stage.canvas.toDataURL('image/png');
          return false;
        },

        'hover .avatar240': function (e) {
          if (e.type === 'mouseenter') {
            this.$('.upload, .rotate').show();
          }
          else {
            this.$('.upload, .rotate').hide();
          }
        },

        'hover .overlay': function (e) {
          if (!this._data.original) { return; }
          var enter = e.type === 'mouseenter';
          if ($(e.currentTarget).hasClass('dropbox')) {
            this.$('.back')[enter ? 'show' : 'hide']();
          }
          else {
            //this.$('.zoom')[enter ? 'show' : 'hide']();
          }
        },

        // Back
        'click .back': function (e) {
          this.$('.overlay').addClass('hide');
          this.$('.resizeable').removeClass('hide');
          this.$('.upload, .rotate, .upload-done').show();
          this.$('.back, .upload-clear').hide();
          return false;
        },

        'click .smallphoto': function (e) {
          e.preventDefault();
          var src = '';
          if (!this.bitmap) { return false; }
          if ($.browser.safari && !/chrome/.test(navigator.userAgent.toLowerCase())) {
            var canvas = document.createElement('canvas'),
                ctx = canvas.getContext('2d');
            canvas.width = this.bitmap.originalImage.width;
            canvas.height = this.bitmap.originalImage.height;
            ctx.drawImage(this.bitmap.originalImage, 0, 0, canvas.width, canvas.height);
            src = canvas.toDataURL('image/png');
          } else {
            src = this.bitmap.originalImage.src;
          }
          return window.open(src);
        },

        // Resize
        'mousedown .resizeable': function (e) {
          e.preventDefault();
          var $e = $(e.target);
          var anchor = this.anchor = $e.data('anchor');
          this.resizing = true;
          this.aoffset = [e.pageX, e.pageY];

          var offset = this._canvasOffset;

          if (anchor === 7) {
            this.dr = Math.sqrt(Math.pow(e.pageX - offset.left, 2) + Math.pow(e.pageY - offset.top, 2));
          } else if (anchor === 5) {
            this.dr = Math.sqrt(Math.pow(e.pageX - offset.left - 240, 2) + Math.pow(e.pageY - offset.top, 2));
          } else if (anchor === 0) {
            this.dr = Math.sqrt(Math.pow(e.pageX - offset.left - 240, 2) + Math.pow(e.pageY - offset.top - 240, 2));
          } else if (anchor === 2) {
            this.dr = Math.sqrt(Math.pow(e.pageX - offset.left, 2) + Math.pow(e.pageY - offset.top - 240, 2));
          }

          return false;
        },

        'click .upload-clear': function (e) {
          this.$('.help-portrait').removeClass('hide');
          this.$('.xbtn-yes, .xbtn-no').removeClass('hide');
          return false;
        },

        'click .xbtn-no': function (e) {
          this.$('.help-portrait').addClass('hide');
          this.$('.xbtn-yes, .xbtn-no').addClass('hide');
          return false;
        },

        'click .xbtn-yes': function (e) {
          var data = {}
            , authorization = Store.get('authorization')
            , token = authorization.token;

          if (this._data.identity_id) {
            data.identity_id = this._data.identity_id;
          }

          this.filehtml5.startUpload(API_URL + '/avatar/update?token=' + token, data);
          return false;
        },

        'click .upload-done': function (e) {
          var self = this;
          var bitmap = this.bitmap;
          var originalImage = bitmap.originalImage;
          var stage = this.stage;
          var stage80 = this.stage80;

          // crop origin image {{{
          var min = 240 / this.sss;
          var x = bitmap.x / this.sss;
          var y = bitmap.y / this.sss;

          var oc = document.createElement('canvas');
          oc.width = oc.height = min;
          var os = new Stage(oc);
          var ob = new Bitmap(originalImage);

          ob.setPosition(x, y);
          ob.rotation = 90 * this.ri;
          ob.scaleX = bitmap.scaleX / this.sss;
          ob.scaleY = bitmap.scaleY / this.sss;
          ob.updateContext = function (ctx) {
            ctx.translate(oc.width * self.R[0], oc.height * self.R[1]);
            ctx.rotate(this.rotation * Stage.DEG_TO_RAD);
            ctx.webkitImageSmoothingEnabled = ctx.mozImageSmoothingEnabled = false;
          };

          os.addChild(ob);
          os.update();
          // }}}

          var img0 = saveCanvasAsFile(os.canvas, 'original.png');
          //var img1 =  saveCanvasAsFile(stage80.canvas, '80_80.png');
          var img1 =  saveCanvasAsFile(document.getElementById('real-avatar80'), '80_80.png');

          var that = this;
          setTimeout(function () {

            var data = {
                'original': img0,
                '80_80': img1
              }
            , authorization = Store.get('authorization')
            , token = authorization.token;

            if (that._data.identity_id) {
              data.identity_id = that._data.identity_id;
            }

            that._data = data;

            // 头像上传
            that.filehtml5.startUpload(API_URL + '/avatar/update?token=' + token, data);
          }, 15.6);
        }
      },

      viewData: {

        cls: 'mblack modal-uploader',

        title: 'Portrait',

        body: ''
          + '<div class="pull-right sider">'
            + '<div class="pull-right smallphoto">'
              + '<i class="icon20-zoom zoom"></i>'
              + '<div class="avatar80">'
                + '<img id="img-avatar" src="" class="hide" alt="" />'
                + '<canvas id="avatar80" width="80" height="80" class="hide"></canvas>'
                + '<canvas id="real-avatar80"></canvas>'
              + '</div>'
              + '<div class="overlay">'
              + '</div>'
              + '<div class="loading hide"></div>'
            + '</div>'

            + '<div class="uploader-form">'
              + '<div class="xalert-error hide"></div>'
              + '<button class="pull-right xbtn xbtn-blue upload-done hide">Save</button>'
              + '<button class="pull-right xbtn xbtn-white upload-clear hide">Clear</button>'
            + '</div>'
          + '</div>'

          + '<div class="photozone">'
            + '<div class="anchor-n resizeable hide" data-anchor="1"></div>'
            + '<div class="anchor-w resizeable hide" data-anchor="3"></div>'
            + '<div class="anchor-e resizeable hide" data-anchor="4"></div>'
            + '<div class="anchor-s resizeable hide" data-anchor="6"></div>'
            + '<div class="anchor-nw resizeable hide" data-anchor="0"></div>'
            + '<div class="anchor-ne resizeable hide" data-anchor="2"></div>'
            + '<div class="anchor-sw resizeable hide" data-anchor="5"></div>'
            + '<div class="anchor-se resizeable hide" data-anchor="7"></div>'
            + '<div class="avatar240">'
              + '<i class="icon20-upload upload"></i>'
              + '<i class="icon20-rotate rotate"></i>'
              + '<canvas id="avatar240" width="240" height="240"></canvas>'
            + '</div>'

            + '<div class="loading hide">'
              + '<img src="/static/img/loading.gif" alt="" width="36" height="39" />'
              + '<p>Uploading...</p>'
            + '</div>'

            + '<div class="overlay dropbox">'
              + '<i class="icon20-back back"></i>'
              + '<img class="bigupload" src="/static/img/upload_128.png" alt="" width="128" height="128" />'
              + '<div class="droptips">Drop your photo <span class="hide">or URL</span> here.<br />'
                + 'Alternatively, <span class="underline">open</span> local file.'
                // TODO: 第二版再弄摄像头
                //+ 'Alternatively, <span class="underline">open</span> local file, <br />'
                //+ '<span class="underline">take</span> one from your camera.'
              + '</div>'
            + '</div>'
          + '</div>',

        footer: ''
          + '<button class="pull-right xbtn xbtn-pink xbtn-yes hide">Yes</button>'
          + '<button class="pull-right xbtn xbtn-white xbtn-no hide">No</button>',

        others: ''
          + '<div class="help-portrait hide">'
            + '<div class="modal-body">'
              + '<div class="shadow title">Use default portrait?</div>'
              + '<div class="modal-content">'
                + '<p>You have no portrait set, thus a default one will be assigned automatically. It means you will lose your primary visual identification, consequently poor recognizability confuse your friends.</p>'
                + '<p>Confirm using default portrait?</p>'
              + '</div>'
            + '</div>'
          + '</div>'

      }
    }
  };

  // Helper

  function readFileToImage(image, file) {
    // 读取图像
    if (window.URL && window.URL.revokeObjectURL) {
      image.src = window.URL.createObjectURL(file);
    }
    else if (window.webkitURL && window.webkitURL.createObjectURL) {
      image.src = window.webkitURL.createObjectURL(file);
    }
    else {
      var reader = new FileReader();
      reader.onload = function (e) {
        image.src = e.target.result;
      };
      reader.readAsDataURL(file);
    }
  }

  /**
   * http://stackoverflow.com/questions/4998908/convert-data-uri-to-file-then-append-to-formdata/5100158
   */
  function dataURItoBlob(dataURI, callback) {
    // convert base64 to raw binary data held in a string
    // doesn't handle URLEncoded DataURIs

    var byteString;
    if (dataURI.split(',')[0].indexOf('base64') >= 0) {
        byteString = atob(dataURI.split(',')[1]);
    } else {
        byteString = decodeURIComponent(dataURI.split(',')[1]);
    }

    // separate out the mime component
    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

    // write the bytes of the string to an ArrayBuffer
    var ab = new ArrayBuffer(byteString.length);
    var ia = new Uint8Array(ab);
    for (var i = 0, l = byteString.length; i < l; ++i) {
      ia[i] = byteString.charCodeAt(i);
    }

    // write the ArrayBuffer to a blob, and you're done
    // https://github.com/blueimp/JavaScript-Canvas-to-Blob/blob/master/canvas-to-blob.js
    var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
    var res;
    if (BlobBuilder) {
      var bb = new BlobBuilder();
      bb.append(ab);
      res = bb.getBlob(mimeString);
    } else {
      // for safari Blob  算法不一样，导致 bytelength 也不一样
      // wtf? // 对于大文件不稳定哦
      // opera 12 暂不支持
      res = new Blob([ab], {"type": mimeString});
    }
    return res;
  }

  function getAsPNGBlob(canvas, filename) {
    if(canvas.mozGetAsFile) {
      return canvas.mozGetAsFile(filename, "image/png");
    } else {
      var data = canvas.toDataURL('image/png');
      var blob = dataURItoBlob(data);
      return blob;
    }
  }

  function saveCanvasAsFile(canvas, filename) {
    var blob = getAsPNGBlob(canvas, filename);
    return blob;
  }

  // Point(x, y)
  function Point(x, y) {
    this.x = x || 0;
    this.y = y || 0;
  }

  // Image
  function Bitmap(image) {

    // original image
    this.originalImage = image;

    // init width height
    this.width = image.width;
    this.height = image.height;

    // reg
    this.regX = image.width / 2;
    this.regY = image.height / 2;

    // left-top point
    this.x = 0;
    this.y = 0;

    // opacity
    this.alpha = 1;

    this.visible = true;

    // radius
    this.rotation = 0;

    // x-axis
    this.scaleX = 1;
    // y-axis
    this.scaleY = 1;
  }

  Bitmap.prototype = {

    // set (x, y)
    setPosition: function (x, y) {
      this.x = x || 0;
      this.y = y || 0;
    },

    updateContext: function (ctx) {},

    updateRect: function () {
      this.width = this.originalImage.width * this.scaleX;
      if (this.width < 0) {
        this.width = 1;
        this.scaleX = this.width / this.originalImage.width;
      }

      this.height = this.originalImage.height * this.scaleY;
      if (this.height < 0) {
        this.height = 1;
        this.scaleY = this.height / this.originalImage.height;
      }
    },

    draw: function (ctx) {
      this.updateRect();
      ctx.drawImage(this.originalImage, this.x, this.y, this.width - 1, this.height - 1);
    }
  };

  // Stage
  function Stage(canvas) {
    this.id = ++Stage.UID;
    this.canvas = (canvas instanceof HTMLCanvasElement) ? canvas : document.getElementById(canvas);
  }

  Stage.UID = 0;

  Stage.DEG_TO_RAD = Math.PI / 180;

  Stage.prototype = {

    toDataURL: function () {},

    clear: function () {
      var ctx = this.canvas.getContext('2d');
      ctx.setTransform(1, 0, 0, 1, 0, 0);
      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    },

    addChild: function (child) {
      this._children || (this._children = []);
      this.parent = this;
      this._children.push(child);
      return child;
    },

    draw: function () {
      var i, l, ctx, list = this._children;

      if (!list) { return; }

      if ((l = this._children.length)) {
        ctx = this.canvas.getContext('2d');

        // clear canvas
        this.clear();
        // Y 轴向上，数学坐标系
        //ctx.scale(1, -1);

        for (i = 0; i < l; i++) {
          var child = list[i];
          ctx.save();
          child.updateContext(ctx);
          child.draw(ctx);
          ctx.restore();
        }
      }
    },

    update: function () {
      this.draw();
    }
  };

  // 等比例
  function geometricProportion(x, y, h, w) {
    var a = [];
    a[0] = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
    if (x < 0 || y < 0) {
      a[0] *= -1;
    }
    a[1] = a[0] / Math.sqrt(Math.pow(h, 2) + Math.pow(w, 2));
    return a;
  }

  //returns a function that calculates lanczos weight
  function lanczosCreate(lobes) {
    return function(x) {
      if (x > lobes) { return 0; }
      x *= Math.PI;
      if (Math.abs(x) < 1e-16) { return 1; }
      var xx = x / lobes;
      return Math.sin(x) * Math.sin(xx) / x / xx;
    };
  }

  //elem: canvas element, img: image element, sx: scaled width, lobes: kernel radius
  function Thumbnailer(elem, img, ocan, sx, lobes) {
    this.canvas = elem;
    elem.width = img.width;
    elem.height = img.height;
    elem.style.display = "none";
    this.ctx = elem.getContext("2d");
    this.ctx.drawImage(img, 0, 0);
    this.img = img;
    this.ocan = ocan;
    this.src = this.ctx.getImageData(0, 0, img.width, img.height);
    this.dest = {
      width: sx,
      height: Math.round(img.height * sx / img.width)
    };
    this.dest.data = new Array(this.dest.width * this.dest.height * 3);
    this.lanczos = lanczosCreate(lobes);
    this.ratio = img.width / sx;
    this.rcp_ratio = 2 / this.ratio;
    this.range2 = Math.ceil(this.ratio * lobes / 2);
    this.cacheLanc = {};
    this.center = {};
    this.icenter = {};
    var that = this;
    //setTimeout(this.process1, 0, this, 0);
    setTimeout(function () {
      that.process1(that, 0);
    }, 0);
  }

  Thumbnailer.prototype.process1 = function(self, u){
    self.center.x = (u + 0.5) * self.ratio;
    self.icenter.x = Math.floor(self.center.x);
    for (var v = 0; v < self.dest.height; v++) {
        self.center.y = (v + 0.5) * self.ratio;
        self.icenter.y = Math.floor(self.center.y);
        var a, r, g, b;
        a = r = g = b = 0;
        for (var i = self.icenter.x - self.range2; i <= self.icenter.x + self.range2; i++) {
            if (i < 0 || i >= self.src.width)
                continue;
            var f_x = Math.floor(1000 * Math.abs(i - self.center.x));
            if (!self.cacheLanc[f_x])
                self.cacheLanc[f_x] = {};
            for (var j = self.icenter.y - self.range2; j <= self.icenter.y + self.range2; j++) {
                if (j < 0 || j >= self.src.height)
                    continue;
                var f_y = Math.floor(1000 * Math.abs(j - self.center.y));
                if (self.cacheLanc[f_x][f_y] == undefined)
                    self.cacheLanc[f_x][f_y] = self.lanczos(Math.sqrt(Math.pow(f_x * self.rcp_ratio, 2) + Math.pow(f_y * self.rcp_ratio, 2)) / 1000);
                var weight = self.cacheLanc[f_x][f_y];
                if (weight > 0) {
                    var idx = (j * self.src.width + i) * 4;
                    a += weight;
                    r += weight * self.src.data[idx];
                    g += weight * self.src.data[idx + 1];
                    b += weight * self.src.data[idx + 2];
                }
            }
        }
        var idx = (v * self.dest.width + u) * 3;
        self.dest.data[idx] = r / a;
        self.dest.data[idx + 1] = g / a;
        self.dest.data[idx + 2] = b / a;
    }

    if (++u < self.dest.width) {
      setTimeout(function () {
        self.process1(self, u);
      }, 0);
    } else {
      setTimeout(function () {
        self.process2(self);
      }, 0);
    }
  };

  Thumbnailer.prototype.process2 = function(self){
    self.canvas.width = self.dest.width;
    self.canvas.height = self.dest.height;
    self.ctx.drawImage(self.img, 0, 0);
    self.src = self.ctx.getImageData(0, 0, self.dest.width, self.dest.height);
    var idx, idx2;
    var gdata = self.ocan.getContext('2d').getImageData(0, 0, self.dest.width, self.dest.height);
    for (var i = 0; i < self.dest.width; i++) {
        for (var j = 0; j < self.dest.height; j++) {
            idx = (j * self.dest.width + i) * 3;
            idx2 = (j * self.dest.width + i) * 4;
            self.src.data[idx2] = self.dest.data[idx];
            self.src.data[idx2 + 1] = self.dest.data[idx + 1];
            self.src.data[idx2 + 2] = self.dest.data[idx + 2];
            self.src.data[idx2 + 3] = gdata.data[idx2 + 3];
        }
    }
    self.ctx.putImageData(self.src, 0, 0);
    self.canvas.style.display = "block";
}

  function docUnBind() {
    $(document)
      .off('mousemove.photozone')
      .off('mouseup.photozone');
  }

  function docBind(_uploader) {
    $(document)
      .on('mousemove.photozone', function (e) {
        e.preventDefault();
        var _u_ = _uploader;
        if (_u_ && _u_.dragging) {
          var dx = e.pageX - _u_.offset[0];
          var dy = e.pageY - _u_.offset[1];

          var bitmap = _u_.bitmap;

          switch (_u_.ri) {
            case 0:
              bitmap.x += dx;
              bitmap.y += dy;
              break;

            case 1:
              bitmap.x += dy;
              bitmap.y -= dx;
              break;

            case 2:
              bitmap.x -= dx;
              bitmap.y -= dy;
              break;

            case 3:
              bitmap.x -= dy;
              bitmap.y += dx;
              break;
          }

          _u_.offset[0] = e.pageX;
          _u_.offset[1] = e.pageY;

          _u_.stage.update();
          _u_.bitmap80.updateImage(_u_.stage.canvas);
          _u_.stage80.update();
          return false;
        }
        if (_u_ && _u_.resizing) {
          var dx = e.pageX - _u_.aoffset[0]
            , dy = e.pageY - _u_.aoffset[1]
            , dzx, dzy, sbx, sby
            , w = _u_.stage.canvas.width
            , h = _u_.stage.canvas.height
            , bitmap = _u_.bitmap
            , img = bitmap.originalImage
            , psx = _u_.psx
            , psy = _u_.psy
            , i = _u_.ri
            , ao = _u_.aoffset
            , sss = _u_.sss
            , canvasOffset = _u_._canvasOffset;

          function a1(sby) {
            //dzy = ao[1] - e.pageY; sby = dzy / h;

            if (i === 0) {
              bitmap.scaleY = psy + sby;
              if (bitmap.scaleY < 0) bitmap.scaleY = sss / img.height;
              bitmap.y -= bitmap.scaleY * img.height - bitmap.height;
            } else if (i === 1) {
              bitmap.scaleX = psx + sby;
              if (bitmap.scaleX < 0) bitmap.scaleX = sss / img.width;
              bitmap.x -= bitmap.scaleX * img.width - bitmap.width;
            } else if (i === 2) {
              bitmap.scaleY = psy + sby;
              if (bitmap.scaleY < 0) bitmap.scaleY = sss / img.height;
            } else {
              bitmap.scaleX = psx + sby;
              if (bitmap.scaleX < 0) bitmap.scaleX = sss / img.width;
            }
          }

          function a3(sbx) {
            //dzx = ao[0] - e.pageX; sbx = dzx / w;

            if (i === 0) {
              bitmap.scaleX = psx + sbx;
              if (bitmap.scaleX < 0) bitmap.scaleX = sss / img.width;
              bitmap.x -= bitmap.scaleX * img.width - bitmap.width;
            } else if (i === 1) {
              bitmap.scaleY = psy + sbx;
              if (bitmap.scaleY < 0) bitmap.scaleY = sss / img.height;
            } else if (i === 2) {
              bitmap.scaleX = psx + sbx;
              if (bitmap.scaleX < 0) bitmap.scaleX = sss / img.width;
            } else {
              bitmap.scaleY = psy + sbx;
              if (bitmap.scaleY < 0) bitmap.scaleY = sss / img.height;
              bitmap.y -= bitmap.scaleY * img.height - bitmap.height;
            }
          }

          function a4(sbx) {
            //dzx = e.pageX - ao[0]; sbx = dzx / w;

            if (i === 0) {
              bitmap.scaleX = psx + sbx;
              if (bitmap.scaleX < 0) bitmap.scaleX = sss / img.width;
            } else if (i === 1) {
              bitmap.scaleY = psy + sbx;
              if (bitmap.scaleY < 0) bitmap.scaleY = sss / img.height;
              bitmap.y -= bitmap.scaleY * img.height - bitmap.height;
            } else if (i === 2) {
              bitmap.scaleX = psx + sbx;
              if (bitmap.scaleX < 0) bitmap.scaleX = sss / img.width;
              bitmap.x -= bitmap.scaleX * img.width - bitmap.width;
            } else {
              bitmap.scaleY = psy + sbx;
              if (bitmap.scaleY < 0) bitmap.scaleY = sss / img.height;
            }
          }

          function a6(sby) {
            //dzy = e.pageY - ao[1]; sby = dzy / h;

            if (i === 0) {
              bitmap.scaleY = psy + sby;
              if (bitmap.scaleY < 0) bitmap.scaleY = sss / img.height;
            } else if (i === 1) {
              bitmap.scaleX = psx + sby;
              if (bitmap.scaleY < 0) bitmap.scaleY = sss / img.height;
            } else if (i === 2) {
              bitmap.scaleY = psy + sby;
              if (bitmap.scaleY < 0) bitmap.scaleY = sss / img.height;
              bitmap.y -= bitmap.scaleY * img.height - bitmap.height;
            } else {
              bitmap.scaleX = psx + sby;
              if (bitmap.scaleX < 0) bitmap.scaleX = sss / img.width;
              bitmap.x -= bitmap.scaleX * img.width - bitmap.width;
            }
          }

          if (dx || dy) {
            var a;

            switch (_u_.anchor) {
              case 0:
                //dzy = ao[1] - e.pageY; dzx = ao[0] - e.pageX;

                var dzr = Math.sqrt(Math.pow(e.pageX - w - canvasOffset.left, 2) + Math.pow(e.pageY - canvasOffset.top - h, 2));
                var r = Math.sqrt(Math.pow(w, 2) + Math.pow(h, 2));
                dzr -= _u_.dr;
                a1(dzr / r * sss);
                a3(dzr / r * sss);
                break;

              case 1:
                dzy = ao[1] - e.pageY;
                sby = dzy / h;
                a1(sby * sss);
                a3(sby * sss);
                break;

              case 2:
                //dzy = ao[1] - e.pageY; dzx = e.pageX - ao[0];

                var dzr = Math.sqrt(Math.pow(e.pageX - canvasOffset.left, 2) + Math.pow(e.pageY - canvasOffset.top - h, 2));
                var r = Math.sqrt(Math.pow(w, 2) + Math.pow(h, 2));
                dzr -= _u_.dr;
                a1(dzr / r * sss);
                a4(dzr / r * sss);
                break;

              case 3:
                dzx = ao[0] - e.pageX;
                sbx = dzx / w;
                a3(sbx * sss);
                a1(sbx * sss);
                break;

              case 4:
                dzx = e.pageX - ao[0];
                sbx = dzx / w;
                a4(sbx * sss);
                a6(sbx * sss);
                break;

              case 5:
                //dzx = ao[0] - e.pageX; dzy = e.pageY - ao[1];

                var dzr = Math.sqrt(Math.pow(e.pageX - w - canvasOffset.left, 2) + Math.pow(e.pageY - canvasOffset.top, 2));
                var r = Math.sqrt(Math.pow(w, 2) + Math.pow(h, 2));
                dzr -= _u_.dr;
                a3(dzr / r * sss);
                a6(dzr / r * sss);
                break;

              case 6:
                dzy = e.pageY - ao[1];
                sby = dzy / h;
                a4(sby * sss);
                a6(sby * sss);
                break;

              case 7:
                //dzx = e.pageX - ao[0]; dzy = e.pageY - ao[1];

                var dzr = Math.sqrt(Math.pow(e.pageX - canvasOffset.left, 2) + Math.pow(e.pageY - canvasOffset.top, 2));
                var r = Math.sqrt(Math.pow(w, 2) + Math.pow(h, 2));
                dzr -= _u_.dr;
                a4(dzr / r * sss);
                a6(dzr / r * sss);
                break;
            }

            _u_.stage.update();
            _u_.bitmap80.updateImage(_u_.stage.canvas);
            _u_.stage80.update();
          }

          return false;
        }
      })
      .on('mouseup.photozone', function (e) {
        if (_uploader) {
          if (_uploader.resizing || _uploader.dragging) {
            var img = document.createElement('img');
            img.onload = function () {
              new Thumbnailer(document.getElementById('real-avatar80'), this, _uploader.stage80.canvas, 80, 3);
            }
            img.src = _uploader.stage.canvas.toDataURL('image/png');
          }
          _uploader.resizing = false;
          _uploader.dragging = false;
          _uploader.anchor = null;
          // 记录上次缩放大小
          if (_uploader.bitmap) {
            _uploader.psx = _uploader.bitmap.scaleX;
            _uploader.psy = _uploader.bitmap.scaleY;
          }
        }
      });
  }

  exports.Uploader = Uploader;
  exports.uploadSettings = uploadSettings;

});

define(function (require, exports, module) {
  "use strict";

  var $ = require('jquery'),
      Store = require('store'),
      _ENV_ = window._ENV_,
      Dialog = require('dialog'),
      Dialogs = require('xdialog').dialogs,
      Handlebars = require('handlebars'),
      HumanTime = require('humantime'),
      R = require('rex'),
      Util = require('util'),
      Bus = require('bus'),
      Api = require('api');

  // 覆盖默认 `each` 添加 `__index__` 属性
  Handlebars.registerHelper('each', function (context, options) {
    var fn = options.fn
      , inverse = options.inverse
      , ret = ''
      , i, l;

    if(context && context.length) {
      for(i = 0, l = context.length; i < l; ++i) {
        context[i].__index__ = i;
        ret = ret + fn(context[i]);
      }
    } else {
      ret = inverse(this);
    }
    return ret;
  });

  // 添加 `ifFalse` 判断
  Handlebars.registerHelper('ifFalse', function (context, options) {
    return Handlebars.helpers['if'].call(this, !context, options);
  });

  Handlebars.registerHelper('avatarFilename', function (context, options) {
    return context;
  });

  Handlebars.registerHelper('printName', function (name, external_username) {
    if (!name) {
      name = external_username.match(/([^@]+)@[^@]+/)[1];
    }
    return name;
  });

  // 日期输出
  Handlebars.registerHelper('printTime', function (time) {
    var t = HumanTime.printEFTime(time);
    return t.content || 'Sometime';
  });

  Handlebars.registerHelper('printTime2', function (time) {
    var t = HumanTime.printEFTime(time);
    return t.content || 'To be decided';
  });

  Handlebars.registerHelper('printPlace', function (place) {
    return place || 'To be decided';
  });

  // Updates print time
  Handlebars.registerHelper('printTime3', function (time) {
    var b = time.begin_at;

    // 没有 date & 没有 date_word 显示空
    if (!b.date) {
      return b.date_word || '';
    }

    var t = HumanTime.printEFTime(time);
    return t.content || 'Sometime';
  });

  Handlebars.registerHelper('printTime4', function (time) {
    time = Handlebars.helpers['crossItem'].call(this, time);
    var t = HumanTime.printEFTime(time);
    return t.content || 'Sometime';
  });

  Handlebars.registerHelper('rsvpAction', function (identities, identity_id) {
    var rsvp = {
      'ACCEPTED': 'Accepted',
      'INTERESTED': 'Interested',
      'DECLINED': 'Unavailable',
      'NORESPONSE': 'Pending'
    };
    var i = R.filter(identities, function (v) {
      if (v.identity.id === identity_id) return true;
    })[0];
    var html = '';
    if (i && (i in rsvp) && (i.rsvp_status !== 'INTERESTED')) {
      var html = '<div><i class="';
      html += 'icon-rsvp-' + i.rsvp_status.toLowerCase() + '"></i> ';
      html += rsvp[i.rsvp_status] + ': ' + i.identity.name + '</div>';
    }

    var is = R.map(identities, function (v) {
      if (v.by_identity.id === identity_id && v.identity.id !== identity_id) return v.identity.name;
    }).filter(function (v) {
      if (v) return true;
    }).join(', ');

    html += '<div><i class="icon-invite"></i> ';
    html += 'Invited: ' + is;
    html += '</div>';
    return is ? html : '';
  });

  Handlebars.registerHelper('ifPlace', function (options) {
    var title = Handlebars.helpers['crossItem'].call(this, 'place');
    return Handlebars.helpers['if'].call(this, title.length, options);
  });

  Handlebars.registerHelper('makeDefault', function (def, status, options) {
    var context = !def && (status === 'CONNECTED');
    return Handlebars.helpers['if'].call(this, context, options);
  });

  Handlebars.registerHelper('ifRevoked', function (status, options) {
    return Handlebars.helpers['if'].call(this, status === 'REVOKED', options);
  });

  Handlebars.registerHelper('ifVerifying', function (provider, status, options) {
    var context = (!Handlebars.helpers['isOAuthIdentity'].call(this, provider, options)) && status === 'VERIFYING';
    return Handlebars.helpers['if'].call(this, context, options);
  });

  Handlebars.registerHelper('atName', function (identity) {
    return Util.printExtUserName(identity, true);
  });

  Handlebars.registerHelper('editable', function (provider, status, options) {
    var context = (!Handlebars.helpers['isOAuthIdentity'].call(this, provider, options)) && status === 'CONNECTED';
    return Handlebars.helpers['if'].call(this, context, options);
  });

  // 用户信息,包括多身份信息
  var identities_defe = function (user) {
    $('.user-xstats .attended').html(user.cross_quantity);

    var jst_user = $('#jst-user-avatar');

    var s = Handlebars.compile(jst_user.html());
    var h = s({avatar_filename: user.avatar_filename});

    $('.user-avatar').append(h);

    $('#profile .user-name').find('h3').html(user.name || user.nickname);
    $('#profile .user-bio').text(user.bio || '');

    $('#profile .user-name')
      .find('.changepassword')
      .attr('data-dialog-type', user.password ? 'changepassword' : 'setpassword')
      .find('span')
      .text( user.password ? 'Change Password...' : 'Set Password...');

    Handlebars.registerPartial('jst-identity-item', $('#jst-identity-item').html())

    var jst_identity_list = $('#jst-identity-list');
    var s = Handlebars.compile(jst_identity_list.html());
    var identities = user.identities;
    identities[0].__default__ = true;

    var h = s({identities: identities});
    $('.identity-list').append(h);
    var event;
    if ((event = $('#app-main').data('event'))) {
      var action = event.action;
      if (action === 'add_identity') {
        var data = event.data;
        var addIdentity = function (external_username, provider, that) {
          var authorization = Store.get('authorization')
            , token = authorization.token;
          var defe = Api.request('addIdentity',
            {
              type: 'POST',
              params: { token: token },
              data: {
                external_username: external_username,
                provider: provider
              }
            },
            function (data) {
              var identity = data.identity
                , user = Store.get('user')
                , identities = user.identities;
              identities.push(identity);
              Store.set('user', user);
              var s = Handlebars.compile($('#jst-identity-item').html());
              var h = s(data.identity);
              $('.identity-list').append(h);
              that && that.destory();
            },
            function (data) {
              var meta = data && data.meta;
              if (meta
                  && meta.code === 401
                  && meta.errorType === 'authenticate_timeout') {

                that && that.destory();
                var $d = $('<div data-widget="dialog" data-dialog-type="authentication" data-destory="true" class="hide"></div>');
                $('#app-tmp').append($d);
                var e = $.Event('click.dialog.data-api');
                e._data = {callback: function () { addIdentity(external_username, provider)}};
                $d.trigger(e);
              }
            }
          );
        }
        addIdentity(data.identity.external_username, data.identity.provider);
        $('#app-main').removeData('event');
      }
    }
  };

  // crossList 信息
  var crossList_defe = function (data) {
    if (!data) return;
    var user_id = data.user_id
      , token = data.token;

    // 返回一个 promise 对象
    return Api.request('crosslist'
      , {
        params: { token: token },
        resources: { user_id: user_id }
      }
      , function (data) {
          var now = +new Date;

          var jst_crosses = $('#jst-crosses-container');

          // 注册帮助函数, 获取 `ACCEPTED` 人数
          Handlebars.registerHelper('confirmed_nums', function (context) {
            var n = 0;
            var m = R.filter(context, function (v) {
              if (v.rsvp_status === 'ACCEPTED') {
                n += v.mates;
                return true;
              }
            }).length || 0;
            return m + n;
          });

          // 注册帮助函数, 获取总人数
          Handlebars.registerHelper('total', function (context) {
            var n = 0;
            R.filter(context, function (v) {
              if (v.rsvp_status === 'ACCEPTED') {
                n += v.mates;
                return true;
              }
            });
            return context.length + n;
          });

          // 注册帮助函数，列出 confirmed identities
          Handlebars.registerHelper('confirmed_identities', function (context) {
            var d = R(context).filter(function (v) {
              if (v.rsvp_status === 'ACCEPTED') return true;
            });
            // limit 7
            return R(d.slice(0, 7)).map(function (v, i) {
              return v.identity.name;
            }).join(', ');
          });

          // 注册子模版
          Handlebars.registerPartial('jst-cross-box', $('#jst-cross-box').html())
          // 编译模版
          var s = Handlebars.compile(jst_crosses.html());
          // 填充数据
          var h = '';

          var cates = 'upcoming<Upcoming> sometime<Sometime> sevendays<Next 7 days> later<Later> past<Past>';
          var crossList = {};

          R.map(data.crosses, function (v, i) {
            crossList[v.sort] || (crossList[v.sort] = {crosses: []});
            crossList[v.sort].crosses.push(v);
          });

          if (!crossList['upcoming']) {
            crossList['upcoming'] = {};
          }

          crossList['upcoming'].crosses || (crossList['upcoming'].crosses = []);
          crossList['upcoming'].crosses.reverse();

          var more = data.more.join(' ');

          var splitterReg = /<|>/;
          R.map(cates.split(' '), function (v, i) {
            v = v.split(splitterReg);
            var c = crossList[v[0]];
            if (c) {
              c.cate = v[0];
              c.cate_date = v[1];
              c.hasMore = more.search(v[0]) > -1;
              h += s(c);
            }
          });

          $('#profile .crosses').append(h);
      }
    );
  };

  var crosses_inversation_defe = function (data) {
    if (!data) return;
    var user_id = data.user_id
      , token = data.token;
    //var qdate = Store.get('qdate') || '';
    //qdate && (qdate = '&date=' + qdate);
    var now = new Date();
    //now.setDate(now.getDate() - 3);
    now = now.getFullYear() + '-' + (now.getMonth() + 1) + '-' + now.getDate();

    var dfd = Api.request('crosses'
      , {
        params: { token: token },
        resources: { user_id: user_id }
      }
      , function (data) {
          var _date = new Date();
          //Store.set('qdate', _date.getFullYear() + '-' + _date.getMonth() + '-' + _date.getDate());
          var crosses = data.crosses;
          var invitations = [];
          var updates = [];
          var updated;
          var conversations = [];
          var identities_KV = {};
          var updatesAjax = [];
          R.each(crosses, function (v, i) {

            // invitations
            //if (user_id !== v.by_identity.connected_user_id) {
              if (v.exfee && v.exfee.invitations && v.exfee.invitations.length) {

                R.each(v.exfee.invitations, function (e, j) {
                  identities_KV[e.id] = [i,j];
                  if (user_id === e.identity.connected_user_id && e.rsvp_status === 'NORESPONSE') {
                    e.__crossIndex = i;
                    e.__identityIndex = j;
                    invitations.push(e);
                  }
                });


              }
          });

          Handlebars.registerHelper('crossItem', function (prop) {
            if (prop === 'place') {
              return crosses[this.__crossIndex][prop].title;
            } else if (prop === 'invitationid') {
              return crosses[this.__crossIndex]['exfee'].invitations[this.__identityIndex].id;
            } else if (prop === 'exfeeid') {
              return crosses[this.__crossIndex]['exfee'].id;
            } else if (prop === 'identityid') {
              return crosses[this.__crossIndex]['exfee'].invitations[this.__identityIndex].identity.id;
            } else if (prop === 'name') {
              return crosses[this.__crossIndex]['exfee'].invitations[this.__identityIndex].identity.name;
            }
            return crosses[this.__crossIndex][prop];
          });

          Handlebars.registerHelper('conversation_nums', function () {
            return this.__conversation_nums;
          });

          if (invitations.length) {
            var jst_invitations = $('#jst-invitations');
            var s = Handlebars.compile(jst_invitations.html());
            var h = s({crosses: invitations});
            $('#profile .gr-b .invitations').removeClass('hide').append(h);
          }

      }
    );

    return dfd.done(newbieGuide);
  };

  var crosses_update_defe = function (data) {
    if (!data) return;
    var user_id = data.user_id
      , token = data.token
      , now = new Date()
      , mt = 0;

    now.setDate(now.getDate() - 3);
    mt = +now;
    now = now.getFullYear() + '-' + (now.getMonth() + 1) + '-' + now.getDate();

    return Api.request('crosses'
      , {
        resources: { user_id: user_id },
        params: {
          updated_at: now,
          token: token
        }
      }
      , function (data) {
          var crosses = data.crosses;
          var updates;

          if (0 === crosses.length) {
            $('.siderbar.updates').addClass('no-updates');
            return;
          }

          updates = R.filter(crosses, function (v, i) {
            var up = v.updated, b = false;
            //if (0 === v.conversation_count) {
              //v.conversation_count = b;
            //}
            if (up) {
              var k, dv, t;
              for (k in up) {
                if (k === 'background') {
                  continue;
                }
                dv = up[k];
                t = +new Date(dv.updated_at.replace(/\-/g, '/'));
                if (t > mt) {
                  /* NOTE: 2012/12/18 不过滤自己的操作。
                  if (k === 'exfee') {
                    if (dv.identity_id === v.by_identity.id || checkUserIdByIdentityId(dv.identity_id, user_id, v.exfee.invitations)) {
                      b |= false;
                    }
                    else {
                      b |= true;
                    }
                  }
                  else {
                  */
                    b |= true;
                  //}
                }
                else {
                  b |= false;
                  up[k] = false;
                }

              }
            }

            if (b) {
              return true;
            }
          });

          if (0 === updates.length) {
            $('.siderbar.updates').addClass('no-updates');
            return;
          }

          var uh = $('#jst-updates').html();
          var s = Handlebars.compile(uh);
          var h = s({updates: updates});
          $('.siderbar.updates .cross-tip').before(h)
        }
    );
  };

  function checkUserIdByIdentityId(identity_id, user_id, invitations) {
    var rs = R.filter(invitations, function (v) {
      if (v.identity.id === identity_id) {
        return true;
      }
    })[0];
    if (rs && rs.identity.connected_user_id === user_id) {
      return true;
    }
    return false;
  }

  // 加载新手引导
  var newbieGuide = function (data) {
    if (!data) return;
    data = Store.get('authorization');
    if (!data) return;
    var user_id = data.user_id;
    var cross_nums = +$('.user-xstats > .attended').text();

    // test
    //Store.set('newbie_guide', 0);
    var newbie_status = Store.get('newbie_guide:' + user_id);

    if (!newbie_status && cross_nums <= 3 && !$('#app-browsing-identity').length && !$('.newbie').length) {
      var s = document.createElement('script');
      var $ss = $('script#js-newbieguide');
      s.id = 'js-newbieguide';
      s.type = 'text/javascript';
      s.async = true;
      s.src = '/static/js/newbieguide/0.0.4/newbieguide.min.js?t=' + _ENV_.timestamp;
      $(s).attr('data-exists', $ss.attr('data-exists'));
      $ss.remove();
      var body = document.body;
      body.appendChild(s);
    }
  }

  // ios-app
  var iosapp = function (data) {
    var dismiss = Store.get('iosapp_dismiss');
    if (!dismiss) {
      $('.ios-app').removeClass('hide');
    }
  };

  // Defer Queue
  Bus.on('app:profile:show', function (d) {
    d.done([crossList_defe, crosses_inversation_defe, crosses_update_defe, iosapp]);
  });
  Bus.on('app:profile:identities', function (data) {
    identities_defe(data);
  });
  // 添加身份
  Bus.on('app:addidentity', function (data) {
    var jst_identity_list = $('#jst-identity-list');
    var s = Handlebars.compile(jst_identity_list.html());
    var h = s({identities: [data.identity]});
    $('.identity-list').append(h);
  });

  var $BODY = $(document.body);

  // 暂时使用jQuery 简单实现功能
  // 编辑 user/identity name etc.
  $BODY.on('dblclick.profile', '.user-name h3', function (e) {
    var value = $.trim($(this).html());
    var $input = $('<input type="text" value="' + value + '" class="pull-left" />');
    $input.data('oldValue', value);
    $(this).after($input).hide();
    $input.focusend();
    $('.xbtn-changepassword').addClass('hide');
  });

  $BODY.on('focusout.profile keydown.profile', '.user-name input', function (e) {
      var t = e.type, kc = e.keyCode;
      if (t === 'focusout' || (kc === 9 || (!e.shiftKey && kc === 13))) {
        var value = $.trim($(this).val());
        var oldValue = $(this).data('oldValue');
        $(this).hide().prev().html(value || oldValue).show();
        $(this).remove();
        !$('.settings-panel').data('hoverout') && $('.xbtn-changepassword').removeClass('hide');

        if (!value || value === oldValue) return;
        var authorization = Store.get('authorization')
          , token = authorization.token;

        Api.request('updateUser'
          , {
            type: 'POST',
            params: { token: token },
            data: {
              name: value
            }
          }
          , function (data) {
            Store.set('user', data.user);
            Bus.emit('app:page:changeusername', value);
          }
        );

      }
  });

  $BODY.on('dblclick.profile', '.identity-list li .identity > span.identityname em', function (e) {
    var that = $(this)
      , $li = that.parents('li')
      , provider = $li.data('provider')
      , status = $li.data('status')
      , editable = $li.data('editable');

    if ('twitter facebook google flickr instagram dropbox'.indexOf(provider) !== -1) {
      $li.find('.isOAuth').removeClass('hide');
    } else if (editable) {
      var value = $.trim(that.text());
      var $input = $('<input type="text" value="' + value + '" class="username-input" />');
      $input.data('oldValue', value);
      that.after($input).hide();
      $input.focusend();
    }
  });

  $BODY.on('focusout.profile keydown.profile', '.identity-list .username-input', function (e) {
      var t = e.type, kc = e.keyCode;
      if (t === 'focusout' || (kc === 9 || (!e.shiftKey && kc === 13))) {
        var value = $.trim($(this).val());
        var oldValue = $(this).data('oldValue');
        var identity_id = $(this).parents('li').data('identity-id');
        $(this).hide().prev().text(value || oldValue).show();
        $(this).remove();

        if (!value || value === oldValue) return;
        var authorization = Store.get('authorization')
          , token = authorization.token;

        Api.request('updateIdentity'
          , {
            params: { token: token },
            resources: {identity_id: identity_id},
            type: 'POST',
            data: {
              name: value
            }
          }
          , function (data) {
            var user = Store.get('user');
            for (var i = 0, l = user.identities.length; i < l; ++i) {
              if (user.identities[i].id === data.identity_id) {
                user.identities[i] = identity;
                break;
              }
            }

            Store.set('user', user);
          }
        );
      }
  });

  // RSVP Accpet
  $BODY.on('click.profile', '.xbtn-accept, .xbtn-ignore', function (e) {
    e.preventDefault();
    e.stopPropagation();
    var $that = $(this)
      , action = $that.data('action')
      , p = $that.parent()
      , crossid = p.data('id')
      , invitationid = p.data('invitationid')
      , cross_box = $('.gr-a [data-id="' + crossid + '"]')
      , exfee_id = p.data('exfeeid')
      , identity_id = p.data('identity-id')
      , name = p.data('name')
      , authorization = Store.get('authorization')
      , token = authorization.token;

    Api.request('rsvp'
      , {
        params: { token: token },
        resources: {exfee_id: exfee_id},
        type: 'POST',
        data: {
          rsvp: '[{"identity_id":' + identity_id + ', "rsvp_status": "' + action + '", "by_identity_id": ' + identity_id + '}]',
          by_identity_id: identity_id
        }
      }
      , function (data) {
        if ('ACCEPTED' === action) {
          var fs = cross_box.find('>div :first-child');
          var i = +fs.text();
          fs.text(i + 1);
          var ls = cross_box.find('>div :last-child');
          var s = ls.text();
          ls.text(s + (s ? ', ' : '') + name);
        }
        var inv;
        if (!p.parent().prev().length && !p.parent().next().length) {
          inv = p.parents('.invitations');
        }
        p.parent().remove();
        inv && inv.remove();
      }
    );
  });

  // 身份验证
  /*
  $BODY.on('click.profile.identity', '.xbtn-reverify', function (e) {
    var identity_id = $(this).parents('li').data('identity-id');
    var user = Store.get('user');
    var identity = R.filter(user.identities, function (v, i) {
      if (v.id === identity_id) return true;
    })[0];
    $(this).data('source', identity);
  });
  */

  // 添加身份
  //$BODY.on('click.profile.identity', '.xbtn-addidentity', function (e) {});

  $BODY.on('click.profile', '#profile div.cross-type', function (e) {
    e.preventDefault();
    $(this).next().toggleClass('hide').next().toggleClass('hide');
    $(this).find('span.arrow').toggleClass('lt rb');
  });

  $BODY.on('hover.profile', '.changepassword', function (e) {
    var t = e.type;
    $(this).data('hoverout', t === 'mouseleave');
    if (t === 'mouseenter') {
      $(this).addClass('xbtn-changepassword');
    } else {
      $(this).removeClass('xbtn-changepassword');
    }
  });

  /*
  $BODY.on('hover.profile', '.settings-panel', function (e) {
    var t = e.type;
    $(this).data('hoverout', t === 'mouseleave');
    if (t === 'mouseenter') {
      $(this).find('.xbtn-changepassword').removeClass('hide');
      //$(this).find('.xlabel').removeClass('hide');
    } else {
      $(this).find('.xbtn-changepassword').addClass('hide');
      //$(this).find('.xlabel').addClass('hide');
    }
  });
  */

  // more
  $BODY.on('click.profile', '.more > a', function (e) {
    e.preventDefault();
    var $e = $(this);
    var p = $e.parent();
    var cate = p.data('cate');
    var data = Store.get('authorization');
    var token = data.token;
    var user_id = data.user_id;
    var more_position = p.prev().find(' .cross-box').length;
    var more_category = cate;

    Api.request('crosslist'
      , {
        params: { token: token },
        resources: { user_id: user_id },
        data: {
          more_category: more_category,
          more_position: more_position
        }
      }
      , function (data) {
        if (data.crosses.length) {
          var h = '{{#crosses}}'
              + '{{> jst-cross-box}}'
            + '{{/crosses}}';
          var s = Handlebars.compile(h);
          p.prev().append(s(data))
          var l = R.filter(data.more, function (v) {
            if (v === cate) return true;
          });
          if (!l.length) {
            $e.remove();
          }
        }
      }
    );

  });

  // iso-app dismiss link
  $BODY.on('click.profile.iosapp', '.ios-app > .exfe-dismiss', function (e) {
    e.preventDefault();
    Store.set('iosapp_dismiss', true);
    $BODY.off('click.profile.iosapp');
    $(this).parent().fadeOut();
  });

  var Uploader = null,
      uploader = null,
      uploaderTarget = null,
      uploadSettings;
  // 头像上传控件
  // uploader
  $BODY.on('click.data-link', '.user-avatar .avatar, .identity-list > li > .avatar', function (e) {
    var $e = $(this),
        $img = $e.find('img');

    if (!$e.parent().data('editable')) { return false; }

    var identity_id = $e.parent().data('identity-id');

    var data = {};

    if (identity_id) {
      data.identity_id = identity_id;
    }

    data['80_80'] = $img[0].src;

    data['80_80'] = decodeURIComponent(data['80_80']);

    if (!data['80_80'].match(/\/80_80_/)) {
      data['80_80'] = '';
    }

    data['original'] = data['80_80'].replace(/80_80_/, 'original_');

    if (!Uploader) {
      Uploader = require('uploader').Uploader;
      uploadSettings = $.extend(true, {}, require('uploader').uploadSettings, {
        options: {
          onHideBefore: function (e) {
            uploaderTarget = null;
            uploader = null;
          }
        }
      });
    }

    if (uploader) {
      uploader.hide();
      uploader = null;
    }

    uploader = new Uploader(uploadSettings).render();
    uploader.show(data);
  });

  $BODY.dndsortable({
      delay: 300
    , wrap: true
    , list: '.identity-list'
    , items: ' > li'
    , sort: function (dragging, dropzone) {
        var $i = $(dragging)
          , $z = $(dropzone)
          , $p = $z.parent()
          , i = $i.index()
          , z = $z.index()
          , draggable = $p.data('draggable');
        if (!draggable) {
          return;
        }
        if (i > z) {
          $z.before($i);
        } else {
          $z.after($i);
        }
        var authorization = Store.get('authorization')
          , identity_order = [];
        $p
          .find('> li')
          .each(function (i, v) {
            identity_order.push($(v).data('identity-id'));
          });
        Api.request('sortIdentities'
          , {
                type: 'POST'
              , resources: { user_id: authorization.user_id }
              , params: { token: authorization.token }
              , data: {
                  identity_order: '[' + identity_order.toString() + ']'
                }
            }
          , function (data) {
              var user = Store.get('user')
                , identities = user.identities;
              var identity = identities.splice(i, 1)[0];
              identities.splice(z, 0, identity);
              Store.set('user', user);
              $p.data('draggable', true);
            }
        );
        $p.data('draggable', false);
      }
    , setData: function (elem) {
        return $(elem).data('identity-id');
    }
    , start: function (elem) {
        var $list = $('.settings-panel .identity-list')
          , $lis = $list.find('> li')
          , draggable = !!$list.data('draggable');
        if (!draggable) {
          return false;
        }
        if (1 === $lis.size()) {
          return false;
        }
        $(this).addClass('dragme');
        $('.xbtn-addidentity').addClass('hide');
        $('.identities-trash').removeClass('hide over');
      }
    , end: function () {
        $(this).removeClass('dragme');
        $('.xbtn-addidentity').removeClass('hide');
        $('.identities-trash').addClass('hide over');
      }
    //, change: function (data) { }
  });

  $BODY.on('dragenter.profile', '.trash-overlay', function (e) {
    $(this).parent().addClass('over');
    $('.icon24-trash').addClass('icon24-trash-red');
    return false;
  });

  $BODY.on('dragover.profile', '.trash-overlay', function (e) {
    e.stopPropagation();
    e.preventDefault();
    //e.originalEvent.dataTransfer.dropEffect = 'move';
    return false;
  });

  $BODY.on('dragleave.profile', '.trash-overlay', function (e) {
    $(this).parent().removeClass('over');
    $('.icon24-trash').removeClass('icon24-trash-red');
    return false;
  });

  $BODY.data('trash-overlay-deletable', true);
  $BODY.on('drop.profile', '.trash-overlay', function (e) {
    var deletable = $BODY.data('trash-overlay-deletable');
    if (!deletable) {
      return;
    }
    $BODY.data('trash-overlay-deletable', false);
    e.stopPropagation();
    e.preventDefault();
    var dt = e.originalEvent.dataTransfer;
    var identity_id = +dt.getData('text/plain');
    $(this).parent().removeClass('over');
    $('.icon24-trash').removeClass('icon24-trash-red');

    // delete identity
    function _deleteIdentity(identity_id) {
      var authorization = Store.get('authorization')
        , token = authorization.token;
      var defer = Api.request('deleteIdentity'
        , {
          type: 'POST',
          params: { token: token },
          data: {
            identity_id: identity_id
          }
        },
        function (data) {
          var user = Store.get('user')
            , identities = user.identities;
          R.some(identities, function (v, i) {
            if (v.id === identity_id) {
              identities.splice(i, 1);
              return true;
            }
          });
          Store.set('user', user);
          $('.identity-list > li[data-identity-id="' + identity_id + '"]').remove();
        },
        function (data) {
          var meta = data && data.meta;
          if (meta
              && meta.code === 401
              && meta.errorType === 'authenticate_timeout') {

            var $d = $('<div data-widget="dialog" data-dialog-type="authentication" data-destory="true" class="hide"></div>');
            $('#app-tmp').append($d);
            var e = $.Event('click.dialog.data-api');
            e._data = {callback: function () { _deleteIdentity(identity_id); }};
            $d.trigger(e);
          }
        }
      );
      defer.always(function () {
        $BODY.data('trash-overlay-deletable', true);
      });
    }

    _deleteIdentity(identity_id);

    return false;
  });
});

/*jshint -W003*/

define('user', function (require) {
  "use strict";

  var $ = require('jquery'),
      R = require('rex'),
      Api = require('api'),
      Bus = require('bus'),
      Util = require('util'),
      Store = require('store'),
      Handlebars = require('handlebars');

  // `status` 可以跳转到 profile
  var signIn = function (token, user_id, redirect, block_redirect) {
    getUser(token, user_id
      , function (data) {
          var last_external_username = Store.get('last_external_username')
            , identity
            , user = data.user;

          if (last_external_username) {
            identity = R.find(user.identities, function (v) {
              var external_username = Util.printExtUserName(v);

              if (last_external_username === external_username) {
                return true;
              }
            });
          }

          if (!identity) {
            identity = user.identities[0];
            Store.set('last_external_username', Util.printExtUserName(identity));
          }

          Store.set('authorization', { token: token, user_id: user_id });
          Store.set('user', user);
          Store.set('lastIdentity', identity);

          // 刷新登录列表
          refreshIdentities(user.identities);

          block_redirect = !$('.modal-su').size();
          if (block_redirect) {
            // fobidden or invite 页面，登录后刷新
            var $fobidden = $('#forbidden')
              , $invite = $('#invite');
            if ($fobidden.size() || $invite.size()) {
              window.location.reload();
              return;
            }

            // cleanup `browsing identity` DOM
            var $browsing = $('#app-browsing-identity');
            if ($browsing.size() && $browsing.attr('data-page') === 'profile') {
              $browsing.remove();
              window.location.href = '/';
              return;
            }

            var hash = decodeURIComponent(window.location.hash);
            if (redirect || (('' === hash
                            || /^#?(invalid)?/.test(hash))
                          && !/^#gather/.test(hash)
                          && !/^#!/.test(hash)
                            )
              ) {
              setTimeout(function () {
                window.location.hash = Util.printExtUserName(user.identities[0]);
              }, 89 / 2);
              return;
            }
          }

          Bus.emit('app:page:usermenu', true);

          Bus.emit('app:usermenu:updatenormal', user);

          Bus.emit('app:usermenu:crosslist'
            , token
            , user_id
          );

          Bus.emit('app:user:signin:after', user);
        }
    );
  }

  // --------------------------------------------------------------------------
  // User Sign In
  Bus.on('app:user:signin', signIn);

  var getUser = function (token, user_id, done, fail) {
    // return `Deferred Object`
    Api.request('getUser',
      {
        params: { token: token },
        resources: { user_id: user_id }
      }
      , done || function () {}
      , fail || function () {}
    );
  }

  // --------------------------------------------------------------------------
  // Get User
  Bus.on('app:api:getuser', getUser);

  /*
  function getCrossList(token, user_id, done, fail) {
    Api.request('crosslist',
      {
        params: { token: token },
        resources: { user_id: user_id }
      }
      , done || function (data) {
          var crosses = data.crosses
            , len = crosses.length;

          if (0 === len) { return; }

            // 显示最近5个已确认的 `x`
          var limit = 5
            , list;

          R.map(crosses, function (v) {
            if (v.exfee
                && v.exfee.invitations
                && v.exfee.invitations.length) {
              var t = R.filter(v.exfee.invitations, function (v2) {
                if ('ACCEPTED' === v2.rsvp_status
                    && user_id === v2.identity.connected_user_id) {
                  return true;
                }
              });

              if (t.length) {
                // lazy
                !list && (list = []);
                list.push(v);
              }
            }
          });

          if (!list) { return; }

          list = list.slice(0, limit);

          if (0 === list.length) { return; }

          var now = +new Date()
            , threeDays = now + 3 * 24 * 60 * 60 * 1000
            , n3 = now + 3 * 60 * 60 * 1000
            , n24 = now + 24 * 60 * 60 * 1000;


          list = R.filter(list, function (v) {
            var beginAt = v.time.begin_at,
                dt = new Date(beginAt.date.replace(/\-/g, '/') + ' ' + beginAt.time).getTime();

            if (now <= dt && dt <= threeDays) {
              return true;
            }
          });

          if (0 === list.length) { return; }

          list.reverse();

          Handlebars.registerHelper('upcoming', function () {
            var s = '<li>'
              , beginAt = this.time.begin_at
              , dt = new Date(beginAt.date.replace(/\-/g, '/') + ' ' + beginAt.time).getTime();

            if (now <= dt && dt < n3) {
              s = '<li class="tag"><i class="icon10-now"></i>';
            } else if (n3 <= dt && dt < n24) {
              s = '<li class="tag"><i class="icon10-24hr"></i>';
            }

            s += '<a data-link data-id="'
                  + this.id +
                '" href="/#!'
                  + this.id +
                '">' + Handlebars.Utils.escapeExpression(this.title)
                  + '</a></li>'

            return new Handlebars.SafeString(s);
          });

          var tpl = '<div>Upcoming:</div>'
                + '<ul class="unstyled crosses">'
                + '{{#each this}}'
                + '{{upcoming}}'
                + '{{/each}}'
                + '</ul>'

          var html = Handlebars.compile(tpl)(list);
          $('#app-user-menu .user-panel .body').append(html);
        }
      , fail || function () {}
    );
  }
  */


  // --------------------------------------------------------------------------
  // update user menu
  Bus.on('app:usermenu:updatenormal', updateNormalUserMenu);
  Bus.on('app:usermenu:updatebrowsing', updateBrowsingUserMenu);


  // Update User-Menu
  var userMenuTpls = {
      normal: ''
        + '<div class="dropdown-menu user-panel">'
          + '<div class="header">'
            + '<div class="meta">'
              + '<a class="pull-right avatar" href="{{profileLink}}" data-link>'
                + '<img width="40" height="40" alt="" src="{{avatar_filename}}" />'
              + '</a>'
              + '<a class="attended" href="{{profileLink}}" data-link>'
                + '<span class="attended-nums">{{cross_quantity}}</span>'
                + '<span class="attended-x"><em class="x">·X·</em> attended</span>'
              + '</a>'
            + '</div>'
          + '</div>'
          + '<div class="body">'
            + '{{#unless password}}'
            + '<div class="merge set-up" data-widget="dialog" data-dialog-type="setpassword">'
              + '<a href="#">Set Up</a> your <span class="x-sign">EXFE</span> password'
            + '</div>'
            + '{{/unless}}'
            + '{{#if verifying}}'
            + '<div class="merge verify" data-dialog-type="verification_{{identities.[0].provider}}" data-widget="dialog" data-identity-id="{{identities.[0].id}}">'
              + '<strong>Verify</strong> your identity'
            + '</div>'
            + '{{/if}}'
            + '<div class="list"></div>'
          + '</div>'
          + '<div class="footer">'
            + '<a href="/#gather" class="xbtn xbtn-gather" id="js-gatherax" data-link>Gather a <span class="x">·X·</span></a>'
            + '<div class="spliterline"></div>'
            + '<div class="actions">'
              + '<a href="#" class="pull-right" id="app-signout">Sign out</a>'
              //+ '<a href="#">Settings</a>'
            + '</div>'
          + '</div>'
        + '</div>'

    , browsing_identity: ''
        + '<div class="dropdown-menu user-panel">'
          + '<div class="header">'
            + '<h2>Browsing Identity</h2>'
          + '</div>'
          + '<div class="body">'
            + '{{#with browsing}}'
            + '<div>You are browsing this page as {{capitalize identities.[0].provider}} identity:</div>'
            + '<div class="identity">'
              + '<span class="pull-right avatar alt40">'
                + '<img src="{{identities.[0].avatar_filename}}" width="20" height="20" alt="" />'
              + '</span>'
              + '<i class="icon16-identity-{{identities.[0].provider}}"></i>'
              + '<span class="oblique">{{identities.[0].external_username}}</span>'
            + '</div>'
            + '{{#if ../setup}}'
            //+ '<div class="merge set-up" data-source="{{identities.[0].external_username}}" data-widget="dialog" data-dialog-type="identification" data-dialog-tab="d02">'
            + '<div class="merge set-up" data-user-action="setup" data-widget="dialog" data-dialog-type="setup_{{identities.[0].provider}}">'
              + '<a href="#">Set Up</a> new <span class="x-sign">EXFE</span> account with the browsing identity.'
            + '</div>'
            + '{{/if}}'
            + '{{/with}}'
            //+ '{{#if normal}}'
            //+ '<div class="spliterline"></div>'
            //+ '<div class="merge">'
              //+ '<a href="#">Merge</a> with existing identities in your current account:'
            //+ '</div>'
              //+ '{{#each normal.identities}}'
              //+ '{{#ifConnected status}}'
              //+ '<div class="identity">'
                //+ '<span class="pull-right avatar alt40">'
                  //+ '<img src="{{avatar_filename}}" width="20" height="20" alt="" />'
                //+ '</span>'
                //+ '<i class="icon16-identity-{{provider}}"></i>'
                //+ '<span>{{external_username}}</span>'
              //+ '</div>'
              //+ '{{/ifConnected}}'
              //+ '{{/each}}'
            //+ '{{/if}}'
            + '{{#unless setup}}'
            + '<div class="orspliter hide">or</div>'
            + '<div class="merge" data-user-action="signin" data-source="{{browsing.identities.[0].external_username}}" data-widget="dialog" data-dialog-type="identification" data-dialog-tab="d00">'
              + '<a href="#">Sign In</a> with browsing identity<br />'
              + '{{#if normal}}'
                + '(sign out from current account)'
              + '{{/if}}'
            + '</div>'
            + '{{/unless}}'
          + '</div>'
          + '<div class="footer">'
          + '</div>'
        + '</div>'
    };

  /**
   *
   * @param: type 'normal' / 'browsing_identity'
   */

  // 添加 `ifVerifying` 判断
  Handlebars.registerHelper('ifConnected', function (status, options) {
    return Handlebars.helpers['if'].call(this, 'CONNECTED' === status, options);
  });

  function updateNormalUserMenu(user) {
    var $appUserMenu = $('#app-user-menu')
      , $appUserName = $('#app-user-name')
      , $nameSpan = $appUserName.find('span')
      , $dropdownWrapper = $appUserMenu.find('.dropdown-wrapper')
      , $userPanel = $dropdownWrapper.find('.user-panel')
      , tplFun
      , profileLink = '/#' + Util.printExtUserName(user.identities[0]);

    $('#app-browsing-identity').remove();

    $appUserName.attr('href', profileLink);

    $nameSpan
      .text(user.name || user.nickname)
      .removeClass('browsing-identity');

    tplFun = Handlebars.compile(userMenuTpls.normal);

    $userPanel.size() && $userPanel.remove();

    user.profileLink = profileLink;

    // 新身份未验证时，显示提示信息
    user.verifying = 1 === user.identities.length && 'VERIFYING' === user.identities[0].status;

    $dropdownWrapper.append(tplFun(user));

    delete user.profileLink;
    delete user.verifying;
  }

  // `sign in` or `set up` 只显示其一
  function updateBrowsingUserMenu(data) {
    var $appUserMenu = $('#app-user-menu')
      , $appUserName = $('#app-user-name')
      , $nameSpan = $appUserName.find('span')
      , $dropdownWrapper = $appUserMenu.find('.dropdown-wrapper')
      , $userPanel = $dropdownWrapper.find('.user-panel')
      , browsing_user = data.browsing
      , tplFun;

    data.browsing.isBrowsing = true;

    $('#app-browsing-identity').remove();
    $('#app-tmp').append(
      $('<div id="app-browsing-identity">')
        .data('settings', data)
        .attr('data-widget', 'dialog')
        .attr('data-dialog-type', 'browsing_identity')
        .attr('data-token-type', data.tokenType)
        .attr('data-token', data.originToken)
        .attr('data-page', data.page)
        .attr('data-action', data.action)
        .attr('data-read-only', data.readOnly)
    );


    $appUserName.attr('href', location.href);

    $nameSpan
      .html('Browsing as: <em>' + (browsing_user.name || browsing_user.nickname) + '</em>')
      .addClass('browsing-identity');

    tplFun = Handlebars.compile(userMenuTpls.browsing_identity);

    $userPanel.size() && $userPanel.remove();

    $dropdownWrapper.append(tplFun(data));

    $('#app-user-menu')
      .find('.set-up')
      .data('source', {
        browsing_user: browsing_user,
        identity: browsing_user.identities[0],
        originToken: data.originToken,
        tokenType: data.tokenType,
        user_name: data.user_name,
        forward: data.forward,
        page: data.page
      }
    );
  }

  Bus.on('app:page:home', switchPage);
  function switchPage(isHome, nocleanup) {
    isHome = !!isHome;
    var $BODY = $(document.body)
      , $appMenubar = $('#app-menubar')
      , $appMain = $('#app-main');

    // nocleanup === false, no clean up
    if (!nocleanup) {
      $appMain.empty();
    }

    $BODY.toggleClass('hbg', isHome);
    $appMenubar.toggleClass('hide', isHome);
  }

  Bus.on('app:page:usermenu', switchUserMenu);
  function switchUserMenu(signed) {
    signed = !!signed;

    var $appUserMenu = $('#app-user-menu')
      , $appSignin = $('#app-signin');

    $appUserMenu.toggleClass('hide', !signed);
    $appSignin.toggleClass('hide', signed);
  }

  // update `usermenu` user-anme
  Bus.on('app:page:changeusername', function (value) {
    $('#app-user-name').find('span').text(value);
  });

  function refreshIdentities(identities) {
    var _identities = Store.get('identities') || []
      // clone identities
      , cidentities = _identities.slice(0);

    if (0 === identities.length) {
      _identities = identities;
    }
    else {
      R.each(identities, function (v) {
        var has = R.find(cidentities, function (v2) {
          if (v2.id === v.id) {
            return true;
          }
        });

        if (!has) {
          _identities.push(v);
        }
      });
    }

    // 身份搜索
    Store.set('identities', _identities);
  }

});

define(function(require) {

ExfeUtilities = {

    trim : function(string) {
        return string ? string.replace(/^\s+|\s+$/g, '') : '';
    },


    escape : function(html, encode) {
        return html
              .replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;')
              .replace(/"/g, '&quot;')
              .replace(/'/g, '&#39;');
    },


    clone : function(variable) {
        switch (Object.prototype.toString.call(variable)) {
            case '[object Object]':       // Object instanceof Object
                var variableNew = {};
                for (var i in variable) {
                    variableNew[i] = this.clone(variable[i]);
                }
                break;
            case '[object Array]':        // Object instanceof Array
                variableNew = [];
                for (i in variable) {
                    variableNew.push(this.clone(variable[i]));
                }
                break;
            default:                      // typeof Object === 'function' || etc
                variableNew = variable;
        }
        return variableNew;
    },


    getTimezone : function() {
        // W3C : 'Fri Jul 06 2012 12:28:23 GMT+0800 (CST)'
        // IE  : 'Fri Jul 6 12:28:23 UTC+0800 2012'
        var rawTimeStr  = Date().toString(),
            numTimezone = rawTimeStr.replace(/^.+([+-]\d{2})(\d{2}).+$/i, '$1:$2'),
            strTimezone = rawTimeStr.replace(/^.*\(([a-z]*)\).*$/i, '$1');
            strTimezone = strTimezone === 'UTC' || strTimezone === 'GMT' ? '' : strTimezone;
        return numTimezone + (strTimezone === rawTimeStr ? '' : (' ' + strTimezone));
    },


    parsePlacestring : function(strPlace) {
        var rawPlace = strPlace ? strPlace.split(/\r\n|\r|\n/g) : [],
            arrPlace = [];
        for (var i = 0; i < rawPlace.length; i++) {
            if (rawPlace[i]) {
                arrPlace.push(rawPlace[i]);
            }
        }
        var title = arrPlace.shift();
        title = title ? title : '';
        return {
            title : title, description : arrPlace.join('\r'), lng : '', lat : '',
            provider : '', external_id : '', id : Cross.place.id, type : 'Place'
        };
    }

};



ExfeeCache = {

    identities       : [],

    tried_key        : {},

    updated_identity : [],


    init : function() {
        var cached_user_id = Store.get('exfee_cache_user_id'),
            identities     = Store.get('exfee_cache_identities');
        if (!User || !User.id || !cached_user_id
         || User.id !== cached_user_id || !identities) {
            identities  = [];
        }
        this.identities = [];
        for (var i = 0; i < identities.length; i++) {
            if (identities[i].external_username) {
                this.identities.push(identities[i]);
            }
        }
    },


    saveCache : function() {
        if (User && User.id) {
            Store.set('exfee_cache_user_id',    User.id);
            Store.set('exfee_cache_identities', this.identities);
        }
    },


    search : function(key) {
        var matchString   = function(key, subject) {
            return subject
                 ? subject.toLowerCase().indexOf(key) !== -1
                 : false;
        };
        var matchIdentity = function(key, identity) {
            return matchString(key, identity.external_id)
                || matchString(key, identity.external_username)
                || matchString(key, identity.name);
        };
        var arrCatched = [];
        key = key.toLowerCase();
        for (var i = 0; i < this.identities.length; i++) {
            if (matchIdentity(key, this.identities[i])
             && !ExfeeWidget.isMyIdentity(this.identities[i])
             &&  ExfeeWidget.checkExistence(this.identities[i]) === false) {
                arrCatched.push(ExfeUtilities.clone(this.identities[i]));
            }
        }
        return arrCatched;
    },


    cacheIdentities : function(identities, unshift) {
        identities = ExfeUtilities.clone(identities);
        for (var i = 0; i < identities.length; i++) {
            for (var j = 0; j < this.identities.length; j++) {
                if (ExfeeWidget.compareIdentity(identities[i], this.identities[j])) {
                    this.identities.splice(j, 1);
                }
            }
            if (unshift) {
                this.identities.unshift(identities[i]);
            } else {
                this.identities.push(identities[i]);
            }
            if (this.identities.length > 233) {
                this.identities.splice(233);
            }
            this.updated_identity.push(identities[i]);
        }
        this.saveCache();
    },


    fetchIdentity : function(identity) {
        for (var i = 0; i < this.identities.length; i++) {
            if (ExfeeWidget.compareIdentity(identity, this.identities[i])) {
                return ExfeUtilities.clone(this.identities[i]);
            }
        }
        return null;
    }

};



ExfeeWidget = {

    dom_id           : '',

    rsvp_status      : ['Pending', 'Accepted', 'Unavailable', 'Interested'],

    editable         : false,

    complete_timer   : 0,

    complete_key     : '',

    complete_exfee   : [],

    complete_request : 0,

    selected         : '',

    completing       : false,

    callback         : function() {},

    last_inputed     : {},

    base_info_timer  : 0,

    api_url          : '',

    focus            : {},

    soft_limit       : 12,

    hard_limit       : 50,


    make : function(dom_id, editable, callback) {
        this.dom_id   = dom_id;
        this.editable = editable;
        this.callback = callback;
        $('#' + this.dom_id + ' .total').css('visibility',       'hidden');
        $('#' + this.dom_id + ' .avatar .rb').hide();
        $('#' + this.dom_id).bind(
            'mouseenter mouseleave',
            function(event) {
                switch (event.type) {
                    case 'mouseenter':
                        $('#' + dom_id + ' .total').css('visibility', 'visible');
                        $('#' + dom_id + ' .avatar .rb').show();
                        if (!readOnly) {
                        }
                        break;
                    case 'mouseleave':
                        if (!ExfeeWidget.focus[dom_id + '-input']
                         && $('#' + dom_id + ' .exfee-input').val() === '') {
                            $('#' + dom_id + ' .total').css('visibility',       'hidden');
                            $('#' + dom_id + ' .avatar .rb').hide();
                            ExfeeWidget.showLimitWarning(false);
                        }
                }
            }
        );
        $('#' + this.dom_id + ' .input-xlarge').bind(
            'focus keydown blur', this.inputEvent
        );
        $('#' + this.dom_id + ' .pointer').bind('click', function() {
            ExfeeWidget.checkInput($('#' + dom_id + ' .input-xlarge'), true);
        });
        $(document).on('mousedown', '#' + this.dom_id + ' .thumbnails > li.identity > .avatar', function (e) {
            ExfeeWidget.showPanel(this.parentNode);
          }
        );
        this.complete_timer = setInterval(
           "ExfeeWidget.checkInput($('#" + this.dom_id + " .input-xlarge'))",
           50
        );
        return ExfeUtilities.clone(this);
    },


    showAll : function(skipMe, fadeUnconfirmed) {
        var intAccepted = 0,
            intTotal    = 0,
            order       = ['ACCEPTED', 'INTERESTED', 'NORESPONSE', 'DECLINED', 'IGNORED'];
        $('#' + this.dom_id + ' .thumbnails').html('');
        for (var j = 0; j < order.length; j++) {
            for (var i = 0; i < Exfee.invitations.length; i++) {
                if (Exfee.invitations[i].rsvp_status === order[j]) {
                    var intCell = Exfee.invitations[i].mates + 1;
                    if (!skipMe || !ExfeeWidget.isMyIdentity(Exfee.invitations[i].identity)) {
                        this.showOne(Exfee.invitations[i], fadeUnconfirmed);
                    }
                    if (Exfee.invitations[i].rsvp_status === 'ACCEPTED') {
                        intAccepted += intCell;
                    }
                    intTotal += intCell;
                }
            }
        }
        $('#' + this.dom_id + ' .attended').html(intAccepted);
        $('#' + this.dom_id + ' .total').html('of ' + intTotal);
    },


    showOne : function(invitation, fadeUnconfirmed) {
        var icons = {ACCEPTED   : 'icon14-rsvp-accepted-blue',
                     DECLINED   : 'icon14-rsvp-declined',
                     INTERESTED : 'icon14-rsvp-interested',
                     NORESPONSE : 'icon14-rsvp-noresponse'};
        $('#' + this.dom_id + ' .thumbnails').append(
            '<li class="identity" id="' + invitation.identity.id
          +              '" provider="' + invitation.identity.provider.toLowerCase()
          +           '" external_id="' + invitation.identity.external_id.toLowerCase()
          +     '" external_username="' + invitation.identity.external_username.toLowerCase() + '">'
          +     '<span class="pointer avatar'
          +         (fadeUnconfirmed && invitation.rsvp_status !== 'ACCEPTED' ? ' unconfirmed' : '') + '">'
          +         '<img src="' + invitation.identity.avatar_filename + '" alt="' + invitation.identity.external_id + '" width="50" height="50" />'
          +         '<i class="rt' + (invitation.host ? ' icon10-host-h' : '') + '"></i>'
          +         '<i class="icon10-plus-' + invitation.mates + ' lt"></i>'
          +        (this.dom_id === 'cross-exfee'
          ?        ('<span class="rb rb-bg' + (ExfeeWidget.focus[this.dom_id + '-input'] ? '' : ' hide') + '">'
          +             '<i class="' + icons[invitation.rsvp_status] + '"></i>'
          +         '</span>') : '')
          +     '</span>'
          +     '<div class="identity-name">' + invitation.identity.name + '</div>'
          + '</li>'
        );
    },


    showLimitWarning : function(display) {
        $('.exfee-warning').toggleClass('hide', display === false);
    },


    showTip : function(target) {
        var objTarget         = $(target),
            objOffset         = objTarget.offset(),
            objIdentity       = {},
            id                = objTarget.attr('id'),
            provider          = objTarget.attr('provider'),
            external_id       = objTarget.attr('external_id'),
            external_username = objTarget.attr('external_username');
        if (id = ~~id) {
            objIdentity.id                = id;
        }
        if (provider) {
            objIdentity.provider          = provider;
        }
        if (external_id) {
            objIdentity.external_id       = external_id;
        }
        if (external_username) {
            objIdentity.external_username = external_username;
        }
        var objInvitation = this.getInvitationByIdentity(objIdentity);
        ExfeePanel.showTip(objInvitation, objOffset.left, objOffset.top + 50);
    },


    showPanel : function(target) {
        var objTarget         = $(target),
            objOffset         = objTarget.offset(),
            objIdentity       = {},
            id                = objTarget.attr('id'),
            provider          = objTarget.attr('provider'),
            external_id       = objTarget.attr('external_id'),
            external_username = objTarget.attr('external_username');
        if (id = ~~id) {
            objIdentity.id                = id;
        }
        if (provider) {
            objIdentity.provider          = provider;
        }
        if (external_id) {
            objIdentity.external_id       = external_id;
        }
        if (external_username) {
            objIdentity.external_username = external_username;
        }
        var objInvitation = this.getInvitationByIdentity(objIdentity);
        ExfeePanel.showPanel(objInvitation, objOffset.left + 5, objOffset.top + 5);
    },


    compareIdentity : function(identity_a, identity_b) {
        if (identity_a.id && identity_b.id && identity_a.id === identity_b.id) {
            return true;
        }
        if (ExfeUtilities.trim(identity_a.provider).toLowerCase()
        === ExfeUtilities.trim(identity_b.provider).toLowerCase()) {
            if (identity_a.external_id && identity_b.external_id
             && ExfeUtilities.trim(identity_a.external_id).toLowerCase()
            === ExfeUtilities.trim(identity_b.external_id).toLowerCase()) {
                return true;
            }
            if (identity_a.external_username && identity_b.external_username
             && ExfeUtilities.trim(identity_a.external_username).toLowerCase()
            === ExfeUtilities.trim(identity_b.external_username).toLowerCase()) {
                return true;
            }
        }
        return false;
    },


    checkExistence : function(identity) {
        for (var i = 0; i < Exfee.invitations.length; i++) {
            if (this.compareIdentity(Exfee.invitations[i].identity, identity)) {
                return i;
            }
        }
        return false;
    },


    addExfee : function(identity, host, rsvp) {
        var items = ExfeeWidget.summary().items;
        if (items < ExfeeWidget.hard_limit && identity) {
            var idx = this.checkExistence(identity);
            if (idx === false) {
                Exfee.invitations.push({
                    identity    : ExfeUtilities.clone(identity),
                    rsvp_status : rsvp ? rsvp : 'NORESPONSE',
                    host        : !!host,
                    mates       : 0
                });
                this.callback();
            } else if (Exfee.invitations[idx].rsvp_status === 'REMOVED') {
                Exfee.invitations[idx].rsvp_status = 'NORESPONSE';
                this.callback();
            }
            return true;
        }
        return false;
    },


    delExfee : function(identity) {
        this.rsvpExfee(identity, 'REMOVED');
    },


    rsvpExfee : function(identity, rsvp) {
        var idx = this.checkExistence(identity);
        if (idx !== false) {
            Exfee.invitations[idx].rsvp_status = rsvp;
            Exfee.invitations[idx].by_identity = ExfeUtilities.clone(curIdentity);
            var refresh = false;
            if (rsvp === 'REMOVED' && curIdentity
             && ExfeeWidget.compareIdentity(Exfee.invitations[idx].identity, curIdentity)) {
                refresh = true;
            }
            this.callback(refresh);
        }
    },


    changeMates: function(identity, mates) {
        var idx = this.checkExistence(identity);
        if (idx !== false) {
            if (mates > 9) {
                mates = 9;
            }
            if (mates < 0) {
                mates = 0;
            }
            Exfee.invitations[idx].mates = mates;
            this.callback();
        }
    },


    rsvpMe : function(rsvp) {
        this.rsvpExfee(curIdentity, rsvp);
    },


    summary : function() {
        var rtnResult = {items : 0, accepted : 0, total : 0, accepted_invitations : []};
        for (var i = 0; i < Exfee.invitations.length; i++) {
            if (Exfee.invitations[i].rsvp_status === 'REMOVED'
             || Exfee.invitations[i].rsvp_status === 'NOTIFICATION') {
                continue;
            }
            rtnResult.items++;
            var num = 1 + Exfee.invitations[i].mates;
            rtnResult.total += num;
            if (Exfee.invitations[i].rsvp_status === 'ACCEPTED') {
                rtnResult.accepted += num;
                rtnResult.accepted_invitations.push(Exfee.invitations[i]);
            }
        }
        return rtnResult;
    },


    getUTF8Length : function(string) {
        var length = 0;
        if (string) {
            for (var i = 0; i < string.length; i++) {
                charCode = string.charCodeAt(i);
                if (charCode < 0x007f) {
                    length += 1;
                } else if ((0x0080 <= charCode) && (charCode <= 0x07ff)) {
                    length += 2;
                } else if ((0x0800 <= charCode) && (charCode <= 0xffff)) {
                    length += 3;
                }
            }
        }
        return length;
    },


    cutLongName : function(string) {
        string = string ? string.replace(/[^0-9a-zA-Z_\u4e00-\u9fa5\ \'\.]+/g, ' ') : '';
        while (this.getUTF8Length(string) > 30) {
            string = string.substring(0, string.length - 1);
        }
        return string;
    },


    parseAttendeeInfo : function(string) {
        string = ExfeUtilities.trim(string);
        var objIdentity = {
            id                : 0,
            name              : '',
            external_id       : '',
            external_username : '',
            provider          : '',
            type              : 'identity'
        }
        if (/^[^@]*<[a-zA-Z0-9!#$%&\'*+\\\/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&\'*+\\\/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?>$/.test(string)) {
            var iLt = string.indexOf('<'),
                iGt = string.indexOf('>');
            objIdentity.external_id       = ExfeUtilities.trim(string.substring(++iLt, iGt));
            objIdentity.external_username = objIdentity.external_id;
            objIdentity.name              = ExfeUtilities.trim(this.cutLongName(ExfeUtilities.trim(string.substring(0, iLt)).replace(/^"|^'|"$|'$/g, '')));
            objIdentity.provider          = 'email';
        } else if (/^[a-zA-Z0-9!#$%&\'*+\\\/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&\'*+\\\/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$/.test(string)) {
            objIdentity.external_id       = string;
            objIdentity.external_username = string;
            objIdentity.name              = ExfeUtilities.trim(this.cutLongName(string.split('@')[0]));
            objIdentity.provider          = 'email';
        } else if (/^@[a-z0-9_]{1,15}$|^@[a-z0-9_]{1,15}@twitter$|^[a-z0-9_]{1,15}@twitter$/i.test(string)) {
            objIdentity.external_id       = '';
            objIdentity.external_username = string.replace(/^@|@twitter$/ig, '');
            objIdentity.name              = objIdentity.external_username;
            objIdentity.provider          = 'twitter';
        } else if (/^[a-z0-9\.]{5,}@facebook$/i.test(string)) {
        // https://www.facebook.com/help/?faq=105399436216001#What-are-the-guidelines-around-creating-a-custom-username?
            objIdentity.external_id       = '';
            objIdentity.external_username = string.replace(/@facebook$/ig, '');
            objIdentity.name              = objIdentity.external_username;
            objIdentity.provider          = 'facebook';
        } else {
            return null;
        }
        objIdentity.avatar_filename = encodeURI(ExfeeWidget.api_url + '/avatar/default?name=' + objIdentity.name);
        return objIdentity;
    },


    checkComplete : function(objInput, key, tryPhonePanel) {
        this.showCompleteItems(objInput, key, key ? ExfeeCache.search(key) : [], tryPhonePanel);
        this.ajaxComplete(objInput, key);
    },


    displayIdentity : function(identity, shortStyle) {
        switch (identity ? identity.provider : '') {
            case 'email':
            case 'phone':
                if (/^\+1.{10}$/.test(identity.external_id)) {
                    return identity.external_id.replace(/^(\+1)(.{3})(.{3})(.{4})$/, '$1 ($2) $3-$4');
                } else if (/^\+86.{11}$/.test(identity.external_id)) {
                    return identity.external_id.replace(/^(\+86)(.{3})(.{4})(.{4})$/, '$1 $2 $3 $4');
                }
                return identity.external_id;
            case 'twitter':
                return '@' + identity.external_username + (shortStyle ? '' : '@twitter');
            case 'facebook':
                return identity.external_username + (shortStyle ? '' : '@facebook');
            default:
                return '';
        }
    },


    displayCompletePanel : function(objInput, display) {
        if ((this.completing = display)) {
            var ostInput = objInput.offset();
            $('.ids-popmenu').css({
                'left'       :  ostInput.left + 'px',
                'top'        : (ostInput.top  + objInput.height() + 10) + 'px',
                'max-height' : '352px',
                'overflow-y' : 'scroll'
            }).slideDown(50);
        } else {
            $('.ids-popmenu').slideUp(50);
        }
    },


    showCompleteItems : function(objInput, key, identities, tryPhonePanel) {
        key = key.replace(/^\+/, '');
        var highlight = function(string) {
            var objRe = new RegExp('(' + key + ')');
            return string ? string.replace(objRe, '<span class="highlight">$1</span>') : '';
        };
        var objCompleteList  = $('.ids-popmenu > ol'),
            strCompleteItems = '';
        key = key ? key.toLowerCase() : '';
        if (ExfeeWidget.complete_key !== key) {
            ExfeeWidget.complete_exfee = [];
            objCompleteList.html('');
        }
        ExfeeWidget.complete_key = key;
        for (var i = 0; i < identities.length; i++) {
            var shown = false;
            for (var j = 0; j < ExfeeWidget.complete_exfee.length; j++) {
                if (this.compareIdentity(ExfeeWidget.complete_exfee[j], identities[i])) {
                    shown = true;
                    break;
                }
            }
            if (shown) {
                continue;
            }
            var index = ExfeeWidget.complete_exfee.push(ExfeUtilities.clone(identities[i])) - 1;
            var provider = identities[i].provider;
            strCompleteItems += '<li' + (index ? '' : ' class="active"') + '>'
                              +   '<span class="pull-left avatar">'
                              +     '<img src="' + identities[i].avatar_filename + '" alt="" width="40" height="40">'
                              +     '<span class="rb"><i class="icon16-identity-' + identities[i].provider + '"></i></span>'
                              +   '</span>'
                              +   '<div class="identity">'
                              +     '<div class="name">' + highlight(identities[i].name) + '</div>'
                              +     '<div>'
                              +       '<span class="oblique external">' + highlight(this.displayIdentity(identities[i], true)) + '</span>'
                              +       (provider === 'email' || provider === 'phone' ? '' :  ' <span class="provider">@' + provider.charAt(0).toUpperCase() + provider.substr(1) + '</span>')
                              +     '</div>'
                              +   '</div>'
                              + '</li>';
        }
        objCompleteList.append(strCompleteItems);
        this.displayCompletePanel(
            objInput,
            key && ExfeeWidget.complete_exfee.length
        );
        var phone = key.replace(/\-|\(|\)|\ /g, '');
        if (phone
         && tryPhonePanel
         && !ExfeeWidget.complete_exfee.length
         && !$('#phone-panel').length
         && /^\+?[0-9]{5,15}$/.test(phone)) {
            var PhonePanel = require('phonepanel');
            var phonepanel = new PhonePanel({
                options: {
                    parentNode: $('#app-tmp')
                  , srcNode: objInput
                }
              , add: function (identity) {
                    ExfeeWidget.addExfee(identity);
                    objInput.val('');
                }
            });
            phonepanel.show();
        }
    },


    isMyIdentity : function(identity) {
        return curIdentity
            && (this.compareIdentity(identity, curIdentity)
             || identity.connected_user_id === curIdentity.connected_user_id);
    },


    getInvitationByIdentity : function(identity) {
        for (var i = 0; i < Exfee.invitations.length; i++) {
            if (this.compareIdentity(Exfee.invitations[i].identity, identity)) {
                return Exfee.invitations[i];
            }
        }
        return null;
    },


    getMyInvitation : function() {
        return curIdentity ? this.getInvitationByIdentity(curIdentity) : null;
    },


    ajaxComplete : function(objInput, key) {
        if (!User || !key || typeof ExfeeCache.tried_key[key] !== 'undefined') {
            return;
        }
        if (this.complete_request) {
            this.complete_request.abort();
        }
        this.complete_request = Api.request(
            'complete',
            {type : 'get', data : {key : key}},
            function(data) {
                var caughtIdentities = [];
                for (var i = 0; i < data.identities.length; i++) {
                    if (!ExfeeWidget.isMyIdentity(data.identities[i])
                     &&  ExfeeWidget.checkExistence(data.identities[i]) === false) {
                        caughtIdentities.push(data.identities[i]);
                    }
                    ExfeeCache.cacheIdentities(caughtIdentities);
                    ExfeeCache.tried_key[key] = true;
                    if (ExfeeWidget.complete_key === key) {
                        ExfeeWidget.showCompleteItems(objInput, key, caughtIdentities);
                    }
                }
            }
        );
    },


    ajaxIdentity : function(identities) {
        if (identities && identities.length) {
            Api.request(
                'getIdentity',
                {type      : 'POST',
                 data      : {identities : JSON.stringify(identities)}},
                function(data) {
                    var caughtIdentities = [];
                    for (var i = 0; i < data.identities.length; i++) {
                        var idx = ExfeeWidget.checkExistence(data.identities[i]);
                        if (idx !== false) {
                            Exfee.invitations[idx].identity = data.identities[i];
                        }
                        caughtIdentities.push(data.identities[i]);
                    }
                    if (caughtIdentities.length) {
                        ExfeeCache.cacheIdentities(caughtIdentities);
                        window.GatherExfeeWidget.showAll(true);
                        window.CrossExfeeWidget.showAll(false, true);
                    }
                }
            );
        }
    },


    checkInput : function(objInput, force) {
        if (!objInput || !objInput.length) {
            return;
        }
        var strInput   = objInput.val(),
            arrInput   = strInput.split(/,|;|\r|\n|\t/),
            arrValid   = [],
            arrInvalid = [],
            strItem    = '',
            strTail    = '';
        if (ExfeeWidget.last_inputed[objInput[0].id] === strInput && !force) {
            return;
        } else {
            ExfeeWidget.last_inputed[objInput[0].id]  =  strInput;
        }
        for (var i = 0; i < arrInput.length; i++) {
            if ((strItem = ExfeUtilities.trim(arrInput[i]))) {
                var item = ExfeeWidget.parseAttendeeInfo(strItem);
                if (item && (~~i < arrInput.length - 1 || force) && this.addExfee(item)) {
                    arrValid.push(item);
                } else {
                    arrInvalid.push(arrInput[i]);
                    strTail = arrInput[i];
                }
            }
        }
        var newInput = arrInvalid.join('; ');
        if (newInput !== strInput) {
            objInput.val(newInput);
        }
        this.ajaxIdentity(arrValid);
        if (ExfeeWidget.summary().items >= ExfeeWidget.hard_limit && strInput) {
            strTail = '';
            this.showLimitWarning();
        } else {
            this.showLimitWarning(false);
        }
        var bolCorrect = !!ExfeeWidget.parseAttendeeInfo(strTail);
        objInput.parent().find('.pointer').toggleClass(
            'icon16-exfee-plus-blue', bolCorrect
        ).toggleClass(
            'icon16-exfee-plus',     !bolCorrect
        );
        this.checkComplete(objInput, strTail.replace(/^@/, ''), force);
    },


    selectCompleteItem : function(index) {
        var className = 'active';
        $('.ids-popmenu > ol > li').removeClass(className).eq(index).addClass(className);
    },


    useCompleteItem : function(index) {
        var identity = ExfeeCache.fetchIdentity(this.complete_exfee[index]);
        if (identity) {
            this.complete_exfee.splice(index, 1);
            ExfeeCache.cacheIdentities(identity);
        } else {
            identity = ExfeUtilities.clone(this.complete_exfee[index]);
        }
        this.addExfee(identity);
    },


    inputEvent : function(event) {
        var objInput = $(event.target);
        switch (event.type) {
            case 'focus':
                ExfeeWidget.focus[event.target.id] = true;
                break;
            case 'keydown':
                switch (event.which) {
                    case 9:  // tab
                        ExfeeWidget.checkInput(objInput, true);
                        break;
                    case 13: // enter
                        var objSelected = $('.ids-popmenu > ol > .active'),
                            curItem     = objSelected.length ? ~~objSelected.index() : null;
                        if (ExfeeWidget.completing && curItem !== null) {
                            ExfeeWidget.useCompleteItem(curItem);
                            ExfeeWidget.displayCompletePanel(objInput, false);
                            objInput.val('');
                        } else {
                            ExfeeWidget.checkInput(objInput, true);
                        }
                        break;
                    case 27: // esc
                        if (ExfeeWidget.completing) {
                            ExfeeWidget.displayCompletePanel(objInput, false);
                        }
                        break;
                    case 38: // up
                    case 40: // down
                        event.preventDefault();
                        var objCmpBox  = $('.ids-popmenu'),
                            cboxHeight = 352,
                            cellHeight = 50,
                            curScroll  = objCmpBox.scrollTop();
                        if (!ExfeeWidget.completing) {
                            return;
                        }
                        var objSelected = objCmpBox.find('ol .active'),
                            curItem     = ~~objSelected.index(),
                            maxIdx      = ExfeeWidget.complete_exfee.length - 1;
                        switch (event.which) {
                            case 38: // up
                                if (--curItem < 0) {
                                    curItem = maxIdx;
                                }
                                break;
                            case 40: // down
                                if (++curItem > maxIdx) {
                                    curItem = 0;
                                }
                        }
                        ExfeeWidget.selectCompleteItem(curItem);
                        var curCellTop = curItem * cellHeight,
                            curScrlTop = curCellTop - curScroll;
                        if (curScrlTop < 0) {
                            objCmpBox.scrollTop(curCellTop);
                        } else if (curScrlTop + cellHeight > cboxHeight) {
                            objCmpBox.scrollTop(curCellTop + cellHeight - cboxHeight + 1);
                        }
                }
                break;
            case 'blur':
                ExfeeWidget.focus[event.target.id] = false;
                ExfeeWidget.displayCompletePanel(objInput, false);
        }
    },

};

});

define('exfeepanel', function (require, exports, module) {

    var objBody = $('body');

    objBody.bind('click', function(event) {
        var domEvent = event.target;
        while (domEvent
            && !$(domEvent).hasClass('exfee_pop_up')
            && !$(domEvent).hasClass('exfee_pop_up_save')
            && domEvent.tagName !== 'BODY') {
            domEvent = domEvent.parentNode;
        }
        if (!$(domEvent).hasClass('exfee_pop_up')
         && !$(domEvent).hasClass('exfee_pop_up_save')) {
            $('.exfee_pop_up').hide().remove();
        }
    });

    return {

        objBody    : objBody,

        tipId      : '',

        panelId    : '',

        arrRsvp    : {NORESPONSE : ['Pending'],
                      ACCEPTED   : ['Accepted'],
                      INTERESTED : ['Interested'],
                      DECLINED   : ['Unavailable'],
                      IGNORED    : ['Pending']},

        invitation : {},

        editing    : '',

        pre_delete : false,


        newId : function(invitation) {
            return 'id_'                + invitation.identity.id
                 + 'provider_'          + invitation.identity.provider
                 + 'external_id_'       + invitation.identity.external_id
                 + 'external_username_' + invitation.identity.external_username;
        },


        showTip : function(invitation, x, y) {
            var strTipId = this.newId(invitation),
                strPanel = '<div class="tooltip tip-exfee  exfee_pop_up" style="left: ' + x + 'px; top: ' + y + 'px;">'
                         +   '<div class="tooltip-inner">'
                         +     '<h5>' + invitation.identity.name + '</h5>'
                         +     '<div>'
                         +       '<i class="icon16-identity-' + invitation.identity.provider + '"></i>'
                         +       '<span class="oblique">' + ExfeeWidget.displayIdentity(invitation.identity, true) + '</span>'
                         +     '</div>'
                         +   '</div>'
                         + '</div>';
            if (this.tipId !== strTipId || !$('.tip-exfee').length) {
                this.tipId  =  strTipId;
                this.hideTip();
                this.objBody.append(strPanel);
                $('.exfeetip').show();
            }
        },


        showPanel : function(invitation, x, y) {
            var strTipId = this.newId(invitation),
                strPanel = '<div class="exfeepanel exfee_pop_up" style="left: ' + x + 'px; top: ' + y + 'px; z-index: 10">'
                         +   '<div class="tooltip-inner">'
                         +     '<div class="avatar-name">'
                         +       '<span class="pull-left pointer avatar">'
                         +         '<img src="' + invitation.identity.avatar_filename + '" alt="" width="60" height="60" />'
                         +         '<i class="lt"></i>'
                         +       '</span>'
                         +       '<h4>' + invitation.identity.name + '</h4>'
                         +     '</div>'
                         +     '<div class="clearfix rsvp-actions">'
                         +      '<div class="pull-right invited">'
                         +        '<div class="mates-num hide"></div>'
                         +        '<div class="pull-left together-with hide">Mates&nbsp;</div>'
                         +        '<div class="pull-right mates-info">'
                         +          '<i class="mates-add icon-plus-blue"></i>'
                         +        '</div>'
                         +        '<div class="pull-left mates-edit hide">'
                         +          '<i class="pull-left mates-minus icon14-mates-minus"></i>'
                         +          '<span class="pull-left num"></span>'
                         +          '<i class="pull-left mates-add icon14-mates-add"></i>'
                         +        '</div>'
                         +      '</div>'
                         +      '<div class="rsvp-info">'
                         +        '<div class="rsvp-content">'
                         +          '<div class="attendance"></div>'
                         +          '<div class="by">by <span class="name"></span></div>'
                         +        '</div>'
                         +        '<div class="pull-right pointer underline setto">'
                         +          (readOnly ? '' : '<span>set to</span> <i class="icon-rsvp-declined-red"></i>')
                         +        '</div>'
                         +      '</div>'
                         +     '</div>'
                         +     '<div class="identities">'
                         +       '<ul class="identities-list">'
                         +         '<li>'
                         +           '<i class="pull-left icon16-identity-' + invitation.identity.provider + '"></i>'
                         +           '<span class="oblique identity">'
                         +             ExfeeWidget.displayIdentity(invitation.identity, true)
                         +           '</span>'
                         +           (readOnly ? '' : (
                                     '<div class="identity-btn delete">'
                         +             '<i class="icon-minus-red"></i>'
                         +             '<button class="btn-leave">Leave</button>'
                         +           '</div>'))
                         +         '</li>'
                         +       '</ul>'
                         +       '<div class="identity-actions">'
                         +         '<p>'
                         +           '<span class="xalert-fail">Remove yourself?</span>'
                         +           '<br />'
                         +           '<span class="xalter-info">You will <strong>NOT</strong> be able to access any information in this <span class="x">·X·</span>. Confirm leaving?</span>'
                         +           '<button class="pull-right btn-cancel">Cancel</button>'
                         +         '</p>'
                         +       '</div>'
                         +     '</div>'
                         +     '<!--i class="expand nomore"></i-->'
                         +   '</div>'
                         + '</div>';
            this.invitation = ExfeUtilities.clone(invitation);
            if (this.panelId   !== strTipId || !$('.exfeepanel').length) {
                this.panelId    =  strTipId;
                this.editing    =  '';
                this.pre_delete =  false;
                this.hideTip();
                this.hidePanel();
                this.objBody.append(strPanel);
                this.bindEvents();
                $('.exfeepanel').show();
            }
            this.showRsvp();
        },


        hideTip : function() {
            $('.tip-exfee').hide().remove();
        },


        hidePanel : function() {
            $('.exfeepanel').hide().remove();
        },


        showRsvp : function() {
            var by_identity = this.invitation.by_identity
                            ? this.invitation.by_identity : curIdentity,
                next_rsvp   = '',
                objSetTo    = $('.exfee_pop_up .rsvp-info .setto i');
            switch (this.invitation.rsvp_status) {
                case 'ACCEPTED':
                    next_rsvp = 'DECLINED';
                    objSetTo.toggleClass('icon-rsvp-accepted-blue', false);
                    objSetTo.toggleClass('icon-rsvp-declined-red',  true);
                    objSetTo.toggleClass('icon-rsvp-noresponse',    false);
                    break;
                case 'DECLINED':
                    next_rsvp = 'NORESPONSE';
                    objSetTo.toggleClass('icon-rsvp-accepted-blue', false);
                    objSetTo.toggleClass('icon-rsvp-declined-red',  false);
                    objSetTo.toggleClass('icon-rsvp-noresponse',    true);
                    break;
                case 'NORESPONSE':
                case 'IGNORED':
                default:
                    next_rsvp = 'ACCEPTED';
                    objSetTo.toggleClass('icon-rsvp-accepted-blue', true);
                    objSetTo.toggleClass('icon-rsvp-declined-red',  false);
                    objSetTo.toggleClass('icon-rsvp-noresponse',    false);
            }
            $('.exfee_pop_up .rsvp-info .setto').attr('rsvp', next_rsvp);
            $('.exfee_pop_up .rsvp-info .attendance').html(
                this.arrRsvp[this.invitation.rsvp_status][0]
            );
            for (var i = 1; i < 10; i++) {
                $('.exfee_pop_up .avatar-name .lt').toggleClass(
                    'icon10-plus-' + i, this.invitation.mates === i
                );
            }
            $('.exfee_pop_up .rsvp-info .by .name').html(by_identity ? by_identity.name : '');
            $('.exfee_pop_up .invited .mates-num').html('+' + this.invitation.mates);
            $('.exfee_pop_up .mates-edit .num').html(this.invitation.mates);
            if (by_identity && this.invitation.identity.id !== by_identity.id && this.editing === 'rsvp') {
                $('.exfee_pop_up .rsvp-info .by').show();
            } else {
                $('.exfee_pop_up .rsvp-info .by').hide();
            }
            switch (this.editing) {
                case 'rsvp':
                    // rsvp
                    $('.exfee_pop_up .rsvp-info').show();
                    $('.exfee_pop_up .rsvp-info .setto').show();
                    // mates
                    $('.exfee_pop_up .invited').hide();
                    break;
                case 'mates':
                    // rsvp
                    $('.exfee_pop_up .rsvp-info').hide();
                    // mates
                    $('.exfee_pop_up .invited').show();
                    $('.exfee_pop_up .invited .together-with').show();
                    if (this.invitation.mates) {
                        $('.exfee_pop_up .mates-edit').show();
                        $('.exfee_pop_up .invited .mates-info').hide();
                    } else {
                        $('.exfee_pop_up .mates-edit').hide();
                        $('.exfee_pop_up .invited .mates-info').show();
                    }
                    $('.exfee_pop_up .invited .mates-num').hide();
                    break;
                default:
                    // rsvp
                    $('.exfee_pop_up .rsvp-info').show();
                    $('.exfee_pop_up .rsvp-info .setto').hide();
                    // mates
                    $('.exfee_pop_up .invited').show();
                    $('.exfee_pop_up .mates-edit').hide();
                    $('.exfee_pop_up .invited .together-with').hide();
                    if (this.invitation.mates) {
                        $('.exfee_pop_up .invited .mates-num').show();
                        $('.exfee_pop_up .invited .mates-info').hide();
                    } else {
                        $('.exfee_pop_up .invited .mates-num').hide();
                        if (readOnly) {
                            $('.exfee_pop_up .invited .mates-info').hide();
                        } else {
                            $('.exfee_pop_up .invited .mates-info').show();
                        }
                    }
            }
            if (this.invitation.host) {
                $('.exfee_pop_up .identities-list .delete i').hide();
                $('.exfee_pop_up .identities-list .delete button').hide();
                $('.exfee_pop_up .identity-actions').hide();
            } else {
                if (this.pre_delete) {
                    $('.exfee_pop_up .identities-list .delete i').hide();
                    $('.exfee_pop_up .identities-list .delete button').show();
                    if (curIdentity && this.invitation.identity.id === curIdentity.id) {
                        $('.exfee_pop_up .identity-actions').show();
                        $('.exfee_pop_up .identities-list .btn-leave').html('Leave');
                    } else {
                        $('.exfee_pop_up .identity-actions').hide();
                        $('.exfee_pop_up .identities-list .btn-leave').html('Remove');
                    }
                } else {
                    $('.exfee_pop_up .identities-list .delete i').show();
                    $('.exfee_pop_up .identities-list .delete button').hide();
                    $('.exfee_pop_up .identity-actions').hide();
                }
            }
        },


        bindEvents : function() {
            $('.exfee_pop_up .mates-add').bind('click',        this.matesAdd);
            $('.exfee_pop_up .mates-minus').bind('click',      this.matesMinus);
            $('.exfee_pop_up .rsvp-info .setto').bind('click', this.rsvp);
            $('.exfee_pop_up .invited').bind('hover', function(event) {
                if (!readOnly) {
                    switch (event.type) {
                        case 'mouseenter':
                            ExfeePanel.editing = 'mates';
                            break;
                        case 'mouseleave':
                            ExfeePanel.editing = '';
                    }
                    ExfeePanel.showRsvp();
                }
            });
            $('.exfee_pop_up .rsvp-info').bind('hover', function(event) {
                switch (event.type) {
                    case 'mouseenter':
                        ExfeePanel.editing = 'rsvp';
                        break;
                    case 'mouseleave':
                        ExfeePanel.editing = '';
                }
                ExfeePanel.showRsvp();
            });
            $('.exfee_pop_up .identities-list .delete i').bind('click',      function(event) {
                event.stopPropagation();
                ExfeePanel.pre_delete = true;
                ExfeePanel.showRsvp();
            });
            $('.exfee_pop_up .identities-list .delete button').bind('click', function(event) {
                ExfeeWidget.delExfee(ExfeePanel.invitation.identity);
                ExfeePanel.hidePanel();
            });
            $('.exfee_pop_up .identity-actions .btn-cancel').bind('click',   function(event) {
                ExfeePanel.pre_delete = false;
                ExfeePanel.showRsvp();
            });
            $('.exfee_pop_up').bind('click', function() {
                ExfeePanel.pre_delete = false;
                ExfeePanel.showRsvp();
            });

            // open window show avatar
            $('.exfee_pop_up').on('click', 'span.avatar > img', function (e) {
              window.open($(this).attr('src').replace(/\/(80_80)_/, '/original_'));
            })
            .on('mouseleave', function (e) {
                $(this).hide(144, function () {
                  ExfeePanel.hidePanel();
                });
            });
        },


        matesAdd : function() {
            if (ExfeePanel.invitation.mates < 9) {
                ExfeeWidget.changeMates(
                    ExfeePanel.invitation.identity,
                  ++ExfeePanel.invitation.mates
                );
                ExfeePanel.showRsvp();
            }
        },


        matesMinus : function() {
            if (ExfeePanel.invitation.mates > 0) {
                ExfeeWidget.changeMates(
                    ExfeePanel.invitation.identity,
                  --ExfeePanel.invitation.mates
                );
                ExfeePanel.showRsvp();
            }
        },


        rsvp : function() {
            var rsvp = $(this).attr('rsvp');
            if (rsvp) {
                ExfeePanel.invitation.rsvp_status = rsvp;
                ExfeePanel.invitation.by_identity = ExfeUtilities.clone(curIdentity);
                ExfeeWidget.rsvpExfee(ExfeePanel.invitation.identity, rsvp);
                ExfeePanel.showRsvp();
            }
        },

    };

});



define(function (require, exports, module) {

    var $          = require('jquery'),
        Timeline   = [],
        rawCross   = {
            title : '', description : '', by_identity : {id : 0},
            time  : {
                begin_at : {
                    date_word : '', date : '',
                    time_word : '', time : '',
                    timezone  : '', id   : 0, type : 'EFTime'
                },
                origin : '', outputformat : 1, id : 0, type : 'CrossTime'
            },
            place : {
                title    : '', description : '', lng : '', lat  : '',
                provider : '', external_id : '',  id : 0,  type : 'Place'
            },
            attribute : {state : 'published'},
            exfee_id  : 0,
            widget : [{image : '', widget_id : 0, id : 0, type : 'Background'}],
            relative : {id : 0, relation : ''}, type : 'Cross'
        },
        rawExfee   = {id : 0, type : 'Exfee', invitations : []};


    var SaveExfee = function(refresh) {
        if (Cross.id) {
            $('.cross-opts .saving').show();
            Api.request(
                'editExfee',
                {type      : 'POST',
                 resources : {exfee_id : Exfee.id},
                 data      : {by_identity_id : curIdentity.id,
                              exfee          : JSON.stringify(Exfee)}},
                function(data) {
                    $('.cross-opts .saving').hide();
                    if (refresh) {
                        window.location.href = '/';
                    } else {
                        bus.emit('app:cross:edited');
                    }
                },
                function(data) {
                    $('.cross-opts .saving').hide();
                    var errorType = data.meta && (data.meta.code === 401 || data.meta.code === 403)
                                  ? 'no_permission' : '';
                    bus.emit('app:cross:edited', {error : errorType});
                }
            );
        }
    };


    var ExfeeCallback = function(refresh) {
        ShowExfee();
        SaveExfee(refresh);
    };


    var ExfeeWidgestInit = function() {
        ExfeeCache.init();
        ExfeeWidget.api_url = window._ENV_.api_url;
        window.GatherExfeeWidget = ExfeeWidget.make(
            'gather-exfee', true, ExfeeCallback
        );
        window.CrossExfeeWidget  = ExfeeWidget.make(
            'cross-exfee',  true, ExfeeCallback
        );
    };


    var postConversation = function(strMessage) {
        if (strMessage) {
            var post = {
                by_identity_id : curIdentity.id,
                content        : strMessage.substr(0, 233),
                id             : 0,
                relative       : [],
                type           : 'Post',
                via            : 'exfe.com'
            };
            $('.cross-opts .saving').show();
            Api.request(
                'addConversation',
                {
                    resources : {exfee_id : Exfee.id},
                    type      : 'POST',
                    data      : JSON.stringify(post)
                },
                function(data) {
                    lastConvUpdate = data.post.updated_at;
                    $('.cross-opts .saving').hide();
                    ShowMessage(data.post);
                    bus.emit('app:cross:edited');
                },
                function(data) {
                    $('.cross-opts .saving').hide();
                    var errorType = data.meta && (data.meta.code === 401 || data.meta.code === 403)
                                  ? 'no_permission' : '';
                    bus.emit('app:cross:edited', {error : errorType});
                }
            );
        }
    }


    var ButtonsInit = function() {
        $('#cross-form-discard').bind('click', function() {
            window.location = '/';
        });
        $('#cross-form-gather').bind('click', function() {
            $('body').trigger('click');
            if (curIdentity) {
                if (!$(this).hasClass('disabled')) {
                    $(this)
                        .prop('disabled', true)
                        .toggleClass('disabled', true);
                    Gather();
                }
            } else {
              var title = $.trim($('#gather-title').val());
              if (0 === title.length) {
                $('.choose-identity .placeholder').addClass('text-error');
                $('.add-identity').addClass('hide');
                $('.please-identity').removeClass('hide');
              }
              else {
                $('.choose-identity .placeholder').trigger('click');
              }
            }
        });
        $('.cross-conversation .comment-form .pointer').bind('click', function() {
            var objInput = $('.cross-conversation .comment-form textarea');
            postConversation(objInput.val());
            objInput.val('');
        });
        $('.cross-conversation .comment-form textarea').bind('keydown', function(event) {
            switch (event.which) {
                case 13: // enter
                    var objInput = $(this);
                    if (!event.shiftKey) {
                        event.preventDefault();
                        postConversation(objInput.val());
                        objInput.val('');
                    }
                    break;
            }
        });
    };


    var GatherFormInit = function() {
        var objGatherTitle = $('#gather-title');
        objGatherTitle.bind('focus keydown keyup blur', function(event) {
            ChangeTitle(objGatherTitle.val(), 'gather');
        });
    };

    var EditCross = function(event) {
        // @todo by @Leask: 暂时确保在 Cross 页
        if (!$('.cross-container').length || readOnly) {
            return;
        }
        var oldEditing = Editing,
            domWidget  = event ? event.target : null,
            editMethod = {
            title : [
                function() {
                    $('.cross-title').removeAttr('editable');
                    $('.cross-title .show').show();
                    ChangeTitle($('.cross-title .edit').val(), 'cross');
                    $('.cross-title .edit').hide();
                    AutoSaveCross();
                },
                function() {
                    $('.cross-title').attr('editable', true);
                    $('.cross-title .show').hide();
                    $('.cross-title .edit').show().focus();
                }
            ],
            description : [
                function() {
                    $('.cross-description-outer').removeAttr('editable');
                    $('.cross-description .show').show();
                    $('.cross-description .edit').hide();
                    ChangeDescription($('.cross-description .edit').val());
                    AutoSaveCross();
                },
                function() {
                    $('.cross-description-outer').attr('editable', true);
                    $('.cross-description .show').hide();
                    $('.cross-description .xbtn-more').hide();
                    $('.cross-description .edit').show().focus();
                }
            ],
            time : [
                function() {
                    var $dp = $('#date-panel');
                    if ($dp.size()) {
                      var cid = $dp.data('widget-id');
                      var dp = App.widgetCaches[cid];
                      var value = $.trim($('#date-string').data('date'));
                      if (oldEditing === 'date-panel' || oldEditing === 'time') {
                          //Cross.time.begin_at.timezone = ExfeUtilities.getTimezone();
                          AutoSaveCross();
                      }
                      if (dp) {
                        dp.hide();
                      }
                    }
                    $('.cross-date').removeAttr('editable');
                },
                function() {
                    var $dp = $('#date-panel');
                    if ($dp.size()) {
                      return;
                    }
                    var DatePanel = require('datepanel');
                    var datepanel = new DatePanel({
                        options: {
                            parentNode: $('#app-tmp')
                          , srcNode: $('.cross-date')
                          , eftime: Cross.time
                        }
                    });
                    datepanel.show();
                    $('.cross-date').attr('editable', true);
                }
            ],
            place : [
                function() {
                  $('.cross-place').removeAttr('editable');
                  var $mp = $('#map-panel');
                  if ($mp.size()) {
                    var cid = $mp.data('widget-id');
                    var mp = App.widgetCaches[cid];
                    if (oldEditing === 'map-panel' || oldEditing === 'place') {
                      Cross.place = mp.place;
                      AutoSaveCross();
                    }
                    if (mp) {
                      mp.hide();
                    }
                  }
                },
                function() {
                    var $dp = $('#map-panel');
                    if ($dp.size()) {
                      return;
                    }
                    var MapPanel = require('mappanel');
                    var mappanel = new MapPanel({
                        options: {
                            parentNode: $('#app-tmp')
                          , srcNode: $('.cross-place')
                          , place: Cross.place
                        }
                      , update: function (place) {
                          //Cross.place = place;
                          ShowPlace(place);
                          ShowGoogleMap(place);
                        }
                    });
                    mappanel.show();
                    $('.cross-place').attr('editable', true);
                }
            ],
            rsvp : [
                function() {
                    ShowRsvp();
                },
                function() {
                    ShowRsvp(true);
                }
            ],
            background : [
                function() {},
                function() {
                    if (event && event.type === 'dblclick' && (oldEditing || !Cross.id)) {
                        fixBackground(event ? event.shiftKey : false);
                    }
                }
            ],
            exfee : [
                function() {
                    if (!$('#cross-exfee .exfee-input').val()) {
                        $('#cross-exfee .total').css('visibility',       'hidden');
                        $('#cross-exfee .thumbnails .avatar .rb').hide();
                    }
                    if (!$('#gather-exfee .exfee-input').val()) {
                        $('#gather-exfee .thumbnails .avatar .rb').hide();
                    }
                    ExfeeWidget.showLimitWarning(false);
                },
                function() {}
            ]
        };
        if (event) {
            var firstEditArea = $(domWidget).attr('editarea');
            switch (firstEditArea) {
                case 'rsvp':
                case 'exfee':
                    Editing = firstEditArea;
            }
            if ((event.type === 'click' && (Editing || !Cross.id))
              || event.type === 'dblclick') {
                Editing = firstEditArea;
                while (domWidget && !Editing && domWidget.tagName !== 'BODY') {
                    domWidget = domWidget.parentNode;
                    Editing   = $(domWidget).attr('editarea');
                }
            } else {
                Editing = '';
            }
        }
        if (Editing === 'background') {
            editMethod['background'][1]();
            Editing = oldEditing;
        } else if (Editing === 'map-panel') {
          return;
        } else if (Editing === 'date-panel') {
          return;
        } else {
            for (var i in editMethod) {
                editMethod[i][~~(i === Editing)]();
            }
        }
    };


    var Editable = function() {
        $('body').on('click', EditCross);
        $('body').on('dblclick.data-link', '[editarea]', EditCross);
        $('.cross-title .edit').bind('focus keydown keyup blur', function(event) {
            if (event.type === 'keydown') {
                switch (event.which) {
                    case 13:
                        if (!event.shiftKey) {
                            event.preventDefault();
                            EditCross();
                        }
                        break;
                }
            }
            ChangeTitle($(event.target).val(), 'cross');
        });
        $('.cross-title, .cross-description-outer, .cross-date, .cross-place')
          .bind('hover', function (e) {
            var t = e.type;
            if (Editing && Editing !== 'rsvp') {
              if (t === 'mouseenter' && !$(this).attr('editable')) {
                $(this)
                  .addClass('cross-hover');
              }
              else {
                $(this)
                  .removeClass('cross-hover');
              }
            }
          });
        // 防止点击选中文字，触发 click
        var _dest = 0;
        $('.cross-description').bind('mousedown mouseup', function (e) {
          if (e.type === 'mousedown') {
            _dest = e.clientX + e.clientY;
          }
          else {
            _dest -= e.clientX + e.clientY;
          }
        });
        $('.cross-description').bind('click', function(e) {
            if (!Editing && !_dest) {
                _dest = 0;
                var that = $(this)
                  , status = !that.hasClass('more');
                that
                  .toggleClass('more', status)
                  .find('.xbtn-more')
                  .toggleClass('xbtn-less', status);
            }
        });
        $('.cross-description .xbtn-more').bind('click', function(event) {
            event.stopPropagation();
            var moreOrLess = !$(this).hasClass('xbtn-less');
            $('.cross-description').toggleClass('more', moreOrLess);
            $(this).toggleClass('xbtn-less', moreOrLess);
        });
        $('.cross-rsvp').bind('mouseenter mouseover mouseleave', function(event) {
            if (!readOnly) {
                switch (event.type) {
                    case 'mouseenter':
                    case 'mouseover':
                        $('.cross-rsvp .show .accepted').hide();
                        $('.cross-rsvp .show .change').show();
                        if ($('.cross-rsvp .show .by strong').html()) {
                            $('.cross-rsvp .show .by').show();
                        }
                        break;
                    case 'mouseleave':
                        $('.cross-rsvp .show .accepted').show();
                        $('.cross-rsvp .show .change').hide();
                        $('.cross-rsvp .show .by').hide();
                }
            }
        });
        $('.cross-rsvp .edit .accept').bind('click', function() {
            ExfeeWidget.rsvpMe('ACCEPTED');
            ShowRsvp();
        });
        $('.cross-rsvp .edit .decline').bind('click', function() {
            ExfeeWidget.rsvpMe('DECLINED');
            ShowRsvp();
        });
        $('.cross-rsvp .edit .interested').bind('click', function() {
            ExfeeWidget.rsvpMe('INTERESTED');
            ShowRsvp();
        });
        $('.cross-place .edit').bind('keydown', function(event) {
            if (event.shiftKey && event.which === 13) {
                event.which = 4;
            }
        });
        $('.cross-place .xbtn-more').bind('click', function(event) {
            event.stopPropagation();
            var moreOrLess = !$(this).hasClass('xbtn-less');
            $('.cross-dp.cross-place > address').toggleClass('more', moreOrLess);
            $(this).toggleClass('xbtn-less', moreOrLess);
        });
        $('.ids-popmenu > ol > li').live(
            'mouseenter mousedown',
            function(event) {
                switch (event.type) {
                    case 'mouseenter':
                        ExfeeWidget.selectCompleteItem($(this).index());
                        break;
                    case 'mousedown':
                        ExfeeWidget.useCompleteItem($(this).index());
                }
            }
        );
    };


    var fixTitle = function() {
        if (!Cross.title.length) {
            Cross.title = curIdentity ? ('Meet ' + curIdentity.name) : 'Gather a ·X·';
        }
    };


    var fixTime = function() {
        var d = new Date(),
            strDate = HumanTime.formatDate(
              d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + d.getDate()
            );
        Cross.time  = {
            begin_at : {
                date_word : '', date : strDate,
                time_word : '', time : '',
                timezone  : ExfeUtilities.getTimezone(),
                id        : 0,  type : 'EFTime'
            },
            origin : strDate, outputformat : 0, id : 0, type : 'CrossTime'
        };
        $('.cross-date .edit').val(strDate);
    };


    var fixBackground = function(purge) {
        var backgrounds = ExfeUtilities.clone(window._ENV_.backgrounds);
        backgrounds.push('');
        for (var i = 0; i < Cross.widget.length; i++) {
            if (Cross.widget[i].type === 'Background') {
                break;
            }
        }
        if (purge) {
            Cross.widget[i].image = '';
        } else {
            var strBgImg = Cross.widget[i].image;
            do {
                Cross.widget[i].image = backgrounds[
                    parseInt(Math.random() * backgrounds.length)
                ];
            } while (strBgImg === Cross.widget[i].image);
        }
        ShowBackground();
    };


    var fixExfee = function() {
        ExfeeWidget.addExfee(curIdentity, true, 'ACCEPTED');
    };


    var ChangeTitle = function(title, from) {
        Cross.title = ExfeUtilities.trim(title);
        ShowTitle(from);
    };


    var ChangeDescription = function(description) {
        Cross.description = ExfeUtilities.trim(description);
        ShowDescription();
    };


    var ChangePlace = function(place) {
        Cross.place = ExfeUtilities.parsePlacestring(place);
        ShowPlace(Cross.place);
    };


    var ShowHost = function() {
        if (curIdentity) {
            $('.choose-identity').html(
                '<img src="' + curIdentity.avatar_filename + '">'
            );
        }
    };


    var ShowTitle = function(from) {
        if (Cross.title.length) {
          if ($('.choose-identity .placeholder').hasClass('text-error')) {
            $('.choose-identity .placeholder').removeClass('text-error')
            $('.add-identity').removeClass('hide');
            $('.please-identity').addClass('hide');
          }
        }

        var title = Cross.title.length ? ExfeUtilities.escape(Cross.title) : 'Gathering for what?';
        /*
        $('.cross-title .show').html(title);
        $('.cross-title .show').removeClass('single-line').removeClass('double-line');
        if ($('.cross-title .show').height() > 50) {
            $('.cross-title .show').addClass('double-line').removeClass('single-line');
        } else {
            $('.cross-title .show').addClass('single-line').removeClass('double-line');
        }
        */
        $('.cross-title .show').html(title);
        $('.cross-title').removeClass('single-line').removeClass('double-line');
        if ($('.cross-title h1').height() > 50) {
            $('.cross-title').addClass('double-line').removeClass('single-line');
        } else {
            $('.cross-title').addClass('single-line').removeClass('double-line');
        }
        document.title = 'EXFE - ' + Cross.title;
        switch (from) {
            case 'gather':
                $('.cross-title .edit').val(Cross.title);
                break;
            case 'cross':
                $('#gather-title').val(Cross.title);
                break;
            default:
                $('.cross-title .edit').val(Cross.title);
                $('#gather-title').val(Cross.title);
        }
    };


    var ShowDescription = function() {
        var expended = $('.cross-description .xbtn-more').hasClass('xbtn-less'),
            domDesc  = '';
        $('.cross-description').toggleClass('more', true);
        $('.cross-description .xbtn-more').toggleClass('xbtn-less', false);
        if (Cross.description) {
            domDesc  = ExfeUtilities.escape(Cross.description).replace(/\r\n|\r|\n/g, '<br>'); // ? Marked.parse(Cross.description)
            $('.cross-description .show').toggleClass('gray', false).toggleClass('gsd', false);;
        } else {
            domDesc  = 'Click here to describe something about this ·X·.';
            $('.cross-description .show').toggleClass('gray', true).toggleClass('gsd', !Cross.id);
        }
        if ($('.cross-description .show').html() !== domDesc) {
            $('.cross-description .show').html(domDesc);
        }
        if ($('.cross-description .show').height() > 180) {
            $('.cross-description').toggleClass('more', false);
            $('.cross-description .xbtn-more').show();
            if (expended) {
                $('.cross-description').toggleClass('more', true);
                $('.cross-description .xbtn-more').toggleClass('xbtn-less', true);
            }
        } else {
            $('.cross-description .xbtn-more').hide();
        }
        $('.cross-description .edit').val(Cross.description);
        if ((Editing && Editing !== 'rsvp') || Cross.description || !Cross.id) {
            $('.cross-description').show();
        } else {
            $('.cross-description').hide();
        }
    };


    var ShowTime = function() {
        ShowCrossTime();
        ShowMessageTime();
    };


    var ShowCrossTime = function() {
        function getTimezoneOffset(timezone) {
            if ((timezone = ExfeUtilities.trim(timezone))) {
                var arrTimezone = timezone.split(':');
                if (arrTimezone.length === 2) {
                    var intHour = parseInt(arrTimezone[0], 10) * 60 * 60,
                        intMin  = parseInt(arrTimezone[1], 10) * 60;
                    return intHour + (intHour > 0 ? intMin : -intMin);
                }
            }
            return null;
        }
        var crossOffset = getTimezoneOffset(Cross.time.begin_at.timezone),
            timeOffset  = getTimezoneOffset(ExfeUtilities.getTimezone()),
            timevalid   = crossOffset === timeOffset && window._ENV_.timevalid,
            strAbsTime  = '', strRelTime = '', format = 'YYYY-MM-DD',
            //placeholder = Cross.id ? '&nbsp;' : 'Click here to set time.',
            placeholder = 'Pick a time.',
            showGray    = false;
        if (Cross.time.origin) {
          var t = HumanTime.printEFTime(Cross.time, 'X');
          strAbsTime = t.content;
          strRelTime = t.title;
        } else {
            strAbsTime = placeholder;
            strRelTime = 'Sometime';
            showGray   = true;
        }
        $('.cross-date h2').html(strRelTime);
        $('.cross-time').html(strAbsTime).toggleClass('gray', showGray);
    };


    var ShowPlace = function(place) {
        $('.cross-dp.cross-place > h2').html(
            place.title
          ? ExfeUtilities.escape(place.title)
          : 'Somewhere'
        );
        $('.cross-dp.cross-place > address').toggleClass('more', true)
        $('.cross-dp.cross-place .xbtn-more').toggleClass('xbtn-less', false);
        if (place.description) {
            $('.cross-dp.cross-place > address').html(
                ExfeUtilities.escape(place.description).replace(/\r\n|\r|\n/g, '<br>')
            ).toggleClass('gray', false);
        } else {
            $('.cross-dp.cross-place > address').html(
                //Cross.id ? '&nbsp;' : 'Click here to set place.'
                'Choose a place.'
            ).toggleClass('gray', true);
        }
        if ($('.cross-dp.cross-place > address').height() > 80) {
            $('.cross-dp.cross-place > address').toggleClass('more', false);
            $('.cross-dp.cross-place .xbtn-more').show();
        } else {
            $('.cross-dp.cross-place .xbtn-more').hide();
        }
    };


    var ShowExfee = function() {
        window.GatherExfeeWidget.showAll(true);
        window.CrossExfeeWidget.showAll(false, true);
    };


    var ShowBackground = function() {
        for (var i = 0; i < Cross.widget.length; i++) {
            if (Cross.widget[i].type === 'Background') {
                break;
            }
        }
        $('.x-gather').toggleClass('no-bg', false);
        $('.cross-background').css(
            'background-image',
            'url(/static/img/xbg/' + (Cross.widget[i].image ? Cross.widget[i].image : 'default.jpg') + ')'
        );
    };


    var lastConvUpdate = '';

    var ShowTimeline = function(timeline, notification) {
        Timeline = timeline;
        for (var i = Timeline.length - 1; i >= 0; i--) {
            if (!i) {
                lastConvUpdate = Timeline[i].created_at;
            }
            ShowMessage(Timeline[i], notification);
        }
    };


    var ShowMessage = function(message, notification) {
        var txtMessage = ExfeUtilities.escape(message.content).replace(/\r\n|\n\r|\r|\n/g, "\n");
        var strMessage = '<div class="avatar-comment">'
                       +   '<span class="pull-left avatar">'
                       +     '<img alt="" src="' + message.by_identity.avatar_filename + '" width="40" height="40" />'
                       +   '</span>'
                       +   '<div class="comment">'
                       +     '<p>'
                       +       '<span class="author"><strong>' + message.by_identity.name + '</strong>:&nbsp;</span>'
                       +          ExfeUtilities.escape(message.content).replace(/\r\n|\n\r|\r|\n/g, '<br>')
                       +       '<span class="pull-right date">'
                       +         '<time data-iso-time="' + HumanTime.toISO(message.created_at) + '"></time>'
                       +       '</span>'
                       +     '</p>'
                       +   '</div>'
                       + '</div>';
        $('.conversation-timeline').prepend(strMessage);
        if (notification && window.webkitNotifications) {
            if (window.webkitNotifications.checkPermission() === 0) {
                // 0 is PERMISSION_ALLOWED
                window.webkitNotifications.createNotification(
                    null, 'EXFE - ' + Cross.title,
                    message.by_identity.name + ': ' + txtMessage
                ).show();
            }
        }
    };


    var ShowMessageTime = function() {
        $('time[data-iso-time]').each(function() {
            var that = $(this);
            that.text(HumanTime(that.data('iso-time')));
        });
    };


    var ShowRsvp = function(buttons) {
        var myInvitation = ExfeeWidget.getMyInvitation();
        if (myInvitation) {
            var by_identity = myInvitation.by_identity
                            ? myInvitation.by_identity : curIdentity,
                byMe        = myInvitation.identity.id === by_identity.id;
            if (myInvitation.rsvp_status === 'NORESPONSE' || myInvitation.rsvp_status === 'IGNORED' || buttons) {
                if (byMe) {
                    $('.cross-rsvp .edit .by').hide();
                } else {
                    $('.cross-rsvp .edit .by .avatar img').attr('src', myInvitation.by_identity.avatar_filename);
                    $('.cross-rsvp .edit .by strong').html(myInvitation.by_identity.name);
                    $('.cross-rsvp .edit .by').show();
                }
                $('.cross-rsvp .show').hide();
                $('.cross-rsvp .edit').fadeIn(233);
                return;
            } else if (myInvitation.rsvp_status === 'ACCEPTED'
                    || myInvitation.rsvp_status === 'INTERESTED'
                    || myInvitation.rsvp_status === 'DECLINED') {
                var attendance = '';
                switch (myInvitation.rsvp_status) {
                    case 'ACCEPTED':
                        attendance = 'Accepted';
                        break;
                    case 'DECLINED':
                        attendance = 'Unavailable';
                        break;
                    case 'INTERESTED':
                        attendance = 'Interested';
                }
                if (byMe || myInvitation.rsvp_status === 'INTERESTED') {
                    $('.cross-rsvp .show .by').hide();
                    $('.cross-rsvp .show .by strong').html('');
                } else {
                    $('.cross-rsvp .show .by .avatar img').attr('src', myInvitation.by_identity.avatar_filename);
                    $('.cross-rsvp .show .by strong').html(myInvitation.by_identity.name);
                    $('.cross-rsvp .show .by').show();
                }
                var objSummary = ExfeeWidget.summary(),
                    strSummary = '';
                // 最多显示 5 条，最新的 accepted
                for (var i = 0; i < Math.min(objSummary.accepted_invitations.length, 5); i++) {
                    strSummary += '<li><span class="avatar alt40">'
                                +   '<img height="20" width="20" alt="" src="'
                                +      objSummary.accepted_invitations[i].identity.avatar_filename
                                +   '">'
                                +   (objSummary.accepted_invitations[i].mates ? '<i class="icon10-plus-' + objSummary.accepted_invitations[i].mates + '"></i>' : '')
                                + '</span></li>';
                }
                strSummary += objSummary.accepted ? ('<li><span>'
                            + objSummary.accepted + ' accepted.</span></li>') : '';
                var objAccepted = $('.cross-rsvp .show .accepted');
                if (objAccepted.text() !== $(strSummary).text()) {
                    objAccepted.html(strSummary);
                }
                $('.cross-rsvp .show .by').hide();
                $('.cross-rsvp .show .change').hide();
                $('.cross-rsvp .show .attendance').html(attendance);
                $('.cross-rsvp .show').fadeIn(233);
                $('.cross-rsvp .edit').hide();
                return;
            }
        }
        $('.cross-rsvp .show').hide();
        $('.cross-rsvp .edit').hide();
    };

    var ShowGoogleMap = function (place) {
        $('.cross-map').empty();
        var hasLL = place.lat.length && place.lng.length,
            map_dom = '<a target="_blank" href="https://maps.google.com/maps?key=' + _ENV_.MAP_KEY + '&q={{title}}&hl=en&ie=UTF8&sll={{lat}},{{lng}}&t=m&z=16"><img style="border-radius: 3px; box-shadow: 2px 2px 4px rgba(0, 0, 0, .25);" src="https://maps.googleapis.com/maps/api/staticmap?center={{lat}},{{lng}}&markers=icon%3a'+encodeURIComponent('http://img.exfe.com/web/map_pin_blue.png')+'%7C{{lat}},{{lng}}&zoom=13&size=280x140&maptype=road&sensor=false" alt="" width="280" height="140" /></a>';

        function getMap(position) {
          var coords = position.coords;
          map_dom = map_dom.replace(/\{\{lat\}\}/ig, coords.latitude)
            .replace(/\{\{lng\}\}/ig, coords.longitude)
            .replace(/\{\{title\}\}/ig, (place.provider === '' ? coords.latitude + ',' + coords.longitude + ' ' : '') + encodeURIComponent(place.title));
          $('.cross-map').append(map_dom);
        }

        if (hasLL) {
          getMap({
            coords: {
              latitude: place.lat,
              longitude: place.lng
            }
          });
        }
    };

    var ShowCross = function() {
        ShowTitle();
        ShowDescription();
        ShowPlace(Cross.place);
        ShowExfee();
        ShowBackground();
        ShowRsvp();
        ShowGoogleMap(Cross.place);
    };


    var RawGetTimeline = function(notification) {
        var args = {resources : {exfee_id : Exfee.id}};
        if (lastConvUpdate) {
            args['params'] = {updated_at : lastConvUpdate};
        }
        Api.request(
            'conversation', args,
            function(data) {
                ShowTimeline(data.conversation, notification);
            }
        );
    };

    var RtGetTimeline = function() {
        RawGetTimeline(true);
    }

    var GetTimeline = function() {
        if (readOnly) {
            $('#conversation-form').hide();
        } else {
            $('#conversation-form span.avatar img').attr(
                'src', curIdentity.avatar_filename
            );
            $('#conversation-form').show();
        }
        $('.conversation-timeline').html('');
        $('.cross-conversation').slideDown(233);
        RawGetTimeline();
        convTimer = setInterval(RtGetTimeline, 233 * 1000);
    };


    var UpdateCross = function(objCross, read_only) {
        Cross.id          = objCross.id;
        Cross.title       = objCross.title;
        Cross.description = objCross.description;
        Cross.time        = objCross.time;
        Cross.place       = objCross.place;
        Cross.widget      = objCross.widget;
        Cross.exfee_id    = objCross.exfee.id;
        Exfee             = objCross.exfee;
        readOnly          = read_only;
        savedCross        = summaryCross();
        if (typeof Cross.time          !== 'undefined'
         && typeof Cross.time.begin_at !== 'undefined'
         && !Cross.time.begin_at.timezone) {
            Cross.time.begin_at.timezone = ExfeUtilities.getTimezone();
        }
        $('.cross-date  .edit').val(Cross.time.origin);
        $('.cross-place .edit').val(
            Cross.place.title + (Cross.place.description ? ('\n' + Cross.place.description) : '')
        );
        for (var i = 0; i < Exfee.invitations.length; i++) {
            if (ExfeeWidget.isMyIdentity(Exfee.invitations[i].identity)) {
                curIdentity = ExfeUtilities.clone(Exfee.invitations[i].identity);
                break;
            }
        }
        ShowCross();
        GetTimeline();
    };


    var GetCross = function(cross_id) {
        Api.request(
            'getCross',
            {resources : {cross_id : cross_id}},
            function(data) {
                UpdateCross(data.cross, false);
            },
            function(data) {
                bus.emit('app:cross:forbidden', cross_id);
            }
        );
    };


    var ResetCross = function() {
        window.Cross = ExfeUtilities.clone(rawCross);
        window.Exfee = ExfeUtilities.clone(rawExfee);
    };


    var NewCross = function() {
        readOnly = false;
        ResetCross();
        fixBackground();
        fixTitle();
        fixTime();
        fixExfee();
        ShowCross();
        ShowGatherForm();
    };


    var Gather = function() {
        $('.cross-opts .saving').show();
        var objCross   = ExfeUtilities.clone(Cross);
        objCross.exfee = ExfeUtilities.clone(Exfee);
        objCross.by_identity = {id : curIdentity.id};
        Api.request(
            'gather',
            {type : 'POST', data : JSON.stringify(objCross)},
            function(data) {
                $('.cross-opts .saving').hide();
                document.location = '/#!' + data.cross.id;
            },
            function(data) {
                $('.cross-opts .saving').hide();
                $('#cross-form-gather')
                    .prop('disabled', false)
                    .toggleClass('disabled', false);
            }
        );
    };


    var SaveCross = function() {
        $('.cross-opts .saving').show();
        var objCross   = ExfeUtilities.clone(Cross);
        objCross.by_identity = {id : curIdentity.id};
        Api.request(
            'editCross',
            {type      : 'POST',
             resources : {cross_id : Cross.id},
             data      : JSON.stringify(objCross)},
            function(data) {
                $('.cross-opts .saving').hide();
                bus.emit('app:cross:edited');
            },
            function(data) {
                $('.cross-opts .saving').hide();
                var errorType = data.meta && (data.meta.code === 401 || data.meta.code === 403)
                              ? 'no_permission' : '';
                bus.emit('app:cross:edited', {error : errorType});
            }
        );
    };


    var summaryCross = function() {
        return JSON.stringify({
            id          : Cross.id,
            title       : Cross.title,
            description : Cross.description,
            time        : Cross.time.origin        + ', '
                        + Cross.time.begin_at.date + ', '
                        + Cross.time.begin_at.time,
            place       : {title       : Cross.place.title,
                           description : Cross.place.description,
                           lat         : Cross.place.lat,
                           lng         : Cross.place.lng,
                           updated_at  : Cross.place.updated_at},
            background  : Cross.widget[0].image
        });
    };


    var AutoSaveCross = function() {
        if (Cross.id) {
            var curCross = summaryCross();
            if (savedCross !== curCross) {
                SaveCross();
                savedCross = curCross;
            }
        }
    };


    var ShowGatherForm = function(hide) {
        if (hide) {
            $('.cross-form').slideUp(233);
            $('.cross-edit').show(233);
        } else {
            ShowHost();
            $('.cross-form').slideDown(233);
            $('.cross-edit').hide(233);
            $('#gather-title').select();
            $('#gather-title').focus();
        }
    };


    // init api
    window.Store = require('store');
    window.Api   = require('api');

    // init notification
    if (window.webkitNotifications) {
        window.webkitNotifications.requestPermission(function() {});
    }

    var HumanTime = require('humantime');

    // init participated identity
    window.curIdentity = null;
    // init read only flag
    window.readOnly    = false;
    // init bus
    var bus = require('bus');
    // init auto cross saving
    var savedCross = '';
    // init event: main
    bus.on('xapp:cross:main', function() {
        // get current user
        var Signin  = Store.get('authorization');
        window.User = Signin ? Store.get('user') : null;
        if (User) {
            Api.setToken(Signin.token);
            curIdentity = ExfeUtilities.clone(User.identities[0]);
        }

        // init cross step 1
        ResetCross();
        // init exfee widgets
        ExfeeWidgestInit();
        // init buttons
        ButtonsInit();
        // init gather form
        GatherFormInit();
        // init edit area
        Editing = '';
        Editable();
        // init marked
        Marked = require('marked');
        // init exfee panel
        window.ExfeePanel    = require('exfeepanel');
        // init showtime
        window.showtimeTimer = setInterval(ShowTime, 50);
        // init
        window.convTimer     = null;
    });
    // init event
    bus.on('xapp:cross', function(Cross_id, browsingIdentity, cross, read_only, invitation_token, accepted) {
        // get cross
        if (Cross_id > 0) {
            GetCross(Cross_id);
            // NOTE: `PhotoXWidget`
            var pxw = new (require('photoxwidget'))({
              options: {
                crossId: Cross_id,
                parentNode: $('.cross-photox')
              }
            });
            pxw.show();
        } else if (Cross_id === null) {
            if (browsingIdentity) {
                curIdentity = browsingIdentity;
                Api.setToken(invitation_token);
            }
            UpdateCross(cross, read_only);
            if (accepted) {
                ExfeeWidget.rsvpMe('ACCEPTED');
                ShowRsvp();
            }
        } else {
            NewCross();
        }
    });
    // init event: signin
    bus.on('app:user:signin:after', function() {
        if (window.Cross && !window.Cross.id) {
            // get current user
            var Signin  = Store.get('authorization');
            window.User = Signin ? Store.get('user') : null;
            if (User) {
                Api.setToken(Signin.token);
                curIdentity = ExfeUtilities.clone(User.identities[0]);
                ShowHost();
                fixExfee();
            }
        }
    });
    // init event: end
    bus.on('xapp:cross:end', function() {
        clearTimeout(window.showtimeTimer);
        clearTimeout(window.convTimer);
    });


    // lock tip
    // 后期会和身份tip一起弄个插件
    $(document.body).on('hover', 'div.lock-tag', function (e) {
      var t = e.type
        , offset = $(this).offset();

      if (t === 'mouseenter') {
        $('<div class="tooltip tip-lock" id="app-tip-lock">'
          + '<div class="inner">'
            + '<div>This <span class="x">·X·</span> is private.</div>'
            + '<div>Accessible to only attendees.</div>'
          + '</div>'
        + '</div>').css({
            left: offset.left - 135,
            top: offset.top + 25
          }).appendTo(document.body);
      }
      else {
        $('#app-tip-lock').remove();
      }
    });
});


/**
*
*  MD5 (Message-Digest Algorithm)
*  http://www.webtoolkit.info/
*
**/

var MD5 = function (string) {

    function RotateLeft(lValue, iShiftBits) {
        return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));
    }

    function AddUnsigned(lX,lY) {
        var lX4,lY4,lX8,lY8,lResult;
        lX8 = (lX & 0x80000000);
        lY8 = (lY & 0x80000000);
        lX4 = (lX & 0x40000000);
        lY4 = (lY & 0x40000000);
        lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);
        if (lX4 & lY4) {
            return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
        }
        if (lX4 | lY4) {
            if (lResult & 0x40000000) {
                return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
            } else {
                return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
            }
        } else {
            return (lResult ^ lX8 ^ lY8);
        }
    }

    function F(x,y,z) { return (x & y) | ((~x) & z); }
    function G(x,y,z) { return (x & z) | (y & (~z)); }
    function H(x,y,z) { return (x ^ y ^ z); }
    function I(x,y,z) { return (y ^ (x | (~z))); }

    function FF(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function GG(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function HH(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function II(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    function ConvertToWordArray(string) {
        var lWordCount;
        var lMessageLength = string.length;
        var lNumberOfWords_temp1=lMessageLength + 8;
        var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;
        var lNumberOfWords = (lNumberOfWords_temp2+1)*16;
        var lWordArray=Array(lNumberOfWords-1);
        var lBytePosition = 0;
        var lByteCount = 0;
        while ( lByteCount < lMessageLength ) {
            lWordCount = (lByteCount-(lByteCount % 4))/4;
            lBytePosition = (lByteCount % 4)*8;
            lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));
            lByteCount++;
        }
        lWordCount = (lByteCount-(lByteCount % 4))/4;
        lBytePosition = (lByteCount % 4)*8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
        lWordArray[lNumberOfWords-2] = lMessageLength<<3;
        lWordArray[lNumberOfWords-1] = lMessageLength>>>29;
        return lWordArray;
    };

    function WordToHex(lValue) {
        var WordToHexValue="",WordToHexValue_temp="",lByte,lCount;
        for (lCount = 0;lCount<=3;lCount++) {
            lByte = (lValue>>>(lCount*8)) & 255;
            WordToHexValue_temp = "0" + lByte.toString(16);
            WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);
        }
        return WordToHexValue;
    };

    function Utf8Encode(string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    };

    var x=Array();
    var k,AA,BB,CC,DD,a,b,c,d;
    var S11=7, S12=12, S13=17, S14=22;
    var S21=5, S22=9 , S23=14, S24=20;
    var S31=4, S32=11, S33=16, S34=23;
    var S41=6, S42=10, S43=15, S44=21;

    string = Utf8Encode(string);

    x = ConvertToWordArray(string);

    a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;

    for (k=0;k<x.length;k+=16) {
        AA=a; BB=b; CC=c; DD=d;
        a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);
        d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);
        c=FF(c,d,a,b,x[k+2], S13,0x242070DB);
        b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);
        a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);
        d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);
        c=FF(c,d,a,b,x[k+6], S13,0xA8304613);
        b=FF(b,c,d,a,x[k+7], S14,0xFD469501);
        a=FF(a,b,c,d,x[k+8], S11,0x698098D8);
        d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);
        c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);
        b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);
        a=FF(a,b,c,d,x[k+12],S11,0x6B901122);
        d=FF(d,a,b,c,x[k+13],S12,0xFD987193);
        c=FF(c,d,a,b,x[k+14],S13,0xA679438E);
        b=FF(b,c,d,a,x[k+15],S14,0x49B40821);
        a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);
        d=GG(d,a,b,c,x[k+6], S22,0xC040B340);
        c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);
        b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);
        a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);
        d=GG(d,a,b,c,x[k+10],S22,0x2441453);
        c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);
        b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);
        a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);
        d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);
        c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);
        b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);
        a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);
        d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);
        c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);
        b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);
        a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);
        d=HH(d,a,b,c,x[k+8], S32,0x8771F681);
        c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);
        b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);
        a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);
        d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);
        c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);
        b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);
        a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);
        d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);
        c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);
        b=HH(b,c,d,a,x[k+6], S34,0x4881D05);
        a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);
        d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);
        c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);
        b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);
        a=II(a,b,c,d,x[k+0], S41,0xF4292244);
        d=II(d,a,b,c,x[k+7], S42,0x432AFF97);
        c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);
        b=II(b,c,d,a,x[k+5], S44,0xFC93A039);
        a=II(a,b,c,d,x[k+12],S41,0x655B59C3);
        d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);
        c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);
        b=II(b,c,d,a,x[k+1], S44,0x85845DD1);
        a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);
        d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);
        c=II(c,d,a,b,x[k+6], S43,0xA3014314);
        b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);
        a=II(a,b,c,d,x[k+4], S41,0xF7537E82);
        d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);
        c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);
        b=II(b,c,d,a,x[k+9], S44,0xEB86D391);
        a=AddUnsigned(a,AA);
        b=AddUnsigned(b,BB);
        c=AddUnsigned(c,CC);
        d=AddUnsigned(d,DD);
    }

    var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);

    return temp.toLowerCase();
}

/**
 *「May the force be with you. 愿原力与你同在.」
 *
 * Refer:
 *    - https://github.com/senchalabs/connect
 *    - https://github.com/visionmedia/page.js
 *    - https://github.com/visionmedia/express/tree/master/lib
 *    - https://github.com/maccman/spine/blob/master/lib/route.js
 */
define('lightsaber', function (require, exports, module) {
  'use strict';

  /**
   * Module dependencies
   */
  var Emitter = require('emitter'),
      $ = require('jquery') || require('zepto'),
      proxy = $.proxy;

  var location = window.location,
      history = window.history,
      historySupport,
      ROOT = '/';

  // http://cacheandquery.com/blog/category/technology/
  var _firstLoad = false;
  $(window).on('load', function (e) {
    _firstLoad = true;
    setTimeout(function () { _firstLoad = false; }, 0);
  });

  // Create Application
  function createApplication() {
    var app = new Application();
    merge(app, Emitter.prototype);
    app.request = new Request();
    app.response = new Response();
    app.init();
    return app;
  }

  // export module
  exports = module.exports = createApplication;

  var proto;

  // lightsaber version
  exports.version = '0.0.5';

  // Application
  function Application() {}

  proto = Application.prototype;

  // html5 history support
  proto.historySupport = historySupport = (history !== null ? history.pushState : void 0) !== null;

  // wtf? window.onpopstate v12?
  if ($.browser && $.browser.opera) {
    proto.historySupport = historySupport = false;
  }

  proto.init = function () {
    this.route = ROOT;
    this.stack = [];
    this.cache = {};
    this.settings = {};
    this.engines = {};
    this.viewCallbacks = [];
    this.defaultConfiguration();
  };

  proto.defaultConfiguration = function () {
    // default settings
    this.set('env', 'production');

    // perform initial dispatch
    this.enable('dispatch');

    // implict middleware
    this.use(lightsaberInit(this));

    // router
    this._usedRouter = false;
    this._router = new Router(this);
    this.routes = this._router.map;
    this._router.caseSensitive = this.enabled('case sensitive routing');
    this._router.strict = this.enabled('strict routing');

    // setup locals
    this.locals = locals(this);

    // default locals
    this.locals.settings = this.settings;

    this.configure('development', function () {
      this.set('env', 'development');
    });

    this.configure('production', function () {
      this.enable('view cache');
    });
  };

  proto.use = function (route, fn) {
    // default route to '/'
    if ('string' !== typeof route) {
      fn = route;
      route = ROOT;
    }

    // '/abcdefg/' => '/abcdefg'
    if (ROOT !== route && ROOT === route[route.length - 1]) {
      route = route.slice(0, -1);
    }

    this.stack.push({ route: route, handle: fn });

    return this;
  };

  /**
   * Register the given template engine callback `fn`
   */
  proto.engine = function (ext, fn) {
    if ('function' !== typeof fn) throw new Error('callback function required');
    if ('.' !== ext[0]) ext = '.' + ext;
    this.engines[ext] = fn;
    return this;
  };

  proto.set = function (setting, val) {
    if (1 === arguments.length) {
      if (this.settings.hasOwnProperty(setting)) {
        return this.settings[setting];
      }
    } else {
      this.settings[setting] = val;
      return this;
    }
  };

  proto.enabled = function (setting) {
    return !!this.set(setting);
  };

  proto.disabled = function (setting) {
    return !this.set(setting);
  };

  proto.enable = function (setting) {
    return this.set(setting, true);
  };

  proto.disable = function (setting) {
    return this.set(setting, false);
  };

  proto.configure = function (env, fn) {
    var envs = 'all'
      , args = [].slice.call(arguments);

    fn = args.pop();

    if (args.length) envs = args;

    //if ('all' === envs || ~envs.indexOf(this.settings.env)) fn.call(this);
    if ('all' === envs || ~indexOf(envs, this.settings.env)) fn.call(this);

    return this;
  };

  proto.render = function (name, options, fn) {
    var self = this
      , opts = {}
      , cache = this.cache
      , engine = this.engine
      , view;

    if ('function' === typeof options) {
      fn = options;
      options = {};
    }

    // merge app.locals
    merge(opts, this.locals);

    // merge options.locals
    if (options.locals) merge(opts, options.locals);

    // merge options
    merge(opts, options);

    // set .cache unless explicitly provided
    opts.cache = null === opts.cache
      ? this.enabled('view cache')
      : opts.cache;

      // primed
    if (opts.cache) view = cache[name];

    if (!view) {
      view = new View(name, {
          engine: this.set('view engine')
        , root: this.set('views')
      }, this.set('timestamp'));

      if (!view.path) {
        var err = new Error('Failed to lookup view "' + name + '"');
        err.view = view;
        return fn(err);
      }

      // prime the cache
      if (opts.cache) cache[name] = view;
    }

    // render
    try {
      view.render(opts, fn);
    } catch (err) {
      fn(err);
    }
  };

  proto.path = function () {
    return this.route;
  };

  proto.param = function (name, fn) {
    var fns = [].slice.call(arguments, 1)
      , i = 0
      , len;

    // array
    if (isArray(name)) {
      for (len = name.length; i < len; ++i) {
        for (var j = 0, fl = fns.length; j < fl; ++j) {
          this.param(name[i], fns[j]);
        }
      }
    }
    // param logic
    else if ('function' === typeof name) {
      this._router.param(name);
    // single
    } else {
      if (':' === name[0]) name = name.substr(1);
      for (len = fns.length; i < len; ++i) {
        this._router.param(name, fn);
      }
    }

    return this;
  };

  proto.initRouter = function () {
    if (this._usedRouter === false) {
      this._usedRouter = true;
      this.use(this._router.middleware);
    }
  };

  // get method request
  proto.get = function () {
    var args = [].slice.call(arguments);
    this.initRouter();
    return this._router.route.apply(this._router, args);
  };

  /*
   * Handle request
   *
   * @api private
   */
  proto.handle = function (req, res, out) {
    var stack = this.stack
      , removed = ''
      , slashAdded = false
      , index = 0;

    function next(err) {
      // next callback
      var layer = stack[index++]
        , path;

      if (slashAdded) {
        req.url = req.url.substr(1);
        slashAdded = false;
      }

      req.url = removed + req.url;

      // all done
      if (!layer) {
        return;
      }

      try {

        path = req.url;

        if (0 !== path.indexOf(layer.route)) return next(err);

        // get handle function argumens length
        var arity = layer.handle.length;

        // debug
        //console.log(index, 'path', path, arity, layer.handle.toString());

        removed = layer.route;
        req.url = req.url.substr(removed.length);

        if ('/' !== req.url[0]) {
          req.url = '/' + req.url;
          slashAdded = true;
        }

        if (err) {
          if (4 === arity) {
            layer.handle(err, req, res, next);
          } else {
            next(err);
          }
        } else if (4 > arity) {
          layer.handle(req, res, next);
        } else {
          next();
        }

      } catch (e) {
        next(e);
      }

    }

    next()
  };

  // run app
  proto.run = function (options) {
    // onLaunch
    this.emit('launch');

    options = options || {};

    var req = this.request
      , res = this.response;

    if (this.running) return;
    this.running = true;

    if (false === options.dispatch) this.disable('dispatch');

    if (false !== options.popstate) {

      if (this.historySupport) {
        //$(window).on('popstate', { app: this }, this.change);
        $(window).on('popstate', proxy(this.change, this));
        //window.addEventListener('popstate', this.change, false);
      } else {
        //$(window).on('hashchange', { app: this }, this.change);
        $(window).on('hashchange', proxy(this.change, this));
        //window.addEventListener('hashchange', this.change, false);
      }

    }

    if (this.disabled('dispatch')) return;

    this.handle(req, res);

    // onLaunched
    this.emit('launched');
  };

  proto.change = function (e) {
    if (_firstLoad) return _firstLoad = false;

    //console.dir(e.originalEvent);

    /*
    var app = e.data.app
      , req = app.request
      , res = app.response
      , url = req.url;
    */

    var app = this
      , req = app.request
      , res = app.response
      , url = req.url;

    req.updateUrl();

    if ('/' !== url && url === req.url) return;

    app.handle(req, res);

    e.stopPropagation()
    e.preventDefault()

    //delete e.data;

    return false;
  };

  // Generate an `Error`
  proto.error = function (code, msg) {
    var err = new Error(msg);
    err.status = code;
    return err;
  };



  // Request
  function Request(enableFullUrlPath) {
    // listen full url path
    this.enableFullUrlPath = !!enableFullUrlPath;

    // session
    this.session = {};

    this.path = '/';
    this.method = 'GET';
    this.updateUrl();
  }

  // Request.prototype
  proto = Request.prototype;

  proto.updateUrl = function () {
    this.host = location.hostname;
    this.port = location.port || 80;
    this.fullpath = location.pathname;
    this.enableFullUrlPath && (this.path = this.fullpath);
    this.hash = decodeURIComponent(location.hash);
    this.querystring = decodeURIComponent(location.search);
    this.url = this.path + this.querystring + this.hash;
  };

  proto.param = function (name, defaultValue) {
    var params = this.params || {}
      , query = this.query || {};
    if (null != params[name] && params.hasOwnProperty(name)) return params[name];
    if (null != query[name]) return query[name];
    return defaultValue;
  };

  proto.getPath = function () {
    return this.path;
  };

  proto.getHost = function () {
    return this.host;
  };


  // Response
  function Response(path, state) {
    this.path = path;
    this.title = document.title;
    this.state = state || {};
  }

  // Response.prototype
  proto = Response.prototype;

  proto.location = function (url) {
    window.setTimeout(function () {
      location.href = url;
    }, 16);
  };

  // redirect('back')
  // redirect('/user', 'User Page', {id: 'user'});
  proto.redirect = function (url) {
    var argsLen = arguments.length
      , title
      , state;

    // `back` `forward`
    //if (1 === argsLen) {
    url = arguments[0];
    if (url === 'back' || url === 'forward') {
      history[url]();
      //} else {
      //  // 进入线程, 防止失败
      //  _redirect(url);
      //}
      return;
    }

    if (!historySupport) {
      //location.hash = this.path.substr(2);
      this.location(url);
      return;
    }

    title = arguments[1];
    state = arguments[2] || {};

    this.path = url;
    this.title = title || 'EXFE.COM';
    document.title = this.title;
    this.state = state;
    this.state.id = uuid();
    this.pushState();

    $(window).triggerHandler('popstate');
  };

  // save state
  proto.save = function () {
    history.replaceState(this.state, this.title, this.path);
  };

  // push the state onto the history stack
  proto.pushState = function () {
    history.pushState(this.state, this.title, this.path);
  };

  proto.render = function (view, options, fn) {
    var self = this
      , options = options || {}
      , app = this.app;

    // support callback function as second arg
    if ('function' === typeof options) {
      fn = options, options = {};
    }

    // merge res.locals
    options.locals = self.locals;

    // render
    app.render(view, options, fn);
  };


  // Router
  function Router(options) {
    options = options || {};
    var self = this;
    this.map = [];
    this.params = {};
    this._params = [];
    this.caseSensitive = options.caseSensitive;
    this.strict = options.strict;
    this.middleware = function router(req, res, next) {
      self._dispatch(req, res, next);
    };
  }

  proto = Router.prototype;

  proto.param = function (name, fn) {
    // param logic
    if ('function' === typeof name) {
      this._params.push(name);
      return;
    }

    // apply param functions
    var params = this._params
      , len = params.length
      , ret
      , i;

    for (i = 0; i < len; ++i) {
      if (ret = params[i](name, fn)) {
        fn = ret;
      }
    }

    // ensure we end up with a
    // middleware function
    if ('function' !== typeof fn) {
      throw new Error('invalid param() call for ' + name + ', got ' + fn);
    }

    (this.params[name] = this.params[name] || []).push(fn);
    return this;
  };

  proto._dispatch = function (req, res, next) {
    var params = this.params
      , self = this;

    // route dispatch
    (function pass(i, err) {
      var paramCallbacks
        , paramIndex = 0
        , paramVal
        , route
        , keys
        , key;

      // match next route
      function nextRoute(err) {
        pass(req._route_index + 1, err);
      }

      // match route
      req.route = route = self.matchRequest(req, i);

      // no route
      if (!route) return next(err);

      // we have a route
      // start at param 0
      req.params = route.params;
      keys = route.keys;
      i = 0;

      // param callbacks
      function param(err) {
        paramIndex = 0;
        key = keys[i++];
        paramVal = key && req.params[key.name];
        paramCallbacks = key && params[key.name];

        // debug
        //console.log(paramVal, paramCallbacks);

        try {
          if ('route' === err) {
            nextRoute();
          } else if (err) {
            i = 0;
            callbacks(err);
          } else if (paramCallbacks && undefined !== paramVal) {
            paramCallback();
          } else if (key) {
            param();
          } else {
            i = 0;
            callbacks();
          }
        } catch (err) {
          param(err);
        }
      }

      param(err);

      // single param callbacks
      function paramCallback(err) {
        var fn = paramCallbacks[paramIndex++];
        if (err || !fn) return param(err);
        fn(req, res, paramCallback, paramVal, key.name);
      }

      // innvoke route callbacks
      function callbacks(err) {
        var fn = route.callbacks[i++];
        try {
          if ('route' === err) {
            nextRoute();
          } else if (err && fn) {
            if (4 > fn.length) return callbacks(err);
            fn(err, req, res, callbacks);
          } else if (fn) {
            fn(req, res, callbacks);
          } else {
            nextRoute(err);
          }
        } catch (err) {
          callbacks(err);
        }
      }

    })(0);

  };

  proto.matchRequest = function (req, i) {
    var path = req.url
      , routes = this.map
      , len = routes.length
      , route;

    i = i || 0
    // matching routes
    for (; i < len; ++i) {
      route = routes[i];
      if (route.match(path)) {
        req._route_index = i;
        return route;
      }
    }

  };

  proto.route = function (path) {
    if (!path) new Error('Router#get() requires a path');

    var callbacks = [].slice.call(arguments, 1)
      , route = new Route(path, callbacks, {
          sensitive: this.caseSensitive
        , strict: this.strict
      });

    (this.map = this.map || []).push(route);
    return this;
  };


  // Route
  function Route(path, callbacks, options) {
    options  = options || {};
    //this.method = 'GET';
    this.path = path;
    this.callbacks = callbacks;
    this.regexp = pathToRegexp(path
      , this.keys = []
      , options.sensitive
      , options.strict);
  }

  proto = Route.prototype;

  proto.match = function (path) {
    this.regexp.lastIndex = 0;

    var keys = this.keys
      , params = this.params = []
      , m = this.regexp.exec(path)
      , i, len
      , key, val;

    if (!m) return false;

    for (i = 1, len = m.length; i < len; ++i) {
      key = keys[i - 1];
      val = 'string' === typeof m[i]
        ? decodeURIComponent(m[i])
        : m[i];

      if (key) {
        params[key.name] = val;
      } else {
        params.push(val);
      }
    }

    return true;
  };


  // View
  function View(name, options, timestamp) {
    options = options || {};
    this.name = name;
    this.root = options.root;
    this.engine = options.engine;
    this.ext = extname(name);
    this.timestamp = timestamp || '';
    this.path = this.lookup(name);
  }

  proto = View.prototype;

  proto.lookup  = function (path) {
    return this.root + '/' + path + '?t=' + this.timestamp;
  };

  proto.render = function (options, fn) {
    //this.engine(this.path, options, fn);
    return read(this.engine, this.path, options, fn, this.ext);
  };



  // Middlewars
  // **************************************************

  // lightsaber init middleware:
  function lightsaberInit(app) {
    return function init(req, res, next) {
      req.app = res.app = app;

      //req.res = res;
      //res.req = req;

      req.next = next;

      res.locals = res.locals || locals(res);

      next();
    };
  }


  // Helper
  // **************************************************
  function uuid() {
    return ++uuid.id;
  }
  uuid.id = 0;

  // [].indexOf
  function indexOf(a, el, i) {
    var l = a.length;
    if (!l) return -1;
    i || (i = 0);
    if (i > l) return -1;
    (i < 0) && (i = Math.max(0, l + i));
    for (; i < l; ++i) {
      if (i in a && a[i] === el) return i;
    }
    return -1;
  }

  // ajax get template
  function read(engine, path, options, fn, ext) {
    return $.get(path, function (tpl) {
      var template, html = tpl;
      if (ext !== 'html') {
        template = engine.compile(tpl);
        html = template(options);
      }
      fn(html);
    });
  }

  // extname
  function extname(filename) {
    return filename.split('.')[1] || 'html';
  }

  // locals
  function locals(obj) {
    obj.viewCallbacks = obj.viewCallbacks || [];

    function locals(obj) {
      for (var key in obj) locals[key] = obj[key];
      return obj;
    }

    return locals;
  }

  // merge
  function merge(t, s) {
    var k;
    if (t && s) {
      for (k in s) {
        t[k] = s[k];
      }
    }
    return t;
  }

  // isArray
  var isArray = Array.isArray;
  if (!isArray) {
    isArray = function (a) {
      return a instanceof Array;
    };
  }

  // pathToRegexp
  function pathToRegexp(path, keys, sensitive, strict) {
    if (path instanceof RegExp) return path;
    if (isArray(path)) path = '(' + path.join('|') + ')';
    path = path
      .concat(strict ? '' : '/?')
      .replace(/\/\(/g, '(?:/')
      .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g, function(_, slash, format, key, capture, optional, star) {
        keys.push({ name: key, optional: !! optional });
        slash = slash || '';
        return ''
          + (optional ? '' : slash)
          + '(?:'
          + (optional ? slash : '')
          + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
          + (optional || '')
          + (star ? '(/*)?' : '');
      })
    .replace(/([\/.])/g, '\\$1')
    .replace(/\*/g, '(.*)');
    return new RegExp('^' + path + '$', sensitive ? '' : 'i');
  }
});

define('middleware', function (require, exports, module) {
  "use strict";

  var Bus = require('bus')
    , Store = require('store')
    , $ = require('jquery');

  var middleware = module.exports = {};

  /**
   * Rules:
   *      1. 先检查 localStorage `authorization`
   *      2. 检查 header.meta.name = 'authorization'
   *
   *  本地缓存已经有 `authorization`，则其他 `token` 身份进来的都为 `browsing identity`
   */
  middleware.basicAuth = function (req, res, next) {
    var session = req.session;

    // Step 1
    var authorization = Store.get('authorization')
      , user = Store.get('user');

    // Step 2
    var authMeta = getAuthFromHeader();

    if (authorization && (!authMeta || (authMeta && !authMeta.authorization))) {
      session.authorization = authorization;
      session.user = user;
    }

    else if (!authorization && authMeta && authMeta.authorization && authMeta.data && !authMeta.event) {
      Store.set('oauth', session.oauth = {
        identity: authMeta.data.identity,
        following: authMeta.data.identity.provider === 'twitter' ? !!authMeta.data.twitter_following : false,
        // status: connected, new, revoked
        identity_status: authMeta.data.identity_status
      });

      delete session.user;
      Store.remove('user');
      Store.set('authorization', session.authorization = authMeta.authorization);
    }

    else if (authorization && authMeta && authMeta.authorization && authMeta.data && !authMeta.event) {
      if (authorization.user_id === authMeta.authorization.user_id
         && authorization.token !== authMeta.authorization.token
         ) {
        authorization.token = authMeta.authorization.token;
        Store.set('authorization', session.authorization = authorization);
      }
      else if (authorization.user_id !== authMeta.authorization.user_id
          && authorization.token !== authMeta.authorization.token
          && authMeta.identity
          ) {
        Store.set('oauth', session.oauth = {
          identity: authMeta.data.identity,
          following: authMeta.data.identity.provider === 'twitter' ? !!authMeta.data.twitter_following : false,
          // status: connected, new, revoked
          identity_status: authMeta.data.identity_status
        });

        delete session.user;
        Store.remove('user');
        Store.set('authorization', session.authorization = authMeta.authorization);
      }
    }

    if (authMeta) {

      // 保存回调事件
      if (authMeta.event) {
        session.event = JSON.parse(authMeta.event);
        session.event.data = authMeta.data
      }

      if (authMeta.verification_token) {
        session.verification_token = authMeta.verification_token;
      }

      if (authMeta.refere && authMeta.refere !== window.location.protocol + '//' + window.location.hostname + '/') {
        res.redirect(authMeta.refere || '/');
      }
    }

    next();
  };



  // errorHandler
  middleware.errorHandler = function (req, res) {
    var url = /^\/404/;
    if (url.exec(window.location.pathname)) {
      Bus.emit('app:page:home', false, true);
      var authorization = Store.get('authorization');
      Bus.emit('app:page:usermenu', !!authorization);
      if (authorization) {
        var user = Store.get('user');
        Bus.emit('app:usermenu:updatenormal', user);
        Bus.emit('app:usermenu:crosslist'
          , authorization.token
          , authorization.user_id
        );
      }
      return;
    }
    res.location('/404');
  };


  // remove #app-tmp content
  middleware.cleanupAppTmp = function (req, res, next) {
    var $TMP = $('#app-tmp')
      , $widgets = $TMP.find('[data-widget-id]');
    $widgets.trigger('destory.widget');
    next();
  };


  // fixed `Facebook` callback url
  // http://stackoverflow.com/questions/7485111/weird-url-appended?lq=1
  // http://stackoverflow.com/questions/7131909/facebook-callback-appends-to-return-url
  // https://developers.facebook.com/blog/post/552/
  middleware.fixedFaceBookURL = function (req, res, next) {
    if (window.location.hash === '#_=_') {
      window.location.hash = '';
      req.updateUrl();
      // Mozilla triggered twice, firefox-v18.0
      if ($.browser.mozilla) { return; }
    }
    next();
  };

  // Helers:
  // ----------------------------
  function getAuthFromHeader() {
    var header = document.getElementsByTagName('head')[0]
      , meta = document.getElementsByName('authorization')[0]
      , authMeta = null;

    if (meta) {
      authMeta = JSON.parse(meta.content);
      header.removeChild(meta);
    }

    return authMeta;
  }

});

/**
 * Routes
 */
define('routes', function (require, exports, module) {
  "use strict";

  var R = require('rex'),
      Api = require('api'),
      Bus = require('bus'),
      Util = require('util'),
      Store = require('store');

  require('user');

  var routes = module.exports = {};


  // index
  routes.index = function (req, res) {
    // redirect to `profile`
    if (req.session.authorization) {
      redirectToProfile(req, res);
      return;
    }

    // is `home`
    Bus.emit('app:page:home', true);

    res.render('index.html', function (tpl) {
      var $appMain = $('#app-main');
      $appMain.append(tpl);
      var $pageMain = $appMain.find('div.page-main');
      var $img = $('<img class="exfe-toy" id="js-exfe-toy" src="/static/img/exfe.png" alt="" />');
      $pageMain
        .append($img);
      $img.load(function () {

        $.ajax({ dataType: 'script', cache: true,
          url: "/static/js/home/0.0.3/home.js?t=" + req.app.set('timestamp')
        });
      });
    });
  };


  // gather a x
  routes.gather = function (req, res) {
    var session = req.session;

    // is not `home` page
    Bus.emit('app:page:home', false);

    if (!session.initMenuBar) {

      var authorization = session.authorization,
          user = session.user;

      Bus.emit('app:page:usermenu', !!authorization);

      if (authorization) {
        session.initMenuBar = true;
        Bus.emit('app:usermenu:updatenormal', user);

        Bus.emit('app:usermenu:crosslist',
          authorization.token,
          authorization.user_id
        );
      }
    }

    res.render('x.html', function(tpl) {
      $('#app-main').append(tpl);
      Bus.emit('xapp:cross:main');
      Bus.emit('xapp:cross', 0);
    });
  };

  // resolve token
  routes.resolveToken = function (req, res, next) {
    req.origin = 'resolveToken';
    var originToken = req.params[0];

    Bus.emit('app:page:home', false);
    Bus.emit('app:page:usermenu', true);

    if (originToken) {
      next();
    }
    else {
      res.redirect('/#invalid/token=' + originToken);
    }
  };

  routes.inspectResolveToken = function (req, res, next, data, originToken) {
    var session = req.session,
        user = session.user,
        authorization = session.authorization;
    // token_type
    //  verify
    //  forgot password: SET_PASSWORD
    /*
     * data = {
     *   user_id
     * , user_name
     * , identity_id
     * , token
     * , token_type
     * , action
     * }
     */
    session.resolveData = data;
    var target_token = data.token
      , target_user_id = data.user_id
      , target_user_name = data.user_name
      // 是否还有可以合并的 `identities`
      //, mergeable_user = data.mergeable_user
      , mergeable_user = null
      , token_type = data.token_type
      , action = data.action
      , browsing_authorization;

    if (!mergeable_user
        && ((authorization && authorization.user_id === target_user_id)
          || (!authorization && token_type === 'VERIFY' && action === 'VERIFIED'))
       ) {
      authorization = {
        token: target_token,
        user_id: target_user_id
      };
      Store.set('authorization', session.authorization = authorization);
      session.auto_sign = action !== 'INPUT_NEW_PASSWORD';
    }
    else {
      session.browsing_authorization = browsing_authorization = data;
    }

    Bus.emit('app:api:getuser'
      , target_token
      , target_user_id
      , function done(data) {
        var new_user = data.user;
        session.resolveData.setup = action === 'INPUT_NEW_PASSWORD' && token_type === 'VERIFY' && new_user.password === false;
        if (browsing_authorization) {
          session.browsing_user = new_user;
          var eun = Util.printExtUserName(new_user.identities[0])
            , forwardUrl;
          if (authorization) {
            forwardUrl = '/#' + eun + '/token=' + originToken;
          }
          else {
            forwardUrl = '/#' + eun;
          }
          Bus.emit('app:usermenu:updatebrowsing',
            {   normal: user
              , browsing: new_user
              , action: action
              , setup: action === 'INPUT_NEW_PASSWORD' && token_type === 'VERIFY' && new_user.password === false
              , originToken: originToken
              , tokenType: 'user'
              , page: 'resolve'
              , readOnly: true
              , user_name: target_user_name || new_user.name
              , mergeable_user: mergeable_user
              , forward: forwardUrl
            }
            , 'browsing_identity');
        }
        else {
          Store.set('user', user = session.user = data.user);
          Bus.emit('app:usermenu:updatenormal', user);
          Bus.emit('app:usermenu:crosslist'
            , authorization.token
            , authorization.user_id
          );
        }
        next();
      }
    );
  };

  routes.resolveRequest = function (req, res, next) {
    var session = req.session
      , originToken = req.params[0];

    session.originToken = originToken;
    Api.request('resolveToken',
      { type: 'POST', data: { token: originToken } },
      function (data) {
        routes.inspectResolveToken(req, res, next, data, originToken);
      },
      function () {
        res.redirect('/#invalid/token=' + originToken);
      }
    );
  };

  routes.resolveShow = function (req, res) {
    var session = req.session
      , auto_sign = session.auto_sign
      , originToken = session.originToken
      , user = session.user
      , authorization = session.authorization
      , browsing_authorization = session.browsing_authorization
      , browsing_user = session.browsing_user
      , resolveData = session.resolveData
      , target_identity_id = resolveData.identity_id
      , token_type = resolveData.token_type
      //, mergeable_user = resolveData.mergeable_user
      , mergeable_user = null
      , action = resolveData.action
      , tplUrl = 'identity_verified.html';

    if (mergeable_user) {
      res.render(tplUrl, function (tpl) {
        var $main = $('#app-main');
        $main.append(tpl);
        var d = $('<div id="js-dialog-merge" data-destory="true" data-widget="dialog" data-dialog-type="mergeidentity">');
        d.data('source', {
          merged_identity: R.find(browsing_user.identities, function (v) {
            if (v.id === target_identity_id) { return true; }
          }),
          browsing_token: originToken,
          mergeable_user: mergeable_user
        });
        d.appendTo($('#app-tmp'));
        d.trigger('click.dialog.data-api');
        $('.modal-mi').css('top', 230);
      });
      return;
    }

    if (auto_sign && authorization && !browsing_authorization) {
      delete session.auto_sign;
      res.render(tplUrl, function (tpl) {
        var $main = $('#app-main');
        $main.append(tpl);
        $main.find('.tab01').removeClass('hide');
        $main.find('.tab01 > p').animate({opacity: 0}, 2333, function () {
          res.redirect('/');
        });
      });
      return;
    }

    if (!auto_sign && token_type === 'VERIFY' && action === 'VERIFIED') {
      res.render(tplUrl, function (tpl) {
        var $main = $('#app-main');
        $main.append(tpl);
        $('#app-browsing-identity').trigger('click.data-api');
        $('.modal-bi').css('top', 200);
      });
      return;
    }


    if (action === 'INPUT_NEW_PASSWORD') {
      var d;
      tplUrl = 'forgot_password.html';
      res.render(tplUrl, function (tpl) {
        $('#app-main').append(tpl);
        if (authorization && !browsing_authorization) {
          var identity = R.find(user.identities, function (v) {
            if (v.id === target_identity_id) {
              return true;
            }
          });
          if (token_type === 'VERIFY') {
            d = $('<div class="merge set-up" data-destory="true" data-user-action="setup" data-widget="dialog" data-dialog-type="setup_email">');
            d.data('source', {
              browsing_user: user,
              identity: identity,
              originToken: originToken,
              user_name: resolveData.user_name,
              tokenType: 'user'
            });
          }
          else if (token_type === 'SET_PASSWORD') {
            d = $('<div class="setpassword" data-destory="true" data-widget="dialog" data-dialog-type="setpassword">');
            d.data('source', {
              user: user,
              token: resolveData.setup ? authorization.token : originToken,
              setup: resolveData.setup
            });
          }
          d.appendTo($('#app-tmp'));
          d.trigger('click.dialog.data-api');
        }
        else {
          if (token_type === 'VERIFY') {
            Bus.once('app:user:signin:after', function () {
              var d2 = $('<div class="addidentity" data-destory="true" data-widget="dialog" data-dialog-type="addIdentityAfterSignIn">');
              d2.data('source', {
                identity: browsing_user.identities[0]
              });
              d2.appendTo($('#app-tmp'));
              d2.trigger('click.dialog.data-api');
            });
            $('#app-user-menu').find('.set-up').trigger('click.dialog.data-api');
          }
          else {
            d = $('<div class="setpassword" data-destory="true" data-widget="dialog" data-dialog-type="setpassword">');
            d.data('source', {
              user: browsing_user,
              token: resolveData.setup ? browsing_authorization.token : originToken,
              setup: resolveData.setup
            });
            d.appendTo($('#app-tmp'));
            d.trigger('click.dialog.data-api');
          }
        }
        $('.modal-su, .modal-sp, .modal-bi').css('top', 230);
      });
    }

    delete session.browsing_authorization;
    delete session.resolveData;
    delete session.originToken;
  };

  // cross
  routes.cross = function (req, res) {
    var session = req.session
      , authorization = session.authorization
      , user = session.user;

    if (!authorization) {
      //res.redirect('/');
      Bus.emit('app:page:home', false);
      Bus.emit('app:page:usermenu', false);
      Bus.emit('app:cross:forbidden', req.params[0], null);
      return;
    }

    Bus.emit('app:page:home', false);

    Bus.emit('app:page:usermenu', true);

    if (!session.initMenuBar) {
      //session.initMenuBar = true;
      Bus.emit('app:usermenu:updatenormal', user);

      Bus.emit('app:usermenu:crosslist'
        , authorization.token
        , authorization.user_id
      );
    }

    var cross_id = req.params[0];
    res.render('x.html', function (tpl) {
      $('#app-main').append(tpl);
      Bus.emit('xapp:cross:main');
      Bus.emit('xapp:cross', cross_id);
    });
  };

  // cross forbidden
  // TODO: 整合 cross 逻辑
  Bus.on('app:cross:forbidden', function (cross_id, data) {
    $('#app-main').load('/static/views/forbidden.html', function () {
      var authorization = Store.get('authorization');
      var settings = {
        options: {
          keyboard: false,
          backdrop: false,

          viewData: {
            // class
            cls: 'modal-id'
          }
        }
      };
      if (data) {
        $('.sign-in').data('source', data.external_username);
      }
      if (!authorization) {
        $('.sign-in').data('dialog-settings', settings);
        $('.sign-in').trigger('click.dialog.data-api');
        $('.sign-in').data('dialog-settings', null);
        $('.popmenu').addClass('hide');
        $('.please-signin').removeClass('hide');
        $('.modal-id').css('top', 260);
      }
      else {
        var user = Store.get('user');
        $('.details').removeClass('hide');
        $('.details .avatar img').attr('src', user.avatar_filename);
        $('.details .identity-name').text(user.name);
        $('.please-access').removeClass('hide');
        $('.modal-id').css({
          top: 380
        });
      }
    });
  });


  // Opening a private invitation X.
  routes.crossInvitation = function (req, res) {
    var session = req.session
      , authorization = session.authorization
      , user = session.user
      , user_id = user && user.id
      , cross_id = req.params[0]
      // invitation token
      , shortToken = req.params[1];

    Bus.emit('app:page:home', false);

    Bus.emit('app:page:usermenu', !!authorization);

    if (authorization) {
      //session.initMenuBar = true;
      Bus.emit('app:usermenu:updatenormal', user);

      Bus.emit('app:usermenu:crosslist'
        , authorization.token
        , authorization.user_id
      );
    }

    Api.request('getInvitationByToken',
      {
        type: 'POST',
        resources: { cross_id: cross_id },
        data: { token: shortToken }
      }
      , function (data) {
        var invitation = data.invitation
          , identity = invitation.identity
          , by_identity = invitation.by_identity
          , _identity;

        if (user_id) {
          _identity = R.find(user.identities, function (v) {
            if (v.connected_user_id === identity.connected_user_id
                && v.id === identity.id) {
              return true;
            }
          });

          if (_identity) {
            res.redirect('/#!' + cross_id);
            return;
          }
        }

        if (identity.provider === 'email') {
          Bus.emit('app:cross:forbidden', cross_id, identity);
          return;
        }

        res.render('invite.html', function (tpl) {
          $('#app-main').append(tpl);

          if (authorization) {
            $('.please-access').removeClass('hide');
            $('.form-horizontal').addClass('fh-left');
            $('.details').removeClass('hide');
            $('.details .avatar img').attr('src', user.avatar_filename);
            $('.details .identity-name').text(user.name);
          }
          else {
            $('.please-signin').removeClass('hide');
          }

          $('.invite-to')
            .find('img')
            .attr('src', identity.avatar_filename)
            .parent()
            .next()
            .text(Util.printExtUserName(identity));

          $('.invite-from')
            .find('img')
            .attr('src', by_identity.avatar_filename)
              .parent()
            .next()
            .text(Util.printExtUserName(by_identity));

          var $redirecting = $('.x-invite').find('.redirecting')
            , $fail = $redirecting.next();

          var clicked = false;
          $('.xbtn-authenticate').on('click', function (e) {
            e.stopPropagation();
            e.preventDefault();
            if (clicked) {
              return;
            }
            var provider = $(this).data('oauth');
            $.ajax({
              url: '/OAuth/Authenticate?provider=' + provider,
              type: 'POST',
              dataType: 'JSON',
              data: {
                refere: window.location.href
              },
              beforeSend: function () {
                clicked = true;
                $fail.addClass('hide');
                $redirecting.removeClass('hide');
              },
              success: function (data) {
                clicked = false;
                var code = data.meta.code;
                if (code === 200) {
                  window.location.href = data.response.redirect;
                } else {
                  $redirecting.addClass('hide');
                  $fail.removeClass('hide');
                }
              }
            });
          });


          // v2 做
          /*
          if (authorization) {
            $('label[for="follow"]').removeClass('hide');
          }
          */
        });

      },

      function (data) {
        if (data.meta.code === 404) {
          res.location('/404');
        }
      }
    );
  };


  var _crosstoken = function (res, req, next, params, data, cats, cat, ctoken, accept, mute) {
    var session = req.session,
        authorization = session.authorization,
        user = session.user;
    Api.request('getCrossByInvitationToken',
      {
        type: 'POST',
        params: params,
        data: data
      }
      , function (data) {
        var auth = data.authorization
          , browsing_identity = data.browsing_identity
          , action = data.action
          , cross = data.cross
          , cross_access_token = data.cross_access_token
          , read_only = data.read_only;

        if (false === read_only && cross_access_token) {
          cats || (cats = {});
          cats[ctoken] = cross_access_token;
          Store.set('cats', cats);
        }

        //
        function render() {
          res.render('x.html', function (tpl) {
            $('#app-main')
              .empty()
              .append(tpl);
            Bus.emit('xapp:cross:main');
            Bus.emit('xapp:cross', null, browsing_identity, cross, read_only, cat, !!accept);
            if (mute) {
              var d = $('<div id="js-dialog-unsubscribe" data-destory="true" data-widget="dialog" data-dialog-type="unsubscribe">');
              d.data('source', cross);
              d.appendTo($('#app-tmp'));
              d.trigger('click.dialog.data-api');
            }
          });
        }

        Bus.emit('app:page:home', false);

        Bus.emit('app:page:usermenu', true);

        if (auth || !browsing_identity) {

          if (!session.initMenuBar) {
            //session.initMenuBar = true;
            if (auth) {
              Bus.once('app:user:signin:after', function () {
                res.redirect('/#!' + cross.id);
                //render();
              });
              Bus.emit('app:user:signin', auth.token, auth.user_id);

              return;
            }
            else {
              // 没有 browsing-identity
              res.redirect('/#!' + cross.id);
            }

          }
        }
        else if (browsing_identity) {
          Bus.emit('app:usermenu:updatebrowsing',
            {   normal: user
              , browsing: { identities: [browsing_identity], name: browsing_identity.name }
              , action: action
              , setup: action === 'setup'
              , originToken: ctoken
              , tokenType: 'cross'
              , page: 'cross'
              , readOnly: read_only
            }
            , 'browsing_identity');
        }

        render();
      }
      , function (data) {
        var status = data && data.meta && data.meta.code
          , hasAuth = !!authorization;
        if (403 === status) {
          Bus.emit('app:page:home', false);
          Bus.emit('app:page:usermenu', hasAuth);
          if (hasAuth) {
            Bus.emit('app:usermenu:updatenormal', user);
            Bus.emit('app:usermenu:crosslist'
              , authorization.token
              , authorization.user_id
            );
          }
          Bus.emit('app:cross:forbidden', null, null);
        } else if (404 === status) {
          res.location('/404');
        }
      }
    );
  };

  // cross-token
  routes.crossToken = function (req, res, next) {
    var session = req.session
      , authorization = session.authorization
      , authToken = authorization && authorization.token
      , ctoken = req.params[0]
      , crossAction = req.params[1]
      , accept = crossAction === 'accept'
      , mute = crossAction === 'mute'
      , cats = Store.get('cats')
      // cat = cross_access_token
      , cat
      , params = {}
      , data;

    if (authToken) {
      params.token = authToken;
    }

    if (cats) {
      cat = cats[ctoken];
    }

    data = { invitation_token: ctoken };
    if (cat) {
      data.cross_access_token = cat;
    }

    _crosstoken(res, req, next, params, data, cats, cat, ctoken, accept, mute);
  };

  routes.crossPhoneToken = function (req, res, next) {
    var session = req.session,
        authorization = session.authorization,
        authToken = authorization && authorization.token,
        cross_id = req.params[0],
        ctoken = req.params[1],
        crossAction = req.params[2],
        accept = crossAction === 'accept',
        mute = crossAction === 'mute',
        cats = Store.get('cats'),
        params = {},
        cat, data;

    if (authToken) {
      params.token = authToken;
    }

    if (cats) {
      cat = cats[ctoken];
    }

    data = {
      invitation_token: ctoken,
      cross_id: cross_id
    };
    if (cat) {
      data.cross_access_token = cat;
    }

    _crosstoken(res, req, next, params, data, cats, cat, ctoken, accept, mute);
  };


  // profile
  routes.profile = function (req, res) {
    var session = req.session
      , authorization = session.authorization
      , user = session.user
      , browsing_authorization = session.browsing_authorization
      , browsing_user = session.browsing_user
      , action = session.action
      , oauth = session.oauth;

    Bus.emit('app:page:home', false);

    // 先检查 token
    var param = req.params[2]
      , match = param && param.match(Util.tokenRegExp)
      , token = match && match[1];

    // 跳转倒 `resolveToken`, 解析 `token`，解析成功跳回来
    if (token && !browsing_authorization) {
      res.redirect('/#token=' + token);
      return;
    }

    if (authorization || browsing_authorization) {

      document.title = 'EXFE - Profile';

      Bus.emit('app:page:usermenu', true);

      // 正常登录
      if (authorization && !browsing_authorization) {

        Bus.emit('app:usermenu:updatenormal', user);

        Bus.emit('app:usermenu:crosslist'
          , authorization.token
          , authorization.user_id
        );

        res.render('profile.html', function (tpl) {
          $('#app-main').data('event', session.event);
          delete session.event;

          $('#app-main').append(tpl);
          Bus.emit('app:profile:identities', user);
          var dfd = $.Deferred(),
              e = $.Event('click.dialog.data-api');
          dfd.resolve(authorization);
          Bus.emit('app:profile:show', dfd);

          // 弹出 OAuth Welcome
          // `identity_status`: connected | new | revoked
          if (oauth) {
            if (oauth.identity_status !== 'connected') {
              e.following = oauth.following;
              e.identity = oauth.identity;
              e.token = authorization.token;
              $('<div id="app-oauth-welcome" class="hide" data-widget="dialog" data-dialog-type="welcome" data-destory="true"></div>')
              .appendTo($('#app-tmp'))
                .trigger(e);
            }
            //else if (oauth.identity_status === 'revoked') {}

            Store.remove('oauth');
            delete session.oauth;
          } else if (session.verification_token) {
            $('<div id="app-oauth-resetpassword" class="hide" data-widget="dialog" data-dialog-type="setpassword" data-destory="true"></div>')
            .data('token', session.verification_token)
            .appendTo($('#app-tmp'))
              .trigger(e);
            delete session.verification_token;
          }
        });
      }

      // `browser identity` 浏览身份登录
      else if (browsing_authorization) {

        $(document.body).attr('data-browsing');

        Bus.emit('app:usermenu:updatebrowsing',
          {   normal: user
            , browsing: browsing_user
            , action: action
            , setup: action === 'INPUT_NEW_PASSWORD'
            , originToken: session.originToken
            , tokenType: 'user'
            , page: 'profile'
          }
          , 'browsing_identity');

        delete session.originToken;

        res.render('profile.html', function (tpl) {
          $('#app-main').append(tpl);
          Bus.emit('app:profile:identities', browsing_user);
          var dfd = $.Deferred();
          dfd.resolve(browsing_authorization);
          Bus.emit('app:profile:show', dfd);
        });
      }

      else {
        // 跳回首页
        res.redirect('/');
      }

    } else {
      // 跳回首页
      res.redirect('/');
    }
  };


  // invalid
  routes.invalid = function (req, res) {
    var session = req.session
      , authorization = session.authorization
      , user = session.user;

    document.title = 'EXFE - Invalid Link'

    Bus.emit('app:page:home', false);

    if (authorization) {
      Bus.emit('app:page:usermenu', true);
      Bus.emit('app:usermenu:updatenormal', user);
      Bus.emit('app:usermenu:crosslist'
        , authorization.token
        , authorization.user_id
      );
    }
    else {
      Bus.emit('app:page:usermenu', false);
    }

    res.render('invalid.html', function (tpl) {
      $('#app-main').append(tpl);
    });
  };


  // signout
  routes.signout = function () {
    Store.remove('cats');
    Store.remove('user');
    Store.remove('authorization');
    window.location.href = '/';
  };


  // Get User Data
  routes.refreshAuthUser = function (req, res, next) {
    var session = req.session
      , authorization = session.authorization;

    if (!authorization) {
      next();
      return;
    }

    // Get User
    Bus.emit('app:api:getuser'
      , authorization.token
      , authorization.user_id
      , function (data) {
          var user = data.user;
          Store.set('user', session.user = user);

          // 如果 `user` 没有身份，则登出
          if (0 === user.identities.length) {
            routes.signout();
            return;
          }

          next();
        }
        // 继续使用本地缓存
      , function (data) {
          var code = data && data.meta && data.meta.code;
          if (401 === code) {
            Store.remove('user');
            Store.remove('authorization');
            delete session.user;
            delete session.authorization;
          }
          next();
        }
    );
  };


  // Helpers:
  // ----------------------------
  function redirectToProfile(req, res) {
    var session = req.session;
    var user = Store.get('user');

    function done(user, res) {
      var external_username = Util.printExtUserName(user.identities[0]);
      res.redirect('/#' + external_username.replace(/ /g, ''));
    }

    if (user) {
      done(user, res);
      return;
    }

    var authorization = session.authorization;
    //Bus.once('app:user:signin:after', function (user) {
      //done(user, res);
    //});
    Bus.emit('app:user:signin', authorization.token, authorization.user_id, true);
  }

});

/**
 * X webapp Bootstrap!
 */
define(function (require) {
  "use strict";

  var _ENV_ = window._ENV_
    , Handlebars = require('handlebars');

  var middleware = require('middleware')
    , routes = require('routes');

  var lightsaber = require('lightsaber');

  // Create App   ***********************************
  var app = lightsaber();

  var Widget = require('widget');
  app.widgetCaches = Widget.caches;

  app.use(middleware.fixedFaceBookURL);
  app.use(middleware.basicAuth);
  app.use(middleware.cleanupAppTmp);
  app.initRouter();
  // *注: 要使 `errorHandler` 生效，`app.initRouter` 必须先初始化。
  app.use(middleware.errorHandler);

  app.set('timestamp', _ENV_.timestamp);
  app.set('view cache', true);
  app.set('view engine', Handlebars);
  app.set('views', '/static/views');

  // Routes       ***********************************

  // index - `/#?`
  // /^\/+#?\/?$/i
  app.get(/^\/+(?:\?)?(?:ipad)?#{0,}$/, routes.index);

  // sms-token
  app.get(/^\?t=([a-zA-Z0-9]{3,})$/, function (req, res, next) {
    var getSMSTokenFromHead = function () {
      var header = document.getElementsByTagName('head')[0],
          meta = document.getElementsByName('sms-token')[0],
          smsToken = null;

      if (meta) {
        smsToken = JSON.parse(meta.content);
        header.removeChild(meta);
      }

      return smsToken;
    };

    var smsToken = getSMSTokenFromHead(),
        originToken = req.params[0];

    if (smsToken) {
      routes.inspectResolveToken(req, res, next, smsToken, originToken);
    } else {
      res.redirect('/#invalid/token=' + originToken);
    }

  }, routes.resolveShow);

  // gather a x - `/#gather`
  app.get(/^\/+(?:\?)?(?:ipad)?#gather\/?$/, routes.refreshAuthUser, routes.gather);


  // resolve-token - `/#token=5c9a628f2b4f863435bc8d599a857c21`
  app.get(/^\/+(?:\?)?(?:ipad)?#token=([a-zA-Z0-9]{64})\/?$/, routes.resolveToken, routes.resolveRequest, routes.resolveShow);


  // cross - `/#!233`
  app.get(/^\/+(?:\?)?(?:ipad)?#!([1-9][0-9]*)\/?$/, routes.refreshAuthUser, routes.cross);


  // opening a private invitation X.
  // cross - `/#!233/mk7`
  app.get(/^\/+(?:\?)?(?:ipad)?#!([1-9][0-9]*)\/([a-zA-Z0-9]{3})\/?$/, routes.refreshAuthUser, routes.crossInvitation);


  // phone-cross-token - `/#!233/8964`
  app.get(/^\/+(?:\?)?(?:ipad)?#!([1-9][0-9]*)\/([a-zA-Z0-9]{4})(?:\/(accept|mute))?\/?$/, routes.refreshAuthUser, routes.crossPhoneToken);
  // cross-token - `/#!token=63435bc8d599a857c215c9a628f2b4f8`
  app.get(/^\/+(?:\?)?(?:ipad)?#!token=([a-zA-Z0-9]{32})\/?$/, routes.refreshAuthUser, routes.crossToken);
  // email-cross-token - `/#!token=63435bc8d599a857c215c9a628f2b4f8/accept`
  app.get(/^\/+(?:\?)?(?:ipad)?#!token=([a-zA-Z0-9]{32})\/(accept|mute)\/?$/, routes.refreshAuthUser, routes.crossToken);

  // profile
  //        email:    cfd@exfe.com        - `/#cfd@exfe.com`
  //      twitter:    @cfddream@twitter   - `/#@cfddream@twitter`
  //     facebook:    cfddream@facebook   - `/#cfddream@facebook`
  //        phone:    +86138964xx233      - `/#+86138964xx233`
  //    instagram:    cfddream@instagram  - `/#cfddream@instagram`
  //       flickr:    u0391@flickr        - `/#u0391@flickr`
  //      dropbox:    cfd@exfe.com        - `/#cfd@exfe.com
  app.get(/^\/+(?:\?)?(?:ipad)?#([^@\/\s\!=]+)?@([^@\/\s]+)(?:\/?(.*))\/?$/, routes.refreshAuthUser, routes.profile);
  app.get(/^\/+(?:\?)?(?:ipad)?#(\+)(1\d{10}|86\d{11})(?:\/?(.*))\/?$/, routes.refreshAuthUser, routes.profile);

  // invalid link
  app.get(/^\/+(?:\?)?(?:ipad)?#invalid\/token=([a-zA-Z0-9]{64})\/?$/, routes.invalid);

  // signout
  app.get(/^\/+(?:\?)?(?:ipad)?#signout\/?$/, routes.signout);


  // app running
  app.run();

  // global
  window.App = app;
});
