(function (tree) {

//
// A function call node.
//
<<<<<<< HEAD
tree.Call = function (name, args, index, filename) {
    this.name = name;
    this.args = args;
    this.index = index;
    this.filename = filename;
};
tree.Call.prototype = {
=======
tree.Call = function (name, args, index, currentFileInfo) {
    this.name = name;
    this.args = args;
    this.index = index;
    this.currentFileInfo = currentFileInfo;
};
tree.Call.prototype = {
    type: "Call",
    accept: function (visitor) {
        this.args = visitor.visit(this.args);
    },
>>>>>>> af11bda... add node_modules
    //
    // When evaluating a function call,
    // we either find the function in `tree.functions` [1],
    // in which case we call it, passing the  evaluated arguments,
    // if this returns null or we cannot find the function, we 
    // simply print it out as it appeared originally [2].
    //
    // The *functions.js* file contains the built-in functions.
    //
    // The reason why we evaluate the arguments, is in the case where
    // we try to pass a variable to a function, like: `saturate(@color)`.
    // The function should receive the value, not the variable.
    //
    eval: function (env) {
<<<<<<< HEAD
        var args = this.args.map(function (a) { return a.eval(env) }),
            result;

        if (this.name in tree.functions) { // 1.
            try {
                result = tree.functions[this.name].apply(tree.functions, args);
=======
        var args = this.args.map(function (a) { return a.eval(env); }),
            nameLC = this.name.toLowerCase(),
            result, func;

        if (nameLC in tree.functions) { // 1.
            try {
                func = new tree.functionCall(env, this.currentFileInfo);
                result = func[nameLC].apply(func, args);
>>>>>>> af11bda... add node_modules
                if (result != null) {
                    return result;
                }
            } catch (e) {
                throw { type: e.type || "Runtime",
                        message: "error evaluating function `" + this.name + "`" +
                                 (e.message ? ': ' + e.message : ''),
<<<<<<< HEAD
                        index: this.index, filename: this.filename };
=======
                        index: this.index, filename: this.currentFileInfo.filename };
>>>>>>> af11bda... add node_modules
            }
        }
        
        // 2.
        return new(tree.Anonymous)(this.name +
<<<<<<< HEAD
            "(" + args.map(function (a) { return a.toCSS(env) }).join(', ') + ")");
=======
            "(" + args.map(function (a) { return a.toCSS(env); }).join(', ') + ")");
>>>>>>> af11bda... add node_modules
    },

    toCSS: function (env) {
        return this.eval(env).toCSS();
    }
};

})(require('../tree'));
